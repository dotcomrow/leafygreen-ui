"use strict";(self.webpackChunkleafygreen_ui=self.webpackChunkleafygreen_ui||[]).push([[9195],{"./packages/hooks/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D9: () => (/* binding */ U),\n/* harmony export */   DK: () => (/* binding */ C),\n/* harmony export */   Iy: () => (/* binding */ R),\n/* harmony export */   LI: () => (/* binding */ M),\n/* harmony export */   OR: () => (/* binding */ P),\n/* harmony export */   OZ: () => (/* binding */ E),\n/* harmony export */   Sj: () => (/* binding */ A),\n/* harmony export */   Uu: () => (/* binding */ S),\n/* harmony export */   Uv: () => (/* binding */ L),\n/* harmony export */   V$: () => (/* binding */ H),\n/* harmony export */   YM: () => (/* binding */ z),\n/* harmony export */   nP: () => (/* binding */ j),\n/* harmony export */   qX: () => (/* binding */ T),\n/* harmony export */   rr: () => (/* binding */ d),\n/* harmony export */   ts: () => (/* binding */ I),\n/* harmony export */   ue: () => (/* binding */ D)\n/* harmony export */ });\n/* unused harmony exports useForceRerender, useObservedRef, usePoller */\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/typeof.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/lodash/debounce.js");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_debounce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/lodash/isUndefined.js");\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/lib/dist/esm/index.js");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/lodash/isEqual.js");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nvar d = function d(n, t) {\n  var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (n && n.current && t && t.current) {\n      var r = n.current.offsetTop,\n        o = t.current,\n        i = o.scrollTop;\n      (r > o.offsetHeight || r < i) && t.current.scrollTo({\n        top: r - e,\n        behavior: "smooth"\n      });\n    }\n  }, [t, n, e]);\n};\nfunction s(n, r) {\n  (null == r || r > n.length) && (r = n.length);\n  for (var t = 0, e = Array(r); t < r; t++) e[t] = n[t];\n  return e;\n}\nfunction p(n, r, t) {\n  return (r = function (n) {\n    var r = function (n, r) {\n      if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(n) || !n) return n;\n      var t = n[Symbol.toPrimitive];\n      if (void 0 !== t) {\n        var e = t.call(n, r);\n        if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(e)) return e;\n        throw new TypeError("@@toPrimitive must return a primitive value.");\n      }\n      return String(n);\n    }(n, "string");\n    return "symbol" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(r) ? r : r + "";\n  }(r)) in n ? Object.defineProperty(n, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : n[r] = t, n;\n}\nfunction y(n, r) {\n  var t = Object.keys(n);\n  if (Object.getOwnPropertySymbols) {\n    var e = Object.getOwnPropertySymbols(n);\n    r && (e = e.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(n, r).enumerable;\n    })), t.push.apply(t, e);\n  }\n  return t;\n}\nfunction m(n) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? y(Object(t), !0).forEach(function (r) {\n      p(n, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t)) : y(Object(t)).forEach(function (r) {\n      Object.defineProperty(n, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return n;\n}\nfunction b(n, r) {\n  return function (n) {\n    if (Array.isArray(n)) return n;\n  }(n) || function (n, r) {\n    var t = null == n ? null : "undefined" != typeof Symbol && n[Symbol.iterator] || n["@@iterator"];\n    if (null != t) {\n      var e,\n        o,\n        i,\n        u,\n        c = [],\n        a = !0,\n        l = !1;\n      try {\n        if (i = (t = t.call(n)).next, 0 === r) ;else for (; !(a = (e = i.call(t)).done) && (c.push(e.value), c.length !== r); a = !0);\n      } catch (n) {\n        l = !0, o = n;\n      } finally {\n        try {\n          if (!a && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;\n        } finally {\n          if (l) throw o;\n        }\n      }\n      return c;\n    }\n  }(n, r) || w(n, r) || function () {\n    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction h(n) {\n  return function (n) {\n    if (Array.isArray(n)) return s(n);\n  }(n) || function (n) {\n    if ("undefined" != typeof Symbol && null != n[Symbol.iterator] || null != n["@@iterator"]) return Array.from(n);\n  }(n) || w(n) || function () {\n    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction g(n) {\n  return g = "function" == typeof Symbol && "symbol" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(Symbol.iterator) ? function (n) {\n    return (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(n);\n  } : function (n) {\n    return n && "function" == typeof Symbol && n.constructor === Symbol && n !== Symbol.prototype ? "symbol" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(n);\n  }, g(n);\n}\nfunction w(n, r) {\n  if (n) {\n    if ("string" == typeof n) return s(n, r);\n    var t = {}.toString.call(n).slice(8, -1);\n    return "Object" === t && n.constructor && (t = n.constructor.name), "Map" === t || "Set" === t ? Array.from(n) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? s(n, r) : void 0;\n  }\n}\nfunction O() {\n  return {\n    width: window.innerWidth,\n    height: window.innerHeight\n  };\n}\nfunction j() {\n  var n = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), 2),\n    e = n[0],\n    o = n[1];\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    o(O());\n    var n = lodash_debounce__WEBPACK_IMPORTED_MODULE_1___default()(function () {\n      return o(O());\n    }, 100);\n    return window.addEventListener("resize", n), function () {\n      return window.removeEventListener("resize", n);\n    };\n  }, []), e;\n}\nvar S = function S(n) {\n  var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 8,\n    t = j();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    if (t && n && n.current) {\n      var e = n.current.getBoundingClientRect(),\n        o = e.top,\n        i = e.bottom;\n      return Math.max(t.height - i, o) - r;\n    }\n  }, [t, n, r]);\n};\nfunction P(n, t) {\n  var e = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n    i = e.options,\n    u = e.enabled,\n    c = void 0 === u || u,\n    a = e.dependencies,\n    l = void 0 === a ? [c, n] : a,\n    f = e.element,\n    v = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(function () {});\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    v.current = t;\n  }, [t]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (!1 !== c) {\n      if ("once" === c || !0 === c) {\n        var r = function r(n) {\n            v.current(n);\n          },\n          t = m(m({}, i), {}, {\n            once: "once" === c\n          });\n        return (null != f ? f : document).addEventListener(n, r, t), function () {\n          (null != f ? f : document).removeEventListener(n, r, t);\n        };\n      }\n      console.error("Received value of type ".concat(g(c), " for property `enabled`. Expected a boolean."));\n    }\n  }, l);\n}\nfunction A(n, r) {\n  var t = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n  function e(n) {\n    var t,\n      e = n.target;\n    return Array.isArray(r) ? r.some(function (n) {\n      var r;\n      return null === (r = n.current) || void 0 === r ? void 0 : r.contains(e);\n    }) : (null === (t = r.current) || void 0 === t ? void 0 : t.contains(e)) || !1;\n  }\n  P("mousedown", function (n) {\n    e(n) || (n.preventDefault(), n.stopPropagation());\n  }, {\n    enabled: t\n  }), P("click", function (r) {\n    e(r) || (r.stopPropagation(), n());\n  }, {\n    options: {\n      capture: !0\n    },\n    enabled: t\n  });\n}\nvar E = function E(n, o, i) {\n  var u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n      return !lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(n);\n    }, []),\n    c = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(i), 2),\n    v = c[0],\n    d = c[1],\n    s = function s(n) {\n      null == o || o(n), u || d(n.target.value);\n    };\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(n) && lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(i) && _leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_3__/* .consoleOnce */ .X3.error("Warning: `useControlledValue` hook is being used without a value or initialValue. This will cause a React warning when the input changes. Please decide between using a controlled or uncontrolled input element, and provide either a controlledValue or initialValue to `useControlledValue`");\n  }, [n, i]), {\n    isControlled: u,\n    value: u ? n : v,\n    handleChange: s,\n    setUncontrolledValue: d,\n    updateValue: function updateValue(n, r) {\n      if (r.current) {\n        r.current.value = n;\n        var t = (0,_leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_3__/* .createSyntheticEvent */ .yA)(new Event("change", {\n          cancelable: !0,\n          bubbles: !0\n        }), r.current);\n        s(t);\n      }\n    }\n  };\n};\nfunction C(r) {\n  var t = null == r ? void 0 : r.prefix;\n  return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    var r = function (r) {\n      return function (t) {\n        if (t) {\n          if (r.get(t)) return r.get(t);\n          var e = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n          return r.set(t, e), e;\n        }\n        _leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_3__/* .consoleOnce */ .X3.error("`useDynamicRefs`: Cannot get ref without key");\n      };\n    }(new Map());\n    return r;\n  }, [t]);\n}\nvar T = function T(n, r) {\n  return P("keydown", function (r) {\n    return function (n, r) {\n      27 === n.keyCode && (n.stopImmediatePropagation(), r());\n    }(r, n);\n  }, r);\n};\nfunction V() {\n  var n = b(t({}), 2)[1];\n  return i(function () {\n    return n({});\n  }, []);\n}\nfunction x(n) {\n  var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n    t = r.initialValue,\n    i = r.deps,\n    u = void 0 === i ? [] : i,\n    c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(t);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      get current() {\n        return c.current;\n      },\n      set current(r) {\n        c.current = r, n(r);\n      }\n    };\n  }, [n, c].concat(h(u)));\n}\nfunction I(n, r) {\n  var t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (n, r) {\n    Array.isArray(n) ? n.forEach(t) : "function" == typeof n ? n(r) : n && (n.current = r);\n  }, []);\n  return x((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (r) {\n    return t(n, r);\n  }, [n, t]), {\n    initialValue: r\n  });\n}\nvar k = 0;\nfunction D(n) {\n  var e = n.prefix;\n  return function (n) {\n    var e = n.id,\n      o = n.prefix,\n      i = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), 2),\n      u = i[0],\n      c = i[1];\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n      null == u && c(k += 1);\n    }, [u, o]), e || "".concat(null != o ? o : "lg", "-").concat(u);\n  }({\n    id: n.id,\n    prefix: e\n  });\n}\nvar M = function M() {\n  return ("undefined" == typeof window ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect).apply(void 0, arguments);\n};\nfunction R(n, e, o) {\n  var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n    u = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), 2),\n    c = u[0],\n    a = u[1];\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    if (i) {\n      var r = new MutationObserver(function () {\n        a(o.apply(void 0, arguments));\n      });\n      return n && r.observe(n, e), function () {\n        return r.disconnect();\n      };\n    }\n  }, [n, e, o, i]), c;\n}\nfunction L(n) {\n  var r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  return void 0 !== r.current && lodash_isEqual__WEBPACK_IMPORTED_MODULE_4___default()(r.current, n) || (r.current = n), r.current;\n}\nfunction B(n) {\n  var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n    i = e.interval,\n    u = void 0 === i ? 3e4 : i,\n    c = e.immediate,\n    a = void 0 === c || c,\n    l = e.enabled,\n    f = void 0 === l || l,\n    v = o(),\n    d = function () {\n      var n = function n() {\n          return "visible" === document.visibilityState;\n        },\n        e = b(t(!0), 2),\n        o = e[0],\n        i = e[1];\n      return r(function () {\n        i(n);\n      }, []), P("visibilitychange", function () {\n        i(n);\n      }), o;\n    }() && f;\n  r(function () {\n    v.current = n;\n  }), r(function () {\n    var n;\n    if (d) return a ? e() : r(), t;\n    function r() {\n      t(), n = setTimeout(e, u);\n    }\n    function t() {\n      clearTimeout(n);\n    }\n    function e() {\n      var n;\n      Promise.resolve(null === (n = v.current) || void 0 === n ? void 0 : n.call(v))["finally"](r);\n    }\n  }, [u, a, d]);\n}\nfunction U(n) {\n  var t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    t.current = n;\n  }), t.current;\n}\nfunction z(n) {\n  var r = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(n), 2),\n    e = r[0],\n    u = r[1],\n    c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n  return [e, (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (n) {\n    u(n), c.current = n;\n  }, [u]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    return c.current;\n  }, [])];\n}\nfunction H(n) {\n  var r = b((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), 2),\n    e = r[0],\n    o = r[1];\n  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(n) || "function" != typeof n) return {\n    onBlur: function onBlur() {},\n    onChange: function onChange() {}\n  };\n  return {\n    onBlur: function onBlur(r) {\n      o(!0), null == n || n(r.target.value);\n    },\n    onChange: function onChange(r) {\n      e && (null == n || n(r.target.value));\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/hooks/dist/esm/index.js\n')},"./packages/lib/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $$: () => (/* binding */ v),\n/* harmony export */   $K: () => (/* binding */ S),\n/* harmony export */   E6: () => (/* binding */ N),\n/* harmony export */   Kf: () => (/* binding */ k),\n/* harmony export */   Nk: () => (/* binding */ R),\n/* harmony export */   Pc: () => (/* binding */ _),\n/* harmony export */   Q2: () => (/* binding */ g),\n/* harmony export */   Up: () => (/* binding */ w),\n/* harmony export */   X3: () => (/* binding */ O),\n/* harmony export */   gh: () => (/* binding */ h),\n/* harmony export */   hy: () => (/* binding */ b),\n/* harmony export */   yA: () => (/* binding */ C),\n/* harmony export */   yn: () => (/* binding */ B)\n/* harmony export */ });\n/* unused harmony exports cloneReverse, createDataProp, isNotZeroLike, isZeroLike, pickAndOmit, rollover, truncateStart, typeIs */\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/typeof.js");\n/* harmony import */ var lodash_once__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./node_modules/lodash/once.js");\n/* harmony import */ var lodash_once__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_once__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_isNull__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./node_modules/lodash/isNull.js");\n/* harmony import */ var lodash_isNull__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isNull__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./node_modules/lodash/isUndefined.js");\n/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/lodash/omit.js");\n/* harmony import */ var lodash_omit__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_omit__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/lodash/pick.js");\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_pick__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/lodash/isObject.js");\n/* harmony import */ var lodash_isObject__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isObject__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\nfunction u(t, r) {\n  r = t.length;\n  for (var e = 0, n = Array(r); e < r; e++) n[e] = t[e];\n  return n;\n}\nfunction c(t, r, e) {\n  return (r = function (t) {\n    var r = function (t, r) {\n      if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(t) || !t) return t;\n      var e = t[Symbol.toPrimitive];\n      if (void 0 !== e) {\n        var n = e.call(t, r);\n        if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(n)) return n;\n        throw new TypeError("@@toPrimitive must return a primitive value.");\n      }\n      return String(t);\n    }(t, "string");\n    return "symbol" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(r) ? r : r + "";\n  }(r)) in t ? Object.defineProperty(t, r, {\n    value: e,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[r] = e, t;\n}\nfunction l(t, r) {\n  var e = Object.keys(t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(t);\n    r && (n = n.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(t, r).enumerable;\n    })), e.push.apply(e, n);\n  }\n  return e;\n}\nfunction f(t) {\n  for (var r = 1; r < arguments.length; r++) {\n    var e = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? l(Object(e), !0).forEach(function (r) {\n      c(t, r, e[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(e)) : l(Object(e)).forEach(function (r) {\n      Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(e, r));\n    });\n  }\n  return t;\n}\nfunction p(t) {\n  return function (t) {\n    if (Array.isArray(t)) return u(t);\n  }(t) || function (t) {\n    if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);\n  }(t) || function (t, r) {\n    if (t) {\n      if ("string" == typeof t) return u(t, r);\n      var e = {}.toString.call(t).slice(8, -1);\n      return "Object" === e && t.constructor && (e = t.constructor.name), "Map" === e || "Set" === e ? Array.from(t) : "Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? u(t, r) : void 0;\n    }\n  }(t) || function () {\n    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction s(t) {\n  return s = "function" == typeof Symbol && "symbol" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(Symbol.iterator) ? function (t) {\n    return (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(t);\n  } : function (t) {\n    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(t);\n  }, s(t);\n}\nfunction y(t) {\n  return null != t && t.nodeType === Node.ELEMENT_NODE;\n}\nvar m = Object.freeze({\n    __proto__: null,\n    array: function array(t) {\n      return null != t && t instanceof Array;\n    },\n    button: function button(t) {\n      return y(t) && "button" === t.tagName.toLowerCase();\n    },\n    element: y,\n    input: function input(t) {\n      return y(t) && "input" === t.tagName.toLowerCase();\n    }\n  }),\n  d = new Map(),\n  b = function b() {\n    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",\n      r = function (t) {\n        var r,\n          e,\n          n = (null !== (r = null === (e = d.get(t)) || void 0 === e ? void 0 : e.length) && void 0 !== r ? r : 0).toString().padStart(4, "0");\n        return "lg-ui".concat(t ? "-".concat(t) : "", "-").concat(n);\n      }(t);\n    if (d.has(t)) {\n      var e = d.get(t);\n      d.set(t, [r].concat(p(e)));\n    } else d.set(t, [r]);\n    return r;\n  };\nfunction v(t) {\n  return "string" == typeof (r = t) || "number" == typeof r ? t.toString().trim() : Array.isArray(t) ? t.map(v).join(" ").trim() : function (t) {\n    return t && "object" === s(t) && t.props;\n  }(t) ? v(t.props.children) : "";\n  var r;\n}\nvar g = {\n    Light: "light",\n    Dark: "dark"\n  },\n  h = function h(t) {\n    return t ? g.Dark : g.Light;\n  };\nfunction w(t) {\n  return 1 == new Set(t).size;\n}\nvar j = function j(t) {\n    if (t && Array.isArray(t)) {\n      var r = p(t);\n      return r.reverse(), r;\n    }\n  },\n  O = {\n    error: lodash_once__WEBPACK_IMPORTED_MODULE_0___default()(console.error),\n    warn: lodash_once__WEBPACK_IMPORTED_MODULE_0___default()(console.warn),\n    log: lodash_once__WEBPACK_IMPORTED_MODULE_0___default()(console.log)\n  },\n  S = function S(t) {\n    return !lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(t) && !lodash_isNull__WEBPACK_IMPORTED_MODULE_1___default()(t);\n  },\n  P = function P(t) {\n    return !S(t) || ["", "0", "00", 0].includes(t);\n  },\n  A = function A(t) {\n    return !P(t);\n  },\n  D = function D(t, r) {\n    return [o(t, r), n(t, r)];\n  },\n  E = function E(t, r, e) {\n    var n = e - r;\n    return t > e ? r + (t - e - 1) % n : t < r ? e - (r - t - 1) % n : t;\n  },\n  T = {\n    length: 30\n  },\n  L = function L(t) {\n    var r = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : T).length;\n    return t.length <= r ? t : t.substring(t.length - r);\n  };\nfunction k(t, r) {\n  var e;\n  return null != t && "object" === s(t) && "type" in t && (t.type.displayName === r || lodash_isObject__WEBPACK_IMPORTED_MODULE_5___default()(t.type) && "render" in t.type && (null === (e = t.type.render) || void 0 === e ? void 0 : e.displayName) === r);\n}\nvar N = function N(t, r) {\n    var n,\n      o = null === (n = react__WEBPACK_IMPORTED_MODULE_6___default().Children.map(t, function (t) {\n        if (r.some(function (r) {\n          return k(t, r);\n        })) return t;\n      })) || void 0 === n ? void 0 : n.filter(function (t) {\n        return !lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(t);\n      });\n    return lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(t) || (null == o ? void 0 : o.length) === react__WEBPACK_IMPORTED_MODULE_6___default().Children.count(t) || O.error("Children must be one of: ".concat(r.join(", ")), "Received children: ", t), o;\n  },\n  C = function C(t, r) {\n    Object.defineProperty(t, "target", {\n      writable: !1,\n      value: r\n    });\n    var e = !1,\n      n = !1;\n    return f(f({\n      nativeEvent: t\n    }, t), {}, {\n      currentTarget: t.currentTarget,\n      target: t.target,\n      bubbles: t.bubbles,\n      cancelable: t.cancelable,\n      defaultPrevented: t.defaultPrevented,\n      eventPhase: t.eventPhase,\n      isTrusted: t.isTrusted,\n      timeStamp: t.timeStamp,\n      type: t.type,\n      preventDefault: function preventDefault() {\n        e = !0, t.preventDefault();\n      },\n      isDefaultPrevented: function isDefaultPrevented() {\n        return e;\n      },\n      stopPropagation: function stopPropagation() {\n        n = !0, t.stopPropagation();\n      },\n      isPropagationStopped: function isPropagationStopped() {\n        return n;\n      },\n      persist: function persist() {}\n    });\n  };\nfunction U(t) {\n  var r = "data-leafygreen-ui";\n  return {\n    prop: c({}, r, t),\n    selector: "[".concat(r, \'="\').concat(t, \'"]\')\n  };\n}\nvar _ = {\n    ArrowUp: "ArrowUp",\n    ArrowDown: "ArrowDown",\n    ArrowLeft: "ArrowLeft",\n    ArrowRight: "ArrowRight",\n    Backspace: "Backspace",\n    BracketLeft: "[",\n    Delete: "Delete",\n    Enter: "Enter",\n    Escape: "Escape",\n    Space: " ",\n    Tab: "Tab"\n  },\n  R = {\n    Page: "page",\n    Step: "step",\n    Location: "location",\n    Date: "date",\n    Time: "time",\n    True: "true",\n    Unset: "false"\n  };\nfunction B(t) {\n  throw Error("Received unhandled value: ".concat(t));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/lib/dist/esm/index.js\n')},"./packages/portal/src/Portal/Portal.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   X: () => (/* binding */ usePortalContainer),\n/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("webpack/sharing/consume/default/react-dom/react-dom");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/hooks/dist/esm/index.js");\n\n\n\n\n\nfunction usePortalContainer(customContainer, portalRef) {\n  // Make container initially undefined so that the portal is not created\n  // or rendered on initial render. This allows server-side rendering since:\n  //  - ReactDOMServer cannot render portals\n  //  - A component\'s initial hydrated render should match the server render\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0___default().useState(),\n    _React$useState2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_React$useState, 2),\n    container = _React$useState2[0],\n    setContainer = _React$useState2[1];\n\n  // if a `portalRef` is passed to portal component, wait to set the portalReference\n  // until after the initial render\n  (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n    if (customContainer) {\n      if (portalRef) {\n        portalRef.current = customContainer;\n      }\n      setContainer(customContainer);\n      return;\n    }\n    var defaultContainer = document.createElement(\'div\');\n    document.body.appendChild(defaultContainer);\n    if (portalRef) {\n      portalRef.current = defaultContainer;\n    }\n    setContainer(defaultContainer);\n    return function () {\n      defaultContainer.remove();\n    };\n  }, [customContainer, portalRef]);\n  return container;\n}\n\n/**\n * Portals transport their children to a div that is appended to the end of `document.body` to or a node that can be specified with a container prop.\n */\nfunction Portal(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    container = _ref.container,\n    portalRef = _ref.portalRef;\n  var portalContainer = usePortalContainer(container !== null && container !== void 0 ? container : undefined, portalRef);\n  (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n    if (portalContainer && !container) {\n      portalContainer.className = className !== null && className !== void 0 ? className : \'\';\n    }\n  }, [container, portalContainer, className]);\n  if (!portalContainer) {\n    return null;\n  }\n  return /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(children, portalContainer);\n}\nPortal.displayName = \'Portal\';\nPortal.propTypes = {\n  children: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().node),\n  className: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().string),\n  container: prop_types__WEBPACK_IMPORTED_MODULE_4___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_4___default().node), (prop_types__WEBPACK_IMPORTED_MODULE_4___default().object)])\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Portal);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wb3J0YWwvc3JjL1BvcnRhbC9Qb3J0YWwudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDUDtBQUNOO0FBRThCO0FBSTFELFNBQVNJLGtCQUFrQkEsQ0FDaENDLGVBQTZCLEVBQzdCQyxTQUFnRCxFQUNoRDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBQUMsZUFBQSxHQUFrQ1AscURBQWMsQ0FBMEIsQ0FBQztJQUFBUyxnQkFBQSxHQUFBQyx5RkFBQSxDQUFBSCxlQUFBO0lBQXBFSSxTQUFTLEdBQUFGLGdCQUFBO0lBQUVHLFlBQVksR0FBQUgsZ0JBQUE7O0VBRTlCO0VBQ0E7RUFDQU4seUZBQXlCLENBQUMsWUFBTTtJQUM5QixJQUFJRSxlQUFlLEVBQUU7TUFDbkIsSUFBSUMsU0FBUyxFQUFFO1FBQ2JBLFNBQVMsQ0FBQ08sT0FBTyxHQUFHUixlQUFlO01BQ3JDO01BRUFPLFlBQVksQ0FBQ1AsZUFBZSxDQUFDO01BRTdCO0lBQ0Y7SUFFQSxJQUFNUyxnQkFBZ0IsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQ3RERCxRQUFRLENBQUNFLElBQUksQ0FBQ0MsV0FBVyxDQUFDSixnQkFBZ0IsQ0FBQztJQUMzQyxJQUFJUixTQUFTLEVBQUU7TUFDYkEsU0FBUyxDQUFDTyxPQUFPLEdBQUdDLGdCQUFnQjtJQUN0QztJQUVBRixZQUFZLENBQUNFLGdCQUFnQixDQUFDO0lBRTlCLE9BQU8sWUFBTTtNQUNYQSxnQkFBZ0IsQ0FBQ0ssTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQztFQUNILENBQUMsRUFBRSxDQUFDZCxlQUFlLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0VBQ2hDLE9BQU9LLFNBQVM7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU1MsTUFBTUEsQ0FBQUMsSUFBQSxFQUsyQjtFQUFBLElBSnhDQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtJQUNSQyxTQUFTLEdBQUFGLElBQUEsQ0FBVEUsU0FBUztJQUNUWixTQUFTLEdBQUFVLElBQUEsQ0FBVFYsU0FBUztJQUNUTCxTQUFTLEdBQUFlLElBQUEsQ0FBVGYsU0FBUztFQUVULElBQU1rQixlQUFlLEdBQUdwQixrQkFBa0IsQ0FBQ08sU0FBUyxhQUFUQSxTQUFTLGNBQVRBLFNBQVMsR0FBSWMsU0FBUyxFQUFFbkIsU0FBUyxDQUFDO0VBRTdFSCx5RkFBeUIsQ0FBQyxZQUFNO0lBQzlCLElBQUlxQixlQUFlLElBQUksQ0FBQ2IsU0FBUyxFQUFFO01BQ2pDYSxlQUFlLENBQUNELFNBQVMsR0FBR0EsU0FBUyxhQUFUQSxTQUFTLGNBQVRBLFNBQVMsR0FBSSxFQUFFO0lBQzdDO0VBQ0YsQ0FBQyxFQUFFLENBQUNaLFNBQVMsRUFBRWEsZUFBZSxFQUFFRCxTQUFTLENBQUMsQ0FBQztFQUUzQyxJQUFJLENBQUNDLGVBQWUsRUFBRTtJQUNwQixPQUFPLElBQUk7RUFDYjtFQUVBLG9CQUFPdkIsdURBQVksQ0FBQ3FCLFFBQVEsRUFBRUUsZUFBZSxDQUFDO0FBQ2hEO0FBRUFKLE1BQU0sQ0FBQ00sV0FBVyxHQUFHLFFBQVE7QUFFN0JOLE1BQU0sQ0FBQ08sU0FBUyxHQUFHO0VBQ2pCTCxRQUFRLEVBQUVwQix3REFBYztFQUN4QnFCLFNBQVMsRUFBRXJCLDBEQUFnQjtFQUMzQlMsU0FBUyxFQUFFVCwyREFBbUIsQ0FBQyxDQUFDQSx3REFBYyxFQUFFQSwwREFBZ0IsQ0FBQztBQUNuRSxDQUFDO0FBRUQsaUVBQWVrQixNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVhZnlncmVlbi11aS8uL3BhY2thZ2VzL3BvcnRhbC9zcmMvUG9ydGFsL1BvcnRhbC50c3g/YmY0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgTXV0YWJsZVJlZk9iamVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVBvcnRhbCB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnQGxlYWZ5Z3JlZW4tdWkvaG9va3MnO1xuXG5pbXBvcnQgeyBQb3J0YWxQcm9wcyB9IGZyb20gJy4vUG9ydGFsLnR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBvcnRhbENvbnRhaW5lcihcbiAgY3VzdG9tQ29udGFpbmVyPzogSFRNTEVsZW1lbnQsXG4gIHBvcnRhbFJlZj86IE11dGFibGVSZWZPYmplY3Q8SFRNTEVsZW1lbnQgfCBudWxsPixcbikge1xuICAvLyBNYWtlIGNvbnRhaW5lciBpbml0aWFsbHkgdW5kZWZpbmVkIHNvIHRoYXQgdGhlIHBvcnRhbCBpcyBub3QgY3JlYXRlZFxuICAvLyBvciByZW5kZXJlZCBvbiBpbml0aWFsIHJlbmRlci4gVGhpcyBhbGxvd3Mgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHNpbmNlOlxuICAvLyAgLSBSZWFjdERPTVNlcnZlciBjYW5ub3QgcmVuZGVyIHBvcnRhbHNcbiAgLy8gIC0gQSBjb21wb25lbnQncyBpbml0aWFsIGh5ZHJhdGVkIHJlbmRlciBzaG91bGQgbWF0Y2ggdGhlIHNlcnZlciByZW5kZXJcbiAgY29uc3QgW2NvbnRhaW5lciwgc2V0Q29udGFpbmVyXSA9IFJlYWN0LnVzZVN0YXRlPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPigpO1xuXG4gIC8vIGlmIGEgYHBvcnRhbFJlZmAgaXMgcGFzc2VkIHRvIHBvcnRhbCBjb21wb25lbnQsIHdhaXQgdG8gc2V0IHRoZSBwb3J0YWxSZWZlcmVuY2VcbiAgLy8gdW50aWwgYWZ0ZXIgdGhlIGluaXRpYWwgcmVuZGVyXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjdXN0b21Db250YWluZXIpIHtcbiAgICAgIGlmIChwb3J0YWxSZWYpIHtcbiAgICAgICAgcG9ydGFsUmVmLmN1cnJlbnQgPSBjdXN0b21Db250YWluZXI7XG4gICAgICB9XG5cbiAgICAgIHNldENvbnRhaW5lcihjdXN0b21Db250YWluZXIpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGVmYXVsdENvbnRhaW5lcik7XG4gICAgaWYgKHBvcnRhbFJlZikge1xuICAgICAgcG9ydGFsUmVmLmN1cnJlbnQgPSBkZWZhdWx0Q29udGFpbmVyO1xuICAgIH1cblxuICAgIHNldENvbnRhaW5lcihkZWZhdWx0Q29udGFpbmVyKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZWZhdWx0Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgIH07XG4gIH0sIFtjdXN0b21Db250YWluZXIsIHBvcnRhbFJlZl0pO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG4vKipcbiAqIFBvcnRhbHMgdHJhbnNwb3J0IHRoZWlyIGNoaWxkcmVuIHRvIGEgZGl2IHRoYXQgaXMgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiBgZG9jdW1lbnQuYm9keWAgdG8gb3IgYSBub2RlIHRoYXQgY2FuIGJlIHNwZWNpZmllZCB3aXRoIGEgY29udGFpbmVyIHByb3AuXG4gKi9cbmZ1bmN0aW9uIFBvcnRhbCh7XG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIGNvbnRhaW5lcixcbiAgcG9ydGFsUmVmLFxufTogUG9ydGFsUHJvcHMpOiBSZWFjdC5SZWFjdFBvcnRhbCB8IG51bGwge1xuICBjb25zdCBwb3J0YWxDb250YWluZXIgPSB1c2VQb3J0YWxDb250YWluZXIoY29udGFpbmVyID8/IHVuZGVmaW5lZCwgcG9ydGFsUmVmKTtcblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpZiAocG9ydGFsQ29udGFpbmVyICYmICFjb250YWluZXIpIHtcbiAgICAgIHBvcnRhbENvbnRhaW5lci5jbGFzc05hbWUgPSBjbGFzc05hbWUgPz8gJyc7XG4gICAgfVxuICB9LCBbY29udGFpbmVyLCBwb3J0YWxDb250YWluZXIsIGNsYXNzTmFtZV0pO1xuXG4gIGlmICghcG9ydGFsQ29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBwb3J0YWxDb250YWluZXIpO1xufVxuXG5Qb3J0YWwuZGlzcGxheU5hbWUgPSAnUG9ydGFsJztcblxuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm5vZGUsIFByb3BUeXBlcy5vYmplY3RdKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZVBvcnRhbCIsIlByb3BUeXBlcyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ1c2VQb3J0YWxDb250YWluZXIiLCJjdXN0b21Db250YWluZXIiLCJwb3J0YWxSZWYiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheSIsImNvbnRhaW5lciIsInNldENvbnRhaW5lciIsImN1cnJlbnQiLCJkZWZhdWx0Q29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwiUG9ydGFsIiwiX3JlZiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwicG9ydGFsQ29udGFpbmVyIiwidW5kZWZpbmVkIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJub2RlIiwic3RyaW5nIiwib25lT2ZUeXBlIiwib2JqZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/portal/src/Portal/Portal.tsx\n')},"./packages/portal/src/Portal/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>_Portal__WEBPACK_IMPORTED_MODULE_0__.X,Z:()=>_Portal__WEBPACK_IMPORTED_MODULE_0__.Z});var _Portal__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/portal/src/Portal/Portal.tsx")},"./packages/portal/src/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_Portal__WEBPACK_IMPORTED_MODULE_0__.Z,usePortalContainer:()=>_Portal__WEBPACK_IMPORTED_MODULE_0__.X});var _Portal__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./packages/portal/src/Portal/index.ts")}}]);