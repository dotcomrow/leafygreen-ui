"use strict";(self.webpackChunkleafygreen_ui=self.webpackChunkleafygreen_ui||[]).push([[9163],{"./packages/icon/src/generated/ChevronDown.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js");\n/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/emotion/dist/esm/index.js");\n/* harmony import */ var _glyphCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/icon/src/glyphCommon.ts");\n\n\n\n\nvar _templateObject, _templateObject2;\nvar _excluded = ["className", "size", "title", "aria-label", "aria-labelledby", "fill", "role"];\n/**\n* This is a generated file. Do not modify it manually.\n*\n* @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts\n* @checksum 8ef40ece7aa106122681ca83d78697a5\n*/\n\n\n\n\nvar ChevronDown = function ChevronDown(_ref) {\n  var className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 16 : _ref$size,\n    title = _ref.title,\n    ariaLabel = _ref[\'aria-label\'],\n    ariaLabelledby = _ref[\'aria-labelledby\'],\n    fill = _ref.fill,\n    _ref$role = _ref.role,\n    role = _ref$role === void 0 ? \'img\' : _ref$role,\n    props = (0,_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref, _excluded);\n  var fillStyle = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(["\\n        color: ", ";\\n      "])), fill);\n  var noFlexShrink = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(_templateObject2 || (_templateObject2 = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(["\\n        flex-shrink: 0;\\n      "])));\n  var accessibleProps = (0,_glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .generateAccessibleProps */ .W8)(role, \'ChevronDown\', (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)({\n    title: title\n  }, \'aria-label\', ariaLabel), \'aria-labelledby\', ariaLabelledby));\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({\n    className: (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.cx)((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)({}, fillStyle, fill != null), noFlexShrink, className),\n    height: typeof size === \'number\' ? size : _glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .sizeMap */ .dG[size],\n    width: typeof size === \'number\' ? size : _glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .sizeMap */ .dG[size],\n    role: role\n  }, accessibleProps, props, {\n    viewBox: "0 0 16 16"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M1.63604 5.36396C1.24551 5.75449 1.24551 6.38765 1.63604 6.77817L6.58579 11.7279L7.29289 12.435C7.68342 12.8256 8.31658 12.8256 8.70711 12.435L9.41421 11.7279L14.364 6.77817C14.7545 6.38765 14.7545 5.75449 14.364 5.36396L13.6569 4.65685C13.2663 4.26633 12.6332 4.26633 12.2426 4.65685L8 8.89949L3.75736 4.65685C3.36684 4.26633 2.73367 4.26633 2.34315 4.65685L1.63604 5.36396Z",\n    fill: \'currentColor\'\n  }));\n};\nChevronDown.displayName = \'ChevronDown\';\nChevronDown.isGlyph = true;\nChevronDown.propTypes =  false ? 0 : {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChevronDown);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9pY29uL3NyYy9nZW5lcmF0ZWQvQ2hldnJvbkRvd24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQytCO0FBQ0k7QUFDYztBQUNpQjtBQUdsRSxJQUFNTSxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQUMsSUFBQSxFQVNPO0VBQUEsSUFSdEJDLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO0lBQUFDLFNBQUEsR0FBQUYsSUFBQSxDQUNURyxJQUFJO0lBQUpBLElBQUksR0FBQUQsU0FBQSxjQUFHLEVBQUUsR0FBQUEsU0FBQTtJQUNURSxLQUFLLEdBQUFKLElBQUEsQ0FBTEksS0FBSztJQUNXQyxTQUFTLEdBQUFMLElBQUEsQ0FBeEIsWUFBWTtJQUNRTSxjQUFjLEdBQUFOLElBQUEsQ0FBbEMsaUJBQWlCO0lBQ2xCTyxJQUFJLEdBQUFQLElBQUEsQ0FBSk8sSUFBSTtJQUFBQyxTQUFBLEdBQUFSLElBQUEsQ0FDSlMsSUFBSTtJQUFKQSxJQUFJLEdBQUFELFNBQUEsY0FBRyxLQUFLLEdBQUFBLFNBQUE7SUFDVEUsS0FBSyxHQUFBQyxtR0FBQSxDQUFBWCxJQUFBLEVBQUFZLFNBQUE7RUFFUixJQUFNQyxTQUFTLEdBQUdsQiwyREFBRyxDQUFBbUIsZUFBQSxLQUFBQSxlQUFBLEdBQUFDLGlHQUFBLHVDQUNOUixJQUFJLENBQ2Q7RUFDTCxJQUFNUyxZQUFZLEdBQUdyQiwyREFBRyxDQUFBc0IsZ0JBQUEsS0FBQUEsZ0JBQUEsR0FBQUYsaUdBQUEseUNBRW5CO0VBQ0wsSUFBTUcsZUFBZSxHQUFHckIsK0VBQXVCLENBQUNZLElBQUksRUFBRSxhQUFhLEVBQUFVLDBGQUFBLENBQUFBLDBGQUFBO0lBQ2pFZixLQUFLLEVBQUxBO0VBQUssR0FDSixZQUFZLEVBQUdDLFNBQVMsR0FDeEIsaUJBQWlCLEVBQUdDLGNBQWMsQ0FDcEMsQ0FBQztFQUNGLG9CQUFPYixnREFBQSxRQUFBNEIsbUZBQUE7SUFBS3BCLFNBQVMsRUFBRUwsMERBQUUsQ0FBQXVCLDBGQUFBLEtBQ3RCTixTQUFTLEVBQUdOLElBQUksSUFBSSxJQUFJLEdBQ3hCUyxZQUFZLEVBQUVmLFNBQVMsQ0FBRTtJQUFDcUIsTUFBTSxFQUFFLE9BQU9uQixJQUFJLEtBQUssUUFBUSxHQUFHQSxJQUFJLEdBQUdMLDJEQUFPLENBQUNLLElBQUksQ0FBRTtJQUFDb0IsS0FBSyxFQUFFLE9BQU9wQixJQUFJLEtBQUssUUFBUSxHQUFHQSxJQUFJLEdBQUdMLDJEQUFPLENBQUNLLElBQUksQ0FBRTtJQUFDTSxJQUFJLEVBQUVBO0VBQUssR0FBS1MsZUFBZSxFQUFNUixLQUFLO0lBQUVjLE9BQU8sRUFBQztFQUFXLGlCQUFDL0IsZ0RBQUE7SUFBTWdDLFFBQVEsRUFBQyxTQUFTO0lBQUNDLFFBQVEsRUFBQyxTQUFTO0lBQUNDLENBQUMsRUFBQyx5WEFBeVg7SUFBQ3BCLElBQUksRUFBRTtFQUFlLENBQUUsQ0FBTSxDQUFDO0FBQ3RwQixDQUFDO0FBQ0RSLFdBQVcsQ0FBQzZCLFdBQVcsR0FBRyxhQUFhO0FBQ3ZDN0IsV0FBVyxDQUFDOEIsT0FBTyxHQUFHLElBQUk7QUFDMUI5QixXQUFXLENBQUMrQixTQUFTLEdBQUFDLE1BQUEsR0FBRyxDQUl2QjtBQUNELGlFQUFlaEMsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYWZ5Z3JlZW4tdWkvLi9wYWNrYWdlcy9pY29uL3NyYy9nZW5lcmF0ZWQvQ2hldnJvbkRvd24udHN4PzFiYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIFRoaXMgaXMgYSBnZW5lcmF0ZWQgZmlsZS4gRG8gbm90IG1vZGlmeSBpdCBtYW51YWxseS5cbipcbiogQHNjcmlwdCAuL25vZGVfbW9kdWxlcy8uYmluL3RzLW5vZGUgcGFja2FnZXMvaWNvbi9zY3JpcHRzL2J1aWxkLnRzXG4qIEBjaGVja3N1bSA4ZWY0MGVjZTdhYTEwNjEyMjY4MWNhODNkNzg2OTdhNVxuKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNzcywgY3ggfSBmcm9tICdAbGVhZnlncmVlbi11aS9lbW90aW9uJztcbmltcG9ydCB7IGdlbmVyYXRlQWNjZXNzaWJsZVByb3BzLCBzaXplTWFwIH0gZnJvbSAnLi4vZ2x5cGhDb21tb24nO1xuaW1wb3J0IHsgTEdHbHlwaCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBpbnRlcmZhY2UgQ2hldnJvbkRvd25Qcm9wcyBleHRlbmRzIExHR2x5cGguQ29tcG9uZW50UHJvcHMge31cbmNvbnN0IENoZXZyb25Eb3duID0gKHtcbiAgY2xhc3NOYW1lLFxuICBzaXplID0gMTYsXG4gIHRpdGxlLFxuICBbJ2FyaWEtbGFiZWwnXTogYXJpYUxhYmVsLFxuICBbJ2FyaWEtbGFiZWxsZWRieSddOiBhcmlhTGFiZWxsZWRieSxcbiAgZmlsbCxcbiAgcm9sZSA9ICdpbWcnLFxuICAuLi5wcm9wc1xufTogQ2hldnJvbkRvd25Qcm9wcykgPT4ge1xuICBjb25zdCBmaWxsU3R5bGUgPSBjc3NgXG4gICAgICAgIGNvbG9yOiAke2ZpbGx9O1xuICAgICAgYDtcbiAgY29uc3Qgbm9GbGV4U2hyaW5rID0gY3NzYFxuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIGA7XG4gIGNvbnN0IGFjY2Vzc2libGVQcm9wcyA9IGdlbmVyYXRlQWNjZXNzaWJsZVByb3BzKHJvbGUsICdDaGV2cm9uRG93bicsIHtcbiAgICB0aXRsZSxcbiAgICBbJ2FyaWEtbGFiZWwnXTogYXJpYUxhYmVsLFxuICAgIFsnYXJpYS1sYWJlbGxlZGJ5J106IGFyaWFMYWJlbGxlZGJ5XG4gIH0pO1xuICByZXR1cm4gPHN2ZyBjbGFzc05hbWU9e2N4KHtcbiAgICBbZmlsbFN0eWxlXTogZmlsbCAhPSBudWxsXG4gIH0sIG5vRmxleFNocmluaywgY2xhc3NOYW1lKX0gaGVpZ2h0PXt0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyBzaXplIDogc2l6ZU1hcFtzaXplXX0gd2lkdGg9e3R5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IHNpemUgOiBzaXplTWFwW3NpemVdfSByb2xlPXtyb2xlfSB7Li4uYWNjZXNzaWJsZVByb3BzfSB7Li4ucHJvcHN9IHZpZXdCb3g9XCIwIDAgMTYgMTZcIj48cGF0aCBmaWxsUnVsZT1cImV2ZW5vZGRcIiBjbGlwUnVsZT1cImV2ZW5vZGRcIiBkPVwiTTEuNjM2MDQgNS4zNjM5NkMxLjI0NTUxIDUuNzU0NDkgMS4yNDU1MSA2LjM4NzY1IDEuNjM2MDQgNi43NzgxN0w2LjU4NTc5IDExLjcyNzlMNy4yOTI4OSAxMi40MzVDNy42ODM0MiAxMi44MjU2IDguMzE2NTggMTIuODI1NiA4LjcwNzExIDEyLjQzNUw5LjQxNDIxIDExLjcyNzlMMTQuMzY0IDYuNzc4MTdDMTQuNzU0NSA2LjM4NzY1IDE0Ljc1NDUgNS43NTQ0OSAxNC4zNjQgNS4zNjM5NkwxMy42NTY5IDQuNjU2ODVDMTMuMjY2MyA0LjI2NjMzIDEyLjYzMzIgNC4yNjYzMyAxMi4yNDI2IDQuNjU2ODVMOCA4Ljg5OTQ5TDMuNzU3MzYgNC42NTY4NUMzLjM2Njg0IDQuMjY2MzMgMi43MzM2NyA0LjI2NjMzIDIuMzQzMTUgNC42NTY4NUwxLjYzNjA0IDUuMzYzOTZaXCIgZmlsbD17J2N1cnJlbnRDb2xvcid9IC8+PC9zdmc+O1xufTtcbkNoZXZyb25Eb3duLmRpc3BsYXlOYW1lID0gJ0NoZXZyb25Eb3duJztcbkNoZXZyb25Eb3duLmlzR2x5cGggPSB0cnVlO1xuQ2hldnJvbkRvd24ucHJvcFR5cGVzID0ge1xuICBmaWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcbmV4cG9ydCBkZWZhdWx0IENoZXZyb25Eb3duOyJdLCJuYW1lcyI6WyJSZWFjdCIsIlByb3BUeXBlcyIsImNzcyIsImN4IiwiZ2VuZXJhdGVBY2Nlc3NpYmxlUHJvcHMiLCJzaXplTWFwIiwiQ2hldnJvbkRvd24iLCJfcmVmIiwiY2xhc3NOYW1lIiwiX3JlZiRzaXplIiwic2l6ZSIsInRpdGxlIiwiYXJpYUxhYmVsIiwiYXJpYUxhYmVsbGVkYnkiLCJmaWxsIiwiX3JlZiRyb2xlIiwicm9sZSIsInByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwiZmlsbFN0eWxlIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCIsIm5vRmxleFNocmluayIsIl90ZW1wbGF0ZU9iamVjdDIiLCJhY2Nlc3NpYmxlUHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJjcmVhdGVFbGVtZW50IiwiX2V4dGVuZHMiLCJoZWlnaHQiLCJ3aWR0aCIsInZpZXdCb3giLCJmaWxsUnVsZSIsImNsaXBSdWxlIiwiZCIsImRpc3BsYXlOYW1lIiwiaXNHbHlwaCIsInByb3BUeXBlcyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInN0cmluZyIsIm9uZU9mVHlwZSIsIm51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/icon/src/generated/ChevronDown.tsx\n')},"./packages/icon/src/generated/ChevronRight.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js");\n/* harmony import */ var _babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/emotion/dist/esm/index.js");\n/* harmony import */ var _glyphCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/icon/src/glyphCommon.ts");\n\n\n\n\nvar _templateObject, _templateObject2;\nvar _excluded = ["className", "size", "title", "aria-label", "aria-labelledby", "fill", "role"];\n/**\n* This is a generated file. Do not modify it manually.\n*\n* @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts\n* @checksum 73f42d213a0413474f1b711e3e8d6bd7\n*/\n\n\n\n\nvar ChevronRight = function ChevronRight(_ref) {\n  var className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 16 : _ref$size,\n    title = _ref.title,\n    ariaLabel = _ref[\'aria-label\'],\n    ariaLabelledby = _ref[\'aria-labelledby\'],\n    fill = _ref.fill,\n    _ref$role = _ref.role,\n    role = _ref$role === void 0 ? \'img\' : _ref$role,\n    props = (0,_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref, _excluded);\n  var fillStyle = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(_templateObject || (_templateObject = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(["\\n        color: ", ";\\n      "])), fill);\n  var noFlexShrink = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(_templateObject2 || (_templateObject2 = (0,_babel_runtime_helpers_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(["\\n        flex-shrink: 0;\\n      "])));\n  var accessibleProps = (0,_glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .generateAccessibleProps */ .W8)(role, \'ChevronRight\', (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)({\n    title: title\n  }, \'aria-label\', ariaLabel), \'aria-labelledby\', ariaLabelledby));\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("svg", (0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({\n    className: (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.cx)((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)({}, fillStyle, fill != null), noFlexShrink, className),\n    height: typeof size === \'number\' ? size : _glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .sizeMap */ .dG[size],\n    width: typeof size === \'number\' ? size : _glyphCommon__WEBPACK_IMPORTED_MODULE_2__/* .sizeMap */ .dG[size],\n    role: role\n  }, accessibleProps, props, {\n    viewBox: "0 0 16 16"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("path", {\n    fillRule: "evenodd",\n    clipRule: "evenodd",\n    d: "M5.36396 14.364C5.75449 14.7545 6.38765 14.7545 6.77818 14.364L11.7279 9.41421L12.435 8.70711C12.8256 8.31658 12.8256 7.68342 12.435 7.29289L11.7279 6.58579L6.77817 1.63604C6.38765 1.24552 5.75449 1.24551 5.36396 1.63604L4.65685 2.34315C4.26633 2.73367 4.26633 3.36684 4.65685 3.75736L8.89949 8L4.65685 12.2426C4.26633 12.6332 4.26633 13.2663 4.65686 13.6569L5.36396 14.364Z",\n    fill: \'currentColor\'\n  }));\n};\nChevronRight.displayName = \'ChevronRight\';\nChevronRight.isGlyph = true;\nChevronRight.propTypes =  false ? 0 : {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChevronRight);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9pY29uL3NyYy9nZW5lcmF0ZWQvQ2hldnJvblJpZ2h0LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrQjtBQUNJO0FBQ2M7QUFDaUI7QUFHbEUsSUFBTU0sWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUFDLElBQUEsRUFTTztFQUFBLElBUnZCQyxTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztJQUFBQyxTQUFBLEdBQUFGLElBQUEsQ0FDVEcsSUFBSTtJQUFKQSxJQUFJLEdBQUFELFNBQUEsY0FBRyxFQUFFLEdBQUFBLFNBQUE7SUFDVEUsS0FBSyxHQUFBSixJQUFBLENBQUxJLEtBQUs7SUFDV0MsU0FBUyxHQUFBTCxJQUFBLENBQXhCLFlBQVk7SUFDUU0sY0FBYyxHQUFBTixJQUFBLENBQWxDLGlCQUFpQjtJQUNsQk8sSUFBSSxHQUFBUCxJQUFBLENBQUpPLElBQUk7SUFBQUMsU0FBQSxHQUFBUixJQUFBLENBQ0pTLElBQUk7SUFBSkEsSUFBSSxHQUFBRCxTQUFBLGNBQUcsS0FBSyxHQUFBQSxTQUFBO0lBQ1RFLEtBQUssR0FBQUMsbUdBQUEsQ0FBQVgsSUFBQSxFQUFBWSxTQUFBO0VBRVIsSUFBTUMsU0FBUyxHQUFHbEIsMkRBQUcsQ0FBQW1CLGVBQUEsS0FBQUEsZUFBQSxHQUFBQyxpR0FBQSx1Q0FDTlIsSUFBSSxDQUNkO0VBQ0wsSUFBTVMsWUFBWSxHQUFHckIsMkRBQUcsQ0FBQXNCLGdCQUFBLEtBQUFBLGdCQUFBLEdBQUFGLGlHQUFBLHlDQUVuQjtFQUNMLElBQU1HLGVBQWUsR0FBR3JCLCtFQUF1QixDQUFDWSxJQUFJLEVBQUUsY0FBYyxFQUFBVSwwRkFBQSxDQUFBQSwwRkFBQTtJQUNsRWYsS0FBSyxFQUFMQTtFQUFLLEdBQ0osWUFBWSxFQUFHQyxTQUFTLEdBQ3hCLGlCQUFpQixFQUFHQyxjQUFjLENBQ3BDLENBQUM7RUFDRixvQkFBT2IsZ0RBQUEsUUFBQTRCLG1GQUFBO0lBQUtwQixTQUFTLEVBQUVMLDBEQUFFLENBQUF1QiwwRkFBQSxLQUN0Qk4sU0FBUyxFQUFHTixJQUFJLElBQUksSUFBSSxHQUN4QlMsWUFBWSxFQUFFZixTQUFTLENBQUU7SUFBQ3FCLE1BQU0sRUFBRSxPQUFPbkIsSUFBSSxLQUFLLFFBQVEsR0FBR0EsSUFBSSxHQUFHTCwyREFBTyxDQUFDSyxJQUFJLENBQUU7SUFBQ29CLEtBQUssRUFBRSxPQUFPcEIsSUFBSSxLQUFLLFFBQVEsR0FBR0EsSUFBSSxHQUFHTCwyREFBTyxDQUFDSyxJQUFJLENBQUU7SUFBQ00sSUFBSSxFQUFFQTtFQUFLLEdBQUtTLGVBQWUsRUFBTVIsS0FBSztJQUFFYyxPQUFPLEVBQUM7RUFBVyxpQkFBQy9CLGdEQUFBO0lBQU1nQyxRQUFRLEVBQUMsU0FBUztJQUFDQyxRQUFRLEVBQUMsU0FBUztJQUFDQyxDQUFDLEVBQUMsd1hBQXdYO0lBQUNwQixJQUFJLEVBQUU7RUFBZSxDQUFFLENBQU0sQ0FBQztBQUNycEIsQ0FBQztBQUNEUixZQUFZLENBQUM2QixXQUFXLEdBQUcsY0FBYztBQUN6QzdCLFlBQVksQ0FBQzhCLE9BQU8sR0FBRyxJQUFJO0FBQzNCOUIsWUFBWSxDQUFDK0IsU0FBUyxHQUFBQyxNQUFBLEdBQUcsQ0FJeEI7QUFDRCxpRUFBZWhDLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWFmeWdyZWVuLXVpLy4vcGFja2FnZXMvaWNvbi9zcmMvZ2VuZXJhdGVkL0NoZXZyb25SaWdodC50c3g/OTI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogVGhpcyBpcyBhIGdlbmVyYXRlZCBmaWxlLiBEbyBub3QgbW9kaWZ5IGl0IG1hbnVhbGx5LlxuKlxuKiBAc2NyaXB0IC4vbm9kZV9tb2R1bGVzLy5iaW4vdHMtbm9kZSBwYWNrYWdlcy9pY29uL3NjcmlwdHMvYnVpbGQudHNcbiogQGNoZWNrc3VtIDczZjQyZDIxM2EwNDEzNDc0ZjFiNzExZTNlOGQ2YmQ3XG4qL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3NzLCBjeCB9IGZyb20gJ0BsZWFmeWdyZWVuLXVpL2Vtb3Rpb24nO1xuaW1wb3J0IHsgZ2VuZXJhdGVBY2Nlc3NpYmxlUHJvcHMsIHNpemVNYXAgfSBmcm9tICcuLi9nbHlwaENvbW1vbic7XG5pbXBvcnQgeyBMR0dseXBoIH0gZnJvbSAnLi4vdHlwZXMnO1xuZXhwb3J0IGludGVyZmFjZSBDaGV2cm9uUmlnaHRQcm9wcyBleHRlbmRzIExHR2x5cGguQ29tcG9uZW50UHJvcHMge31cbmNvbnN0IENoZXZyb25SaWdodCA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgc2l6ZSA9IDE2LFxuICB0aXRsZSxcbiAgWydhcmlhLWxhYmVsJ106IGFyaWFMYWJlbCxcbiAgWydhcmlhLWxhYmVsbGVkYnknXTogYXJpYUxhYmVsbGVkYnksXG4gIGZpbGwsXG4gIHJvbGUgPSAnaW1nJyxcbiAgLi4ucHJvcHNcbn06IENoZXZyb25SaWdodFByb3BzKSA9PiB7XG4gIGNvbnN0IGZpbGxTdHlsZSA9IGNzc2BcbiAgICAgICAgY29sb3I6ICR7ZmlsbH07XG4gICAgICBgO1xuICBjb25zdCBub0ZsZXhTaHJpbmsgPSBjc3NgXG4gICAgICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgICAgYDtcbiAgY29uc3QgYWNjZXNzaWJsZVByb3BzID0gZ2VuZXJhdGVBY2Nlc3NpYmxlUHJvcHMocm9sZSwgJ0NoZXZyb25SaWdodCcsIHtcbiAgICB0aXRsZSxcbiAgICBbJ2FyaWEtbGFiZWwnXTogYXJpYUxhYmVsLFxuICAgIFsnYXJpYS1sYWJlbGxlZGJ5J106IGFyaWFMYWJlbGxlZGJ5XG4gIH0pO1xuICByZXR1cm4gPHN2ZyBjbGFzc05hbWU9e2N4KHtcbiAgICBbZmlsbFN0eWxlXTogZmlsbCAhPSBudWxsXG4gIH0sIG5vRmxleFNocmluaywgY2xhc3NOYW1lKX0gaGVpZ2h0PXt0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicgPyBzaXplIDogc2l6ZU1hcFtzaXplXX0gd2lkdGg9e3R5cGVvZiBzaXplID09PSAnbnVtYmVyJyA/IHNpemUgOiBzaXplTWFwW3NpemVdfSByb2xlPXtyb2xlfSB7Li4uYWNjZXNzaWJsZVByb3BzfSB7Li4ucHJvcHN9IHZpZXdCb3g9XCIwIDAgMTYgMTZcIj48cGF0aCBmaWxsUnVsZT1cImV2ZW5vZGRcIiBjbGlwUnVsZT1cImV2ZW5vZGRcIiBkPVwiTTUuMzYzOTYgMTQuMzY0QzUuNzU0NDkgMTQuNzU0NSA2LjM4NzY1IDE0Ljc1NDUgNi43NzgxOCAxNC4zNjRMMTEuNzI3OSA5LjQxNDIxTDEyLjQzNSA4LjcwNzExQzEyLjgyNTYgOC4zMTY1OCAxMi44MjU2IDcuNjgzNDIgMTIuNDM1IDcuMjkyODlMMTEuNzI3OSA2LjU4NTc5TDYuNzc4MTcgMS42MzYwNEM2LjM4NzY1IDEuMjQ1NTIgNS43NTQ0OSAxLjI0NTUxIDUuMzYzOTYgMS42MzYwNEw0LjY1Njg1IDIuMzQzMTVDNC4yNjYzMyAyLjczMzY3IDQuMjY2MzMgMy4zNjY4NCA0LjY1Njg1IDMuNzU3MzZMOC44OTk0OSA4TDQuNjU2ODUgMTIuMjQyNkM0LjI2NjMzIDEyLjYzMzIgNC4yNjYzMyAxMy4yNjYzIDQuNjU2ODYgMTMuNjU2OUw1LjM2Mzk2IDE0LjM2NFpcIiBmaWxsPXsnY3VycmVudENvbG9yJ30gLz48L3N2Zz47XG59O1xuQ2hldnJvblJpZ2h0LmRpc3BsYXlOYW1lID0gJ0NoZXZyb25SaWdodCc7XG5DaGV2cm9uUmlnaHQuaXNHbHlwaCA9IHRydWU7XG5DaGV2cm9uUmlnaHQucHJvcFR5cGVzID0ge1xuICBmaWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcbmV4cG9ydCBkZWZhdWx0IENoZXZyb25SaWdodDsiXSwibmFtZXMiOlsiUmVhY3QiLCJQcm9wVHlwZXMiLCJjc3MiLCJjeCIsImdlbmVyYXRlQWNjZXNzaWJsZVByb3BzIiwic2l6ZU1hcCIsIkNoZXZyb25SaWdodCIsIl9yZWYiLCJjbGFzc05hbWUiLCJfcmVmJHNpemUiLCJzaXplIiwidGl0bGUiLCJhcmlhTGFiZWwiLCJhcmlhTGFiZWxsZWRieSIsImZpbGwiLCJfcmVmJHJvbGUiLCJyb2xlIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJmaWxsU3R5bGUiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwibm9GbGV4U2hyaW5rIiwiX3RlbXBsYXRlT2JqZWN0MiIsImFjY2Vzc2libGVQcm9wcyIsIl9kZWZpbmVQcm9wZXJ0eSIsImNyZWF0ZUVsZW1lbnQiLCJfZXh0ZW5kcyIsImhlaWdodCIsIndpZHRoIiwidmlld0JveCIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJkIiwiZGlzcGxheU5hbWUiLCJpc0dseXBoIiwicHJvcFR5cGVzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwic3RyaW5nIiwib25lT2ZUeXBlIiwibnVtYmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/icon/src/generated/ChevronRight.tsx\n')},"./packages/table/src/TableV10/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  bL: () => (/* reexport */ TableV10_Cell),\n  g: () => (/* reexport */ DataType),\n  VJ: () => (/* reexport */ TableV10_HeaderRow),\n  X2: () => (/* reexport */ TableV10_Row),\n  iA: () => (/* reexport */ Table),\n  xD: () => (/* reexport */ TableV10_TableHeader)\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js + 2 modules\nvar defineProperty = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js");\n// EXTERNAL MODULE: consume shared module (default) react@^17.0.2 (singleton) (fallback: ./node_modules/react/index.js)\nvar index_js_ = __webpack_require__("webpack/sharing/consume/default/react/react");\nvar index_js_default = /*#__PURE__*/__webpack_require__.n(index_js_);\n// EXTERNAL MODULE: ./packages/emotion/dist/esm/index.js\nvar esm = __webpack_require__("./packages/emotion/dist/esm/index.js");\n// EXTERNAL MODULE: ./packages/leafygreen-provider/dist/esm/index.js\nvar dist_esm = __webpack_require__("./packages/leafygreen-provider/dist/esm/index.js");\n// EXTERNAL MODULE: ./packages/lib/dist/esm/index.js\nvar lib_dist_esm = __webpack_require__("./packages/lib/dist/esm/index.js");\n// EXTERNAL MODULE: ./packages/palette/dist/esm/index.js\nvar palette_dist_esm = __webpack_require__("./packages/palette/dist/esm/index.js");\n// EXTERNAL MODULE: ./packages/typography/dist/esm/index.js\nvar typography_dist_esm = __webpack_require__("./packages/typography/dist/esm/index.js");\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/styles.tsx\n\nvar _templateObject, _templateObject2;\n\n\nvar sharedStyles = (0,esm.css)(_templateObject || (_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  --lg-cell-padding-block: 10px;\\n  min-width: 40px;\\n  padding: var(--lg-cell-padding-block) 8px;\\n  box-sizing: border-box;\\n  vertical-align: baseline;\\n  text-align: left; // Justification is updated in `Row.tsx` for number cells\\n"], ["\\n  --lg-cell-padding-block: 10px;\\n  min-width: 40px;\\n  padding: var(--lg-cell-padding-block) 8px;\\n  box-sizing: border-box;\\n  vertical-align: baseline;\\n  text-align: left; // Justification is updated in \\\\`Row.tsx\\\\` for number cells\\n"])));\nvar getCommonCellStyles = function getCommonCellStyles(baseFontSize) {\n  return (0,esm.css)(_templateObject2 || (_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    ", "\\n    ", "\\n  "])), sharedStyles, typography_dist_esm/* bodyTypeScaleStyles */.dF[baseFontSize]);\n};\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/Cell.tsx\n\n\n\n\nvar _excluded = ["children", "className", "isHeader", "isDisabled"];\nvar Cell_templateObject, Cell_templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;\n\n\n\n\n\n\n\nvar tdInnerDivClassName = (0,lib_dist_esm/* createUniqueClassName */.hy)(\'td-inner-div\');\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\nvar baseStyles = (0,esm.css)(Cell_templateObject || (Cell_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: relative;\\n"])));\nvar thStyles = (0,esm.css)(Cell_templateObject2 || (Cell_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  font-weight: 600;\\n"])));\nvar lightModeThStyles = (0,esm.css)(_templateObject3 || (_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  border-right: 3px solid ", ";\\n  background-color: ", ";\\n"])), palette_dist_esm/* palette */.D.gray.light2, palette_dist_esm/* palette */.D.gray.light3);\nvar darkModeThStyles = (0,esm.css)(_templateObject4 || (_templateObject4 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  border-right: 3px solid ", ";\\n  background-color: ", ";\\n"])), palette_dist_esm/* palette */.D.gray.dark2, palette_dist_esm/* palette */.D.gray.dark4);\nvar innerDivStyles = (0,esm.css)(_templateObject5 || (_templateObject5 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  display: flex;\\n  align-items: center;\\n"])));\nvar lightModeDisabledHeaderStyles = (0,esm.css)(_templateObject6 || (_templateObject6 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  border-top: 1px solid ", ";\\n  border-bottom: 1px solid ", ";\\n  color: ", ";\\n  cursor: auto;\\n"])), palette_dist_esm/* palette */.D.gray.light3, palette_dist_esm/* palette */.D.gray.light3, palette_dist_esm/* palette */.D.black);\nvar darkModeDisabledHeaderStyles = (0,esm.css)(_templateObject7 || (_templateObject7 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  color: ", ";\\n  cursor: auto;\\n"])), palette_dist_esm/* palette */.D.white);\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\nvar Cell = /*#__PURE__*/(0,index_js_.forwardRef)(function (_ref, ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    _ref$isHeader = _ref.isHeader,\n    isHeader = _ref$isHeader === void 0 ? false : _ref$isHeader,\n    isDisabled = _ref.isDisabled,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, _excluded);\n  var Root = isHeader ? \'th\' : \'td\';\n  var baseFontSize = (0,typography_dist_esm/* useUpdatedBaseFontSize */.hN)();\n  var _useDarkMode = (0,dist_esm/* useDarkMode */.vs)(),\n    darkMode = _useDarkMode.darkMode;\n  var props = {\n    ref: ref,\n    className: (0,esm.cx)(getCommonCellStyles(baseFontSize), baseStyles, (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, thStyles, isHeader), lightModeThStyles, isHeader && !darkMode), darkModeThStyles, isHeader && darkMode), lightModeDisabledHeaderStyles, isHeader && isDisabled && !darkMode), darkModeDisabledHeaderStyles, isHeader && isDisabled && darkMode), className)\n  };\n  if (isHeader) {\n    props.scope = \'row\';\n    props.role = \'rowheader\';\n  }\n  return /*#__PURE__*/index_js_default().createElement(Root, (0,esm_extends/* default */.Z)({}, props, rest), /*#__PURE__*/index_js_default().createElement("div", {\n    className: (0,esm.cx)(tdInnerDivClassName, innerDivStyles)\n  }, /*#__PURE__*/index_js_default().createElement("span", {\n    className: (0,esm.css)(_templateObject8 || (_templateObject8 = (0,taggedTemplateLiteral/* default */.Z)(["\\n              display: flex;\\n            "])))\n  }, children)));\n});\nCell.displayName = \'Cell\';\n/* harmony default export */ const TableV10_Cell = (Cell);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/HeaderRow.tsx\n\n\nvar HeaderRow_excluded = ["children", "className"];\n\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\nfunction HeaderRow(_ref) {\n  var children = _ref.children,\n    className = _ref.className,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, HeaderRow_excluded);\n  return /*#__PURE__*/index_js_default().createElement("tr", (0,esm_extends/* default */.Z)({}, rest, {\n    className: className,\n    "data-testid": "leafygreen-ui-header-row"\n  }), children);\n}\nHeaderRow.displayName = \'HeaderRow\';\n/* harmony default export */ const TableV10_HeaderRow = (HeaderRow);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 3 modules\nvar toConsumableArray = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 3 modules\nvar slicedToArray = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");\n// EXTERNAL MODULE: ./node_modules/react-transition-group/esm/Transition.js + 2 modules\nvar Transition = __webpack_require__("./node_modules/react-transition-group/esm/Transition.js");\n// EXTERNAL MODULE: ./packages/hooks/dist/esm/index.js\nvar hooks_dist_esm = __webpack_require__("./packages/hooks/dist/esm/index.js");\n// EXTERNAL MODULE: ./packages/icon/src/generated/ChevronDown.tsx\nvar ChevronDown = __webpack_require__("./packages/icon/src/generated/ChevronDown.tsx");\n// EXTERNAL MODULE: ./packages/icon/src/generated/ChevronRight.tsx\nvar ChevronRight = __webpack_require__("./packages/icon/src/generated/ChevronRight.tsx");\n// EXTERNAL MODULE: ./packages/icon-button/dist/esm/index.js\nvar icon_button_dist_esm = __webpack_require__("./packages/icon-button/dist/esm/index.js");\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/NestedRow.tsx\n\n\n\n\nvar NestedRow_excluded = ["ref", "className", "state"];\nvar NestedRow_templateObject, NestedRow_templateObject2, NestedRow_templateObject3;\n\n\n\n\n\nvar transitionTime = 200;\nvar nestedRowInitialStyle = (0,esm.css)(NestedRow_templateObject || (NestedRow_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: relative;\\n  opacity: 0;\\n  transform-origin: 50% 0%;\\n  transition: ", "ms ease-in-out;\\n  transition-property: outline-color, opacity;\\n\\n  // This makes it so that any tall nested rows appear \\"below\\" the parents\\n  // This may cause issues if there are multiple levels of nesting\\n  // that all have more than one line of text. However this scenario is unlikely\\n  z-index: 0;\\n\\n  & > :is(td, th) {\\n    transition: ", "ms ease-in-out;\\n    transition-property: padding-block;\\n\\n    & > .", " {\\n      transition: ", "ms ease-in-out;\\n      transition-property: min-height, max-height;\\n    }\\n  }\\n"])), transitionTime, transitionTime, tdInnerDivClassName, transitionTime);\nvar hiddenRowStyles = (0,esm.css)(NestedRow_templateObject2 || (NestedRow_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  opacity: 0;\\n  outline-color: transparent;\\n\\n  & > :is(td, th) {\\n    padding-block: 0;\\n\\n    & > .", " {\\n      min-height: 0px;\\n      max-height: 0px;\\n    }\\n  }\\n"])), tdInnerDivClassName);\nvar nestedRowTransitionStyles = function nestedRowTransitionStyles(state, height) {\n  switch (state) {\n    case \'entered\':\n      return (0,esm.css)(NestedRow_templateObject3 || (NestedRow_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n        opacity: 1;\\n        & > :is(td, th) {\\n          & > .", " {\\n            --lg-cell-max-height: max(var(--lg-cell-min-height), ", "px);\\n            min-height: var(--lg-cell-min-height);\\n            max-height: var(--lg-cell-max-height);\\n          }\\n        }\\n      "])), tdInnerDivClassName, height);\n    default:\n      return hiddenRowStyles;\n  }\n};\n\n/**\n * @deprecated\n */\n\nvar NestedRow = function NestedRow(_ref) {\n  var ref = _ref.ref,\n    className = _ref.className,\n    state = _ref.state,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, NestedRow_excluded);\n  var _useState = (0,index_js_.useState)(0),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    nestedRowHeight = _useState2[0],\n    setNestedRowHeight = _useState2[1];\n  var nestedRowNodeRef = (0,index_js_.useRef)(null);\n  var calculateRowContentHeight = function calculateRowContentHeight() {\n    if (nestedRowNodeRef && nestedRowNodeRef.current) {\n      var innerSpan = nestedRowNodeRef.current.querySelector(".".concat(tdInnerDivClassName, " > span"));\n      if (innerSpan && innerSpan.offsetHeight) {\n        setNestedRowHeight(innerSpan.offsetHeight);\n      }\n    }\n  };\n  (0,index_js_.useEffect)(function () {\n    calculateRowContentHeight();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nestedRowNodeRef.current]);\n  return /*#__PURE__*/index_js_default().createElement(TableV10_Row, (0,esm_extends/* default */.Z)({}, rest, {\n    ref: nestedRowNodeRef,\n    className: (0,esm.cx)(nestedRowInitialStyle, nestedRowTransitionStyles(state, nestedRowHeight), className)\n  }));\n};\n/* harmony default export */ const TableV10_NestedRow = (NestedRow);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/TableContext.tsx\n\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0,defineProperty/* default */.Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n\nvar TableActionTypes = {\n  RegisterColumn: \'REGISTER_COLUMN_INFO\',\n  SetHasNestedRows: \'SET_HAS_NESTED_ROWS\',\n  SetHasRowSpan: \'SET_HAS_ROW_SPAN\',\n  SetData: \'SET_DATA\'\n};\n\n/**\n * @deprecated\n */\n\n\n\n/**\n * @deprecated\n */\n\nvar DataType = {\n  Number: \'number\',\n  Weight: \'weight\',\n  ZipCode: \'zipCode\',\n  String: \'string\',\n  Date: \'date\'\n};\n\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\nvar TableContext = /*#__PURE__*/(0,index_js_.createContext)({\n  state: {\n    data: []\n  },\n  dispatch: function dispatch() {}\n});\n\n/**\n * @deprecated\n */\nfunction reducer(state, action) {\n  switch (action.type) {\n    case TableActionTypes.SetHasRowSpan:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hasRowSpan: action.payload\n      });\n    case TableActionTypes.SetHasNestedRows:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        hasNestedRows: action.payload\n      });\n    case TableActionTypes.RegisterColumn:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        columnInfo: _objectSpread(_objectSpread({}, state.columnInfo), {}, (0,defineProperty/* default */.Z)({}, action.payload.index, {\n          dataType: action.payload.dataType\n        }))\n      });\n    case TableActionTypes.SetData:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload\n      });\n    default:\n      return state;\n  }\n}\nfunction TableProvider(_ref) {\n  var children = _ref.children,\n    data = _ref.data;\n  var initialState = {\n    data: data,\n    hasNestedRows: false\n  };\n  var _useReducer = (0,index_js_.useReducer)(reducer, initialState),\n    _useReducer2 = (0,slicedToArray/* default */.Z)(_useReducer, 2),\n    state = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  (0,index_js_.useEffect)(function () {\n    dispatch({\n      type: TableActionTypes.SetData,\n      payload: data\n    });\n  }, [data]);\n  var contextValue = (0,index_js_.useMemo)(function () {\n    return {\n      state: state,\n      dispatch: dispatch\n    };\n  }, [state, dispatch]);\n  return /*#__PURE__*/index_js_default().createElement(TableContext.Provider, {\n    value: contextValue\n  }, children);\n}\nfunction useTableContext() {\n  return (0,index_js_.useContext)(TableContext);\n}\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/useSSR.ts\n\nfunction useSSR_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction useSSR_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? useSSR_ownKeys(Object(t), !0).forEach(function (r) { (0,defineProperty/* default */.Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : useSSR_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n/**\n * There is a security vulnerability related to https://github.com/alex-cory/use-ssr\n * The only location this package is used is within the Table component, in Row.tsx.\n *\n * TODO: In the long term, we should re-evaluate its usage and whether it\'s needed,\n * and if it is, maintain our own useSSR hook instead within the @leafygreen-ui/hooks package.\n */\n\nvar Device = /*#__PURE__*/function (Device) {\n  Device["Browser"] = "browser";\n  Device["Server"] = "server";\n  Device["Native"] = "native";\n  return Device;\n}({});\nvar Browser = Device.Browser,\n  Server = Device.Server,\n  Native = Device.Native;\nvar canUseDOM = !!(typeof window !== \'undefined\' && window.document && window.document.createElement);\nvar canUseNative = typeof navigator != \'undefined\' && navigator.product == \'ReactNative\';\nvar device = canUseNative ? Native : canUseDOM ? Browser : Server;\nvar SSRObject = {\n  isBrowser: device === Browser,\n  isServer: device === Server,\n  isNative: device === Native,\n  device: device,\n  canUseWorkers: typeof Worker !== \'undefined\',\n  canUseEventListeners: device === Browser && !!window.addEventListener,\n  canUseViewport: device === Browser && !!window.screen\n};\n\n// TODO: instead of this, do a polyfill for `Object.assign` https://www.npmjs.com/package/es6-object-assign\nvar useSSR_assign = function assign() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce(function (acc, obj) {\n    return useSSR_objectSpread(useSSR_objectSpread({}, acc), obj);\n  }, {});\n};\nvar values = function values(obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\nvar toArrayObject = function toArrayObject() {\n  return useSSR_assign((values(SSRObject), SSRObject));\n};\nvar useSSRObject = toArrayObject();\nvar weAreServer = function weAreServer() {\n  SSRObject.isServer = true;\n  useSSRObject = toArrayObject();\n};\nvar useSSR = function useSSR() {\n  return useSSRObject;\n};\n/* harmony default export */ const TableV10_useSSR = (useSSR);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/Row.tsx\n\n\n\n\n\n\nvar Row_excluded = ["expanded", "disabled", "indentLevel", "isAnyAncestorCollapsed", "children", "className"],\n  _excluded2 = ["children"];\nvar Row_templateObject, Row_templateObject2, Row_templateObject3, Row_templateObject4, Row_templateObject5, Row_templateObject6, Row_templateObject7, Row_templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15;\nfunction Row_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction Row_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? Row_ownKeys(Object(t), !0).forEach(function (r) { (0,defineProperty/* default */.Z)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : Row_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Types & Constants\n */\n\nvar Row_transitionTime = 200;\n\n/**\n * Styles\n */\nvar iconButtonMargin = (0,esm.css)(Row_templateObject || (Row_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  margin: -4px;\\n  margin-right: 4px;\\n"])));\nvar iconButtonThemeStyles = (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, lib_dist_esm/* Theme */.Q2.Light, (0,esm.css)(Row_templateObject2 || (Row_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    color: ", ";\\n  "])), palette_dist_esm/* palette */.D.gray.dark1)), lib_dist_esm/* Theme */.Q2.Dark, (0,esm.css)(Row_templateObject3 || (Row_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    color: ", ";\\n  "])), palette_dist_esm/* palette */.D.gray.base));\nvar iconButtonThemeDisabledStyles = (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, lib_dist_esm/* Theme */.Q2.Light, (0,esm.css)(Row_templateObject4 || (Row_templateObject4 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    color: ", ";\\n  "])), palette_dist_esm/* palette */.D.gray.light1)), lib_dist_esm/* Theme */.Q2.Dark, (0,esm.css)(Row_templateObject5 || (Row_templateObject5 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    color: ", ";\\n  "])), palette_dist_esm/* palette */.D.gray.dark1));\n\n/**\n * @deprecated\n */\n\nvar themeStyles = (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, lib_dist_esm/* Theme */.Q2.Light, {\n  rowStyle: (0,esm.css)(Row_templateObject6 || (Row_templateObject6 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      background-color: ", ";\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.white, palette_dist_esm/* palette */.D.gray.dark3),\n  altColor: (0,esm.css)(Row_templateObject7 || (Row_templateObject7 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      &:nth-of-type(even) {\\n        background-color: ", ";\\n      }\\n\\n      &:nth-of-type(odd) > th {\\n        background-color: ", ";\\n      }\\n    "])), palette_dist_esm/* palette */.D.gray.light3, palette_dist_esm/* palette */.D.white),\n  disabledStyle: (0,esm.css)(Row_templateObject8 || (Row_templateObject8 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      background-color: ", ";\\n      color: ", ";\\n      border-top: 1px inset ", ";\\n      border-bottom: 1px inset ", ";\\n    "])), palette_dist_esm/* palette */.D.gray.light2, palette_dist_esm/* palette */.D.gray.base, palette_dist_esm/* palette */.D.gray.light1, palette_dist_esm/* palette */.D.gray.light1)\n}), lib_dist_esm/* Theme */.Q2.Dark, {\n  rowStyle: (0,esm.css)(_templateObject9 || (_templateObject9 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      background-color: ", ";\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.black, palette_dist_esm/* palette */.D.gray.light2),\n  altColor: (0,esm.css)(_templateObject10 || (_templateObject10 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      &:nth-of-type(even) {\\n        background-color: ", ";\\n      }\\n\\n      &:nth-of-type(odd) > th {\\n        background-color: ", ";\\n      }\\n    "])), palette_dist_esm/* palette */.D.gray.dark4, palette_dist_esm/* palette */.D.black),\n  disabledStyle: (0,esm.css)(_templateObject11 || (_templateObject11 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      background-color: ", ";\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.gray.dark2, palette_dist_esm/* palette */.D.gray.base)\n});\nvar rowStyle = (0,esm.css)(_templateObject12 || (_templateObject12 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  --lg-cell-min-height: 20px;\\n  position: relative;\\n  z-index: 1;\\n\\n  & > :is(td, th) > .", " {\\n    min-height: var(--lg-cell-min-height);\\n    max-height: unset;\\n  }\\n"])), tdInnerDivClassName);\nvar hideRow = (0,esm.css)(_templateObject13 || (_templateObject13 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  opacity: 0;\\n"])));\nfunction styleColumn(index, dataType) {\n  var justify;\n  if (dataType === DataType.Number) {\n    justify = \'flex-end\';\n  } else {\n    justify = \'flex-start\';\n  }\n  return (0,esm.css)(_templateObject14 || (_templateObject14 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    & :is(td, th):nth-child(", ") > div {\\n      justify-content: ", ";\\n    }\\n  "])), index, justify);\n}\nfunction getIndentLevelStyle(indentLevel) {\n  var indentLevelMultiplier = 36;\n  return (0,esm.css)(_templateObject15 || (_templateObject15 = (0,taggedTemplateLiteral/* default */.Z)(["\\n    & > :is(td, th):nth-child(1) {\\n      padding-left: ", "px;\\n    }\\n  "])), 8 + indentLevel * indentLevelMultiplier);\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\nvar Row = /*#__PURE__*/(0,index_js_.forwardRef)(function (_ref, ref) {\n  var _ref$expanded = _ref.expanded,\n    expanded = _ref$expanded === void 0 ? false : _ref$expanded,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$indentLevel = _ref.indentLevel,\n    indentLevel = _ref$indentLevel === void 0 ? 0 : _ref$indentLevel,\n    isAnyAncestorCollapsedProp = _ref.isAnyAncestorCollapsed,\n    children = _ref.children,\n    className = _ref.className,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, Row_excluded);\n  var _useSSR = TableV10_useSSR(),\n    isBrowser = _useSSR.isBrowser;\n  var _useTableContext = useTableContext(),\n    _useTableContext$stat = _useTableContext.state,\n    data = _useTableContext$stat.data,\n    columnInfo = _useTableContext$stat.columnInfo,\n    hasNestedRows = _useTableContext$stat.hasNestedRows,\n    hasRowSpan = _useTableContext$stat.hasRowSpan,\n    tableDispatch = _useTableContext.dispatch;\n  var _useDarkMode = (0,dist_esm/* useDarkMode */.vs)(),\n    theme = _useDarkMode.theme,\n    darkMode = _useDarkMode.darkMode;\n  var shouldAltRowColor = data && data.length >= 10 && hasNestedRows != null && !hasNestedRows;\n  var indexRef = (0,index_js_.useRef)((0,hooks_dist_esm/* useIdAllocator */.ue)({\n    prefix: \'row\'\n  }));\n  var _useState = (0,index_js_.useState)(expanded),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    isExpanded = _useState2[0],\n    setIsExpanded = _useState2[1];\n  var nestedRowParentRef = (0,index_js_.useRef)(null);\n  (0,index_js_.useEffect)(function () {\n    var shouldDispatchHasNestedRows = false;\n    var shouldDispatchHasRowSpan = false;\n    if (hasNestedRows && hasRowSpan) {\n      return;\n    }\n    index_js_default().Children.forEach(children, function (child) {\n      if ((0,lib_dist_esm/* isComponentType */.Kf)(child, \'Row\') && !shouldDispatchHasNestedRows && !hasNestedRows) {\n        shouldDispatchHasNestedRows = true;\n      }\n      if ((0,lib_dist_esm/* isComponentType */.Kf)(child, \'Cell\') && child.props.rowSpan && child.props.rowSpan > 1 && !hasRowSpan && !shouldDispatchHasRowSpan) {\n        shouldDispatchHasRowSpan = true;\n      }\n    });\n    if (shouldDispatchHasNestedRows && hasNestedRows !== shouldDispatchHasNestedRows) {\n      tableDispatch({\n        type: TableActionTypes.SetHasNestedRows,\n        payload: true\n      });\n    }\n    if (shouldDispatchHasRowSpan && hasRowSpan !== shouldDispatchHasRowSpan) {\n      tableDispatch({\n        type: TableActionTypes.SetHasRowSpan,\n        payload: true\n      });\n    }\n  }, [children, hasNestedRows, hasRowSpan, tableDispatch, data]);\n\n  // Render any nested rows and their transition group\n  var _useMemo = (0,index_js_.useMemo)(function () {\n      var renderedNestedRows = [];\n      var rowHasNestedRows = index_js_default().Children.toArray(children).some(function (child) {\n        return (0,lib_dist_esm/* isComponentType */.Kf)(child, \'Row\');\n      });\n      var shouldTransitionGroupBeVisible = isExpanded && !isAnyAncestorCollapsedProp;\n\n      // We don\'t need the transition group except on the client here, and rendering this bit on the server breaks rendering these rows.\n      var renderedNestedRowTransitionGroup = isBrowser ? /*#__PURE__*/index_js_default().createElement(Transition/* default */.ZP, {\n        "in": shouldTransitionGroupBeVisible,\n        timeout: {\n          enter: 0,\n          exit: Row_transitionTime\n        },\n        nodeRef: nestedRowParentRef\n      }, function (state) {\n        return index_js_default().Children.map(children, function (child, index) {\n          if (child != null && (0,lib_dist_esm/* isComponentType */.Kf)(child, \'Row\')) {\n            return /*#__PURE__*/index_js_default().createElement(TableV10_NestedRow, (0,esm_extends/* default */.Z)({\n              isAnyAncestorCollapsed: isAnyAncestorCollapsedProp || !isExpanded,\n              indentLevel: indentLevel + 1,\n              key: "".concat(indexRef.current, "-").concat(indentLevel, "-").concat(index),\n              state: state\n            }, child.props));\n          }\n        });\n      }) : renderedNestedRows;\n      return {\n        rowHasNestedRows: rowHasNestedRows,\n        renderedNestedRows: renderedNestedRows,\n        renderedNestedRowTransitionGroup: renderedNestedRowTransitionGroup\n      };\n    }, [children, isExpanded, isAnyAncestorCollapsedProp, isBrowser, indentLevel]),\n    rowHasNestedRows = _useMemo.rowHasNestedRows,\n    renderedNestedRowTransitionGroup = _useMemo.renderedNestedRowTransitionGroup;\n  var renderedChildren = (0,index_js_.useMemo)(function () {\n    var renderedChildren = [];\n    index_js_default().Children.forEach(children, function (child, index) {\n      if ((0,lib_dist_esm/* isComponentType */.Kf)(child, \'Cell\')) {\n        if (child.props.children == null) {\n          return null;\n        }\n        renderedChildren.push( /*#__PURE__*/index_js_default().cloneElement(child, Row_objectSpread({\n          children: /*#__PURE__*/index_js_default().createElement("span", null, child.props.children),\n          key: "".concat(indexRef.current, "-").concat(index),\n          isDisabled: disabled,\n          isHeader: child.props.isHeader\n        }, child.props)));\n      }\n    });\n    if (rowHasNestedRows) {\n      var Icon = isExpanded ? ChevronDown/* default */.Z : ChevronRight/* default */.Z;\n      var chevronButton = /*#__PURE__*/index_js_default().createElement(icon_button_dist_esm/* default */.Z, {\n        onClick: function onClick() {\n          return setIsExpanded(function (curr) {\n            return !curr;\n          });\n        },\n        "aria-label": isExpanded ? \'Collapse row\' : \'Expand row\',\n        "aria-expanded": isExpanded,\n        className: (0,esm.cx)(iconButtonMargin, iconButtonThemeStyles[theme], (0,defineProperty/* default */.Z)({}, iconButtonThemeDisabledStyles[theme], disabled)),\n        darkMode: darkMode\n      }, /*#__PURE__*/index_js_default().createElement(Icon, {\n        "aria-hidden": true\n      }));\n      var _renderedChildren$0$p = renderedChildren[0].props,\n        firstChildChildren = _renderedChildren$0$p.children,\n        firstChildProps = (0,objectWithoutProperties/* default */.Z)(_renderedChildren$0$p, _excluded2);\n      renderedChildren[0] = /*#__PURE__*/index_js_default().cloneElement(renderedChildren[0], Row_objectSpread({\n        children: /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, chevronButton, /*#__PURE__*/index_js_default().createElement("span", null, firstChildChildren)),\n        key: "".concat(indexRef.current, "-").concat(renderedChildren[0].props.children)\n      }, firstChildProps));\n    }\n    return renderedChildren;\n  }, [children, rowHasNestedRows, disabled, isExpanded, theme, darkMode]);\n  var alignmentStyles = columnInfo ? Object.entries(columnInfo).map(function (_ref2) {\n    var _ref3 = (0,slicedToArray/* default */.Z)(_ref2, 2),\n      key = _ref3[0],\n      dataType = _ref3[1].dataType;\n    return styleColumn(key, dataType);\n  }) : [\'\'];\n  var rowClassName = (0,esm.cx)(rowStyle, themeStyles[theme].rowStyle, getIndentLevelStyle(indentLevel), (0,toConsumableArray/* default */.Z)(alignmentStyles), (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, hideRow, !columnInfo), themeStyles[theme].altColor, shouldAltRowColor), themeStyles[theme].disabledStyle, disabled), className);\n  return /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, null, /*#__PURE__*/index_js_default().createElement("tr", (0,esm_extends/* default */.Z)({\n    role: "row",\n    className: rowClassName,\n    "aria-disabled": disabled,\n    ref: ref,\n    key: indexRef.current\n  }, rest), renderedChildren), renderedNestedRowTransitionGroup);\n});\nRow.displayName = \'Row\';\n/* harmony default export */ const TableV10_Row = (Row);\n// EXTERNAL MODULE: ./node_modules/lodash/debounce.js\nvar debounce = __webpack_require__("./node_modules/lodash/debounce.js");\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);\n// EXTERNAL MODULE: ./node_modules/polished/dist/polished.esm.js\nvar polished_esm = __webpack_require__("./node_modules/polished/dist/polished.esm.js");\n// EXTERNAL MODULE: ./packages/tokens/dist/esm/index.js\nvar tokens_dist_esm = __webpack_require__("./packages/tokens/dist/esm/index.js");\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/SortContext.tsx\n\n\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\n\nvar SortContext = /*#__PURE__*/(0,index_js_.createContext)({\n  sort: undefined,\n  setSort: function setSort() {}\n});\nfunction SortProvider(_ref) {\n  var children = _ref.children;\n  var _useState = (0,index_js_.useState)(undefined),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    sort = _useState2[0],\n    setSort = _useState2[1];\n  var contextValue = (0,index_js_.useMemo)(function () {\n    return {\n      sort: sort,\n      setSort: setSort\n    };\n  }, [sort, setSort]);\n  return /*#__PURE__*/index_js_default().createElement(SortContext.Provider, {\n    value: contextValue\n  }, children);\n}\nfunction useSortContext() {\n  return (0,index_js_.useContext)(SortContext);\n}\nvar alphanumericCollator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: \'base\'\n});\nvar getDataComparisonFunction = function getDataComparisonFunction(_ref2) {\n  var direction = _ref2.direction,\n    accessorValue = _ref2.accessorValue,\n    compareFn = _ref2.compareFn;\n  if (accessorValue) {\n    return function (a, b) {\n      var aVal = accessorValue(a);\n      var bVal = accessorValue(b);\n      if (direction !== \'desc\') {\n        return alphanumericCollator.compare(aVal, bVal);\n      }\n      return alphanumericCollator.compare(bVal, aVal);\n    };\n  }\n  if (compareFn) {\n    return function (a, b) {\n      return compareFn(a, b, direction);\n    };\n  }\n  console.error(\'Error getting Table data comparison function. Please supply either an `accessorValue` or `compareFn`\');\n};\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/TableBody.tsx\n\n\n\n\n\n/**\n * @deprecated\n */\n\n/**\n * Hook that avoids re-rendering children when the data used to\n * render them hasn\'t changed, even if their ordering has changed.\n */\nfunction useRenderedChildren(data, renderFunction, compareFn) {\n  var resultMap = (0,index_js_.useMemo)(function () {\n    var resultMap = new Map();\n    data.forEach(function (datum, index) {\n      return resultMap.set(datum, /*#__PURE__*/index_js_default().createElement((index_js_default()).Fragment, {\n        key: index\n      }, renderFunction({\n        datum: datum,\n        index: index\n      })));\n    });\n    return resultMap;\n  }, [data, renderFunction]);\n  return (0,index_js_.useMemo)(function () {\n    if (!compareFn) {\n      return Array.from(resultMap.values());\n    }\n    return (0,toConsumableArray/* default */.Z)(data).sort(compareFn).map(function (datum) {\n      return resultMap.get(datum);\n    });\n  }, [data, resultMap, compareFn]);\n}\n\n/**\n * @deprecated\n */\nfunction TableBody(_ref) {\n  var children = _ref.children;\n  var _useTableContext = useTableContext(),\n    data = _useTableContext.state.data;\n  var _useSortContext = useSortContext(),\n    sort = _useSortContext.sort;\n  var compareFn = (0,index_js_.useMemo)(function () {\n    if (sort) {\n      var direction = sort.direction,\n        accessorValue = sort.accessorValue,\n        _compareFn = sort.compareFn;\n      if (_compareFn) {\n        return getDataComparisonFunction({\n          direction: direction,\n          compareFn: _compareFn\n        });\n      }\n      if (accessorValue) {\n        return getDataComparisonFunction({\n          direction: direction,\n          accessorValue: accessorValue\n        });\n      }\n    }\n  }, [sort]);\n  var renderFunction = (0,index_js_.useCallback)(function (_ref2) {\n    var datum = _ref2.datum,\n      index = _ref2.index;\n    return children({\n      datum: datum,\n      index: index\n    });\n  }, [children]);\n  var rows = useRenderedChildren(data, renderFunction, compareFn);\n  return /*#__PURE__*/index_js_default().createElement("tbody", null, rows);\n}\nTableBody.displayName = \'TableBody\';\n/* harmony default export */ const TableV10_TableBody = (TableBody);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/TableHead.tsx\n\n\n\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n */\nfunction TableHead(_ref) {\n  var _ref$columns = _ref.columns,\n    columns = _ref$columns === void 0 ? [] : _ref$columns;\n  var usingHeaderRow = index_js_default().useRef(false);\n  function createCols(array) {\n    return array.map(function (child, index) {\n      var tableHeaderCommonProps = {\n        key: index,\n        index: index\n      };\n      if ((0,lib_dist_esm/* isComponentType */.Kf)(child, \'HeaderRow\')) {\n        usingHeaderRow.current = true;\n\n        // FIXME:\n        // eslint-disable-next-line no-unsafe-optional-chaining\n        var _child$props = child === null || child === void 0 ? void 0 : child.props,\n          children = _child$props.children;\n        return /*#__PURE__*/index_js_default().cloneElement(child, {\n          children: createCols(index_js_default().Children.toArray(children))\n        });\n      }\n      if ((0,lib_dist_esm/* isComponentType */.Kf)(child, \'TableHeader\')) {\n        return /*#__PURE__*/index_js_default().cloneElement(child, tableHeaderCommonProps);\n      }\n      return child;\n    });\n  }\n  var columnArray =\n  // @ts-expect-error Property \'type\' does not exist on type \'{}\'.ts(2339)\n  columns.type === (index_js_default()).Fragment || (0,lib_dist_esm/* isComponentType */.Kf)(columns, \'HeaderRow\') ? index_js_default().Children.toArray(columns.props.children) : columns;\n  var cols = createCols(columnArray);\n  if (usingHeaderRow.current) {\n    return /*#__PURE__*/index_js_default().createElement("thead", null, cols);\n  }\n  return /*#__PURE__*/index_js_default().createElement("thead", null, /*#__PURE__*/index_js_default().createElement(TableV10_HeaderRow, null, cols));\n}\n/* harmony default export */ const TableV10_TableHead = (TableHead);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/Table.tsx\n\n\n\n\n\nvar Table_excluded = ["columns", "data", "children", "className", "baseFontSize", "darkMode"];\nvar Table_templateObject, Table_templateObject2, Table_templateObject3, Table_templateObject4, Table_templateObject5, Table_templateObject6, Table_templateObject7;\n\n\n\n\n\n\n\n\n\n\n\n\nvar lmShadowColor = (0,polished_esm/* transparentize */.DZ)(0.7, palette_dist_esm/* palette */.D.black);\nvar dmShadowColor = (0,polished_esm/* transparentize */.DZ)(0.3, \'black\');\nvar containerStyle = (0,esm.css)(Table_templateObject || (Table_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: relative;\\n  max-width: 100%;\\n"])));\nvar tableStyles = (0,esm.css)(Table_templateObject2 || (Table_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  font-family: ", ";\\n  position: relative;\\n  border-collapse: collapse;\\n  box-sizing: border-box;\\n  width: 100%;\\n  z-index: 0;\\n"])), tokens_dist_esm/* fontFamilies */.Vl["default"]);\nvar shadow = (0,esm.css)(Table_templateObject3 || (Table_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  width: 16px;\\n  overflow: hidden;\\n  pointer-events: none;\\n\\n  &:after {\\n    opacity: 0;\\n    content: \'\';\\n    position: absolute;\\n    top: 0;\\n    bottom: 0;\\n    width: 16px;\\n    border-radius: 100%;\\n    transition: opacity ", "ms ease-in-out;\\n  }\\n"])), tokens_dist_esm/* transitionDuration */.nV["default"]);\nvar leftShadow = function leftShadow(darkMode) {\n  return (0,esm.css)(Table_templateObject4 || (Table_templateObject4 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  left: 0;\\n\\n  &:after {\\n    right: 100%;\\n    box-shadow: ", "; //TODO: Bug: currently the full height of the shadow is not showing unless the background color is removed from <tr>\\n  }\\n"])), darkMode ? \'4px 0 9px 5px \' + dmShadowColor : \'4px 0 4px \' + lmShadowColor);\n};\nvar rightShadow = function rightShadow(darkMode) {\n  return (0,esm.css)(Table_templateObject5 || (Table_templateObject5 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  right: 0;\\n\\n  &:after {\\n    left: 100%;\\n    box-shadow: ", ";\\n  }\\n"])), darkMode ? \'-4px 0 9px 5px \' + dmShadowColor : \'-4px 0 4px \' + lmShadowColor);\n};\nvar showScroll = (0,esm.css)(Table_templateObject6 || (Table_templateObject6 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  &:after {\\n    opacity: 1;\\n  }\\n"])));\nvar ScrollState = {\n  None: \'none\',\n  Left: \'left\',\n  Right: \'right\',\n  Both: \'both\'\n};\n\n/**\n * @deprecated\n */\n\n/**\n * @deprecated\n * @noDocgen\n */\n\n/**\n * @deprecated\n * @noDocgen\n */\nfunction Table(_ref) {\n  var _ref$columns = _ref.columns,\n    columns = _ref$columns === void 0 ? [] : _ref$columns,\n    _ref$data = _ref.data,\n    dataProp = _ref$data === void 0 ? [] : _ref$data,\n    children = _ref.children,\n    className = _ref.className,\n    baseFontSize = _ref.baseFontSize,\n    darkModeProp = _ref.darkMode,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, Table_excluded);\n  var _React$useState = index_js_default().useState(ScrollState.None),\n    _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),\n    scrollState = _React$useState2[0],\n    setScrollState = _React$useState2[1];\n  var divRef = index_js_default().useRef(null);\n  var viewportSize = (0,hooks_dist_esm/* useViewportSize */.nP)();\n  var _useDarkMode = (0,dist_esm/* useDarkMode */.vs)(darkModeProp),\n    darkMode = _useDarkMode.darkMode;\n  (0,hooks_dist_esm/* useIsomorphicLayoutEffect */.LI)(function () {\n    var divNode = divRef.current;\n    if (divNode == null) {\n      return;\n    }\n    if (divNode.scrollWidth > divNode.clientWidth) {\n      setScrollState(ScrollState.Right);\n    } else if (viewportSize != null && divNode.getBoundingClientRect().width <= viewportSize.width) {\n      setScrollState(ScrollState.None);\n    }\n  }, [viewportSize]);\n  var handleScroll = function handleScroll(e) {\n    var _ref2 = e.target,\n      scrollWidth = _ref2.scrollWidth,\n      elementWidth = _ref2.clientWidth;\n    var isScrollable = scrollWidth > elementWidth;\n    if (isScrollable) {\n      var scrollPosition = e.target.scrollLeft;\n      var maxPosition = scrollWidth - elementWidth;\n      if (scrollPosition > 0 && scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Both);\n      } else if (scrollPosition > 0) {\n        setScrollState(ScrollState.Left);\n      } else if (scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Right);\n      }\n    }\n  };\n  var debounceScroll = debounce_default()(handleScroll, 50, {\n    leading: true\n  });\n  var onScroll = function onScroll(e) {\n    e.persist();\n    debounceScroll(e);\n  };\n  var showLeft = scrollState === ScrollState.Left || scrollState === ScrollState.Both;\n  var showRight = scrollState === ScrollState.Right || scrollState === ScrollState.Both;\n  return /*#__PURE__*/index_js_default().createElement("div", {\n    className: containerStyle\n  }, /*#__PURE__*/index_js_default().createElement("div", {\n    className: (0,esm.cx)(shadow, leftShadow(darkMode), (0,defineProperty/* default */.Z)({}, showScroll, showLeft))\n  }), /*#__PURE__*/index_js_default().createElement("div", {\n    className: (0,esm.cx)(shadow, rightShadow(darkMode), (0,defineProperty/* default */.Z)({}, showScroll, showRight))\n  }), /*#__PURE__*/index_js_default().createElement("div", {\n    ref: divRef,\n    onScroll: onScroll,\n    className: (0,esm.cx)((0,esm.css)(Table_templateObject7 || (Table_templateObject7 = (0,taggedTemplateLiteral/* default */.Z)(["\\n            overflow-x: auto;\\n          "]))))\n  }, /*#__PURE__*/index_js_default().createElement("table", (0,esm_extends/* default */.Z)({\n    cellSpacing: "0",\n    cellPadding: "0",\n    className: (0,esm.cx)(tableStyles, className)\n  }, rest), /*#__PURE__*/index_js_default().createElement(TableProvider, {\n    data: dataProp\n  }, /*#__PURE__*/index_js_default().createElement(SortProvider, null, /*#__PURE__*/index_js_default().createElement(dist_esm/* default */.ZP, {\n    darkMode: darkMode,\n    baseFontSize: baseFontSize\n  }, /*#__PURE__*/index_js_default().createElement(TableV10_TableHead, {\n    columns: columns\n  }), /*#__PURE__*/index_js_default().createElement(TableV10_TableBody, null, children)))))));\n}\nTable.displayName = \'Table\';\n//  TODO: missing proptypes\n// EXTERNAL MODULE: ./packages/icon/src/glyphCommon.ts\nvar glyphCommon = __webpack_require__("./packages/icon/src/glyphCommon.ts");\n;// CONCATENATED MODULE: ./packages/icon/src/generated/SortAscending.tsx\n\n\n\n\nvar SortAscending_templateObject, SortAscending_templateObject2;\nvar SortAscending_excluded = ["className", "size", "title", "aria-label", "aria-labelledby", "fill", "role"];\n/**\n* This is a generated file. Do not modify it manually.\n*\n* @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts\n* @checksum 6a27b4a7ab458bd4f79c305573e132a7\n*/\n\n\n\n\nvar SortAscending = function SortAscending(_ref) {\n  var className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 16 : _ref$size,\n    title = _ref.title,\n    ariaLabel = _ref[\'aria-label\'],\n    ariaLabelledby = _ref[\'aria-labelledby\'],\n    fill = _ref.fill,\n    _ref$role = _ref.role,\n    role = _ref$role === void 0 ? \'img\' : _ref$role,\n    props = (0,objectWithoutProperties/* default */.Z)(_ref, SortAscending_excluded);\n  var fillStyle = (0,esm.css)(SortAscending_templateObject || (SortAscending_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n        color: ", ";\\n      "])), fill);\n  var noFlexShrink = (0,esm.css)(SortAscending_templateObject2 || (SortAscending_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n        flex-shrink: 0;\\n      "])));\n  var accessibleProps = (0,glyphCommon/* generateAccessibleProps */.W8)(role, \'SortAscending\', (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({\n    title: title\n  }, \'aria-label\', ariaLabel), \'aria-labelledby\', ariaLabelledby));\n  return /*#__PURE__*/index_js_.createElement("svg", (0,esm_extends/* default */.Z)({\n    className: (0,esm.cx)((0,defineProperty/* default */.Z)({}, fillStyle, fill != null), noFlexShrink, className),\n    height: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    width: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    role: role\n  }, accessibleProps, props, {\n    viewBox: "0 0 16 16"\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M4.44991 1.14265C4.23029 0.95245 3.90429 0.952449 3.68466 1.14265L1.20302 3.29182C0.793944 3.64609 1.04449 4.31811 1.58564 4.31811H2.89835V13.6696C2.89835 14.3152 3.4217 14.8386 4.06729 14.8386C4.71287 14.8386 5.23623 14.3152 5.23623 13.6696V4.31811H6.54893C7.09009 4.31811 7.34063 3.64609 6.93156 3.29182L4.44991 1.14265Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 5C7.44772 5 7 5.44772 7 6C7 6.55228 7.44772 7 8 7H14C14.5523 7 15 6.55228 15 6C15 5.44772 14.5523 5 14 5H8Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M7 9C7 8.44772 7.44772 8 8 8H12C12.5523 8 13 8.44772 13 9C13 9.55229 12.5523 10 12 10H8C7.44772 10 7 9.55229 7 9Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 11C7.44772 11 7 11.4477 7 12C7 12.5523 7.44772 13 8 13H10C10.5523 13 11 12.5523 11 12C11 11.4477 10.5523 11 10 11H8Z",\n    fill: \'currentColor\'\n  }));\n};\nSortAscending.displayName = \'SortAscending\';\nSortAscending.isGlyph = true;\nSortAscending.propTypes =  false ? 0 : {};\n/* harmony default export */ const generated_SortAscending = (SortAscending);\n;// CONCATENATED MODULE: ./packages/icon/src/generated/SortDescending.tsx\n\n\n\n\nvar SortDescending_templateObject, SortDescending_templateObject2;\nvar SortDescending_excluded = ["className", "size", "title", "aria-label", "aria-labelledby", "fill", "role"];\n/**\n* This is a generated file. Do not modify it manually.\n*\n* @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts\n* @checksum 63551eeeda961faec25cbdac568f012e\n*/\n\n\n\n\nvar SortDescending = function SortDescending(_ref) {\n  var className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 16 : _ref$size,\n    title = _ref.title,\n    ariaLabel = _ref[\'aria-label\'],\n    ariaLabelledby = _ref[\'aria-labelledby\'],\n    fill = _ref.fill,\n    _ref$role = _ref.role,\n    role = _ref$role === void 0 ? \'img\' : _ref$role,\n    props = (0,objectWithoutProperties/* default */.Z)(_ref, SortDescending_excluded);\n  var fillStyle = (0,esm.css)(SortDescending_templateObject || (SortDescending_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n        color: ", ";\\n      "])), fill);\n  var noFlexShrink = (0,esm.css)(SortDescending_templateObject2 || (SortDescending_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n        flex-shrink: 0;\\n      "])));\n  var accessibleProps = (0,glyphCommon/* generateAccessibleProps */.W8)(role, \'SortDescending\', (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({\n    title: title\n  }, \'aria-label\', ariaLabel), \'aria-labelledby\', ariaLabelledby));\n  return /*#__PURE__*/index_js_.createElement("svg", (0,esm_extends/* default */.Z)({\n    className: (0,esm.cx)((0,defineProperty/* default */.Z)({}, fillStyle, fill != null), noFlexShrink, className),\n    height: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    width: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    role: role\n  }, accessibleProps, props, {\n    viewBox: "0 0 16 16"\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M4.44991 14.6959C4.23029 14.8861 3.90429 14.8861 3.68466 14.6959L1.20302 12.5467C0.793944 12.1925 1.04449 11.5205 1.58564 11.5205H2.89835V2.16894C2.89835 1.52335 3.4217 1 4.06729 1C4.71287 1 5.23623 1.52335 5.23623 2.16894V11.5205H6.54893C7.09009 11.5205 7.34063 12.1925 6.93156 12.5467L4.44991 14.6959Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 3C7.44772 3 7 3.44772 7 4C7 4.55229 7.44772 5 8 5H14C14.5523 5 15 4.55229 15 4C15 3.44772 14.5523 3 14 3H8Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M7 7C7 6.44772 7.44772 6 8 6H12C12.5523 6 13 6.44772 13 7C13 7.55229 12.5523 8 12 8H8C7.44772 8 7 7.55229 7 7Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 9C7.44772 9 7 9.44771 7 10C7 10.5523 7.44772 11 8 11H10C10.5523 11 11 10.5523 11 10C11 9.44771 10.5523 9 10 9H8Z",\n    fill: \'currentColor\'\n  }));\n};\nSortDescending.displayName = \'SortDescending\';\nSortDescending.isGlyph = true;\nSortDescending.propTypes =  false ? 0 : {};\n/* harmony default export */ const generated_SortDescending = (SortDescending);\n;// CONCATENATED MODULE: ./packages/icon/src/generated/Unsorted.tsx\n\n\n\n\nvar Unsorted_templateObject, Unsorted_templateObject2;\nvar Unsorted_excluded = ["className", "size", "title", "aria-label", "aria-labelledby", "fill", "role"];\n/**\n* This is a generated file. Do not modify it manually.\n*\n* @script ./node_modules/.bin/ts-node packages/icon/scripts/build.ts\n* @checksum 537ae9759ea664c6f49c61039923fb08\n*/\n\n\n\n\nvar Unsorted = function Unsorted(_ref) {\n  var className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 16 : _ref$size,\n    title = _ref.title,\n    ariaLabel = _ref[\'aria-label\'],\n    ariaLabelledby = _ref[\'aria-labelledby\'],\n    fill = _ref.fill,\n    _ref$role = _ref.role,\n    role = _ref$role === void 0 ? \'img\' : _ref$role,\n    props = (0,objectWithoutProperties/* default */.Z)(_ref, Unsorted_excluded);\n  var fillStyle = (0,esm.css)(Unsorted_templateObject || (Unsorted_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n        color: ", ";\\n      "])), fill);\n  var noFlexShrink = (0,esm.css)(Unsorted_templateObject2 || (Unsorted_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n        flex-shrink: 0;\\n      "])));\n  var accessibleProps = (0,glyphCommon/* generateAccessibleProps */.W8)(role, \'Unsorted\', (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({\n    title: title\n  }, \'aria-label\', ariaLabel), \'aria-labelledby\', ariaLabelledby));\n  return /*#__PURE__*/index_js_.createElement("svg", (0,esm_extends/* default */.Z)({\n    className: (0,esm.cx)((0,defineProperty/* default */.Z)({}, fillStyle, fill != null), noFlexShrink, className),\n    height: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    width: typeof size === \'number\' ? size : glyphCommon/* sizeMap */.dG[size],\n    role: role\n  }, accessibleProps, props, {\n    viewBox: "0 0 16 16"\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M3.68466 1.14265C3.90429 0.952449 4.23028 0.95245 4.44991 1.14265L6.93156 3.29182C7.34063 3.64609 7.09009 4.31811 6.54893 4.31811H5.23624L5.23624 11.6819H6.54894C7.09009 11.6819 7.34064 12.3539 6.93157 12.7082L4.44992 14.8573C4.23029 15.0476 3.9043 15.0476 3.68467 14.8573L1.20303 12.7082C0.793953 12.3539 1.0445 11.6819 1.58565 11.6819H2.89836V11.6742L2.89835 11.6696L2.89835 4.31811H1.58564C1.04449 4.31811 0.793944 3.64609 1.20302 3.29182L3.68466 1.14265Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 8C8 7.44772 8.44772 7 9 7H14C14.5523 7 15 7.44772 15 8C15 8.55228 14.5523 9 14 9H9C8.44772 9 8 8.55228 8 8Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M9 4C8.44772 4 8 4.44772 8 5C8 5.55228 8.44772 6 9 6H14C14.5523 6 15 5.55228 15 5C15 4.44772 14.5523 4 14 4H9Z",\n    fill: \'currentColor\'\n  }), /*#__PURE__*/index_js_.createElement("path", {\n    d: "M8 11C8 10.4477 8.44772 10 9 10H14C14.5523 10 15 10.4477 15 11C15 11.5523 14.5523 12 14 12H9C8.44772 12 8 11.5523 8 11Z",\n    fill: \'currentColor\'\n  }));\n};\nUnsorted.displayName = \'Unsorted\';\nUnsorted.isGlyph = true;\nUnsorted.propTypes =  false ? 0 : {};\n/* harmony default export */ const generated_Unsorted = (Unsorted);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/TableHeader.tsx\n\n\n\n\nvar TableHeader_excluded = ["label", "onClick", "index", "className", "dataType", "sortBy", "compareFn", "handleSort"];\nvar TableHeader_templateObject, TableHeader_templateObject2, TableHeader_templateObject3, TableHeader_templateObject4, TableHeader_templateObject5, TableHeader_templateObject6, TableHeader_templateObject7, TableHeader_templateObject8, TableHeader_templateObject9, TableHeader_templateObject10;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TableHeader_themeStyles = (0,defineProperty/* default */.Z)((0,defineProperty/* default */.Z)({}, lib_dist_esm/* Theme */.Q2.Light, {\n  thStyle: (0,esm.css)(TableHeader_templateObject || (TableHeader_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n      border-color: ", ";\\n    "])), palette_dist_esm/* palette */.D.gray.light2),\n  labelStyle: (0,esm.css)(TableHeader_templateObject2 || (TableHeader_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.gray.dark3),\n  glyphColor: (0,esm.css)(TableHeader_templateObject3 || (TableHeader_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.blue.base)\n}), lib_dist_esm/* Theme */.Q2.Dark, {\n  thStyle: (0,esm.css)(TableHeader_templateObject4 || (TableHeader_templateObject4 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      background-color: ", ";\\n      border-color: ", ";\\n    "])), palette_dist_esm/* palette */.D.black, palette_dist_esm/* palette */.D.gray.dark2),\n  labelStyle: (0,esm.css)(TableHeader_templateObject5 || (TableHeader_templateObject5 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.gray.light2),\n  glyphColor: (0,esm.css)(TableHeader_templateObject6 || (TableHeader_templateObject6 = (0,taggedTemplateLiteral/* default */.Z)(["\\n      color: ", ";\\n    "])), palette_dist_esm/* palette */.D.blue.light1)\n});\nvar thStyle = (0,esm.css)(TableHeader_templateObject7 || (TableHeader_templateObject7 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  border-bottom: 3px solid;\\n"])));\nvar flexDisplay = (0,esm.css)(TableHeader_templateObject8 || (TableHeader_templateObject8 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n"])));\nvar labelStyle = (0,esm.css)(TableHeader_templateObject9 || (TableHeader_templateObject9 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  padding-right: 4px;\\n"])));\nvar TableHeader_iconButtonMargin = (0,esm.css)(TableHeader_templateObject10 || (TableHeader_templateObject10 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  margin: -4px 0;\\n"])));\nvar glyphMap = {\n  unsorted: generated_Unsorted,\n  asc: generated_SortDescending,\n  desc: generated_SortAscending\n};\nfunction normalizeAccessor(accessor) {\n  var accessorFn = accessor;\n  if (typeof accessor === \'string\') {\n    if (accessor.includes(\'.\')) {\n      var accessorArr = accessor.split(\'.\');\n      accessorFn = function accessorFn(data) {\n        return accessorArr.reduce(function (obj, access) {\n          return obj[access];\n        }, data);\n      };\n    } else {\n      accessorFn = function accessorFn(data) {\n        return data[accessor];\n      };\n    }\n  }\n  return accessorFn;\n}\n\n/**\n * @deprecated\n * @noDocgen\n */\n\n/**\n * @deprecated\n * @noDocgen\n */\nfunction TableHeader(_ref) {\n  var label = _ref.label,\n    onClick = _ref.onClick,\n    index = _ref.index,\n    className = _ref.className,\n    dataType = _ref.dataType,\n    sortBy = _ref.sortBy,\n    compareFn = _ref.compareFn,\n    handleSort = _ref.handleSort,\n    rest = (0,objectWithoutProperties/* default */.Z)(_ref, TableHeader_excluded);\n  var _useTableContext = useTableContext(),\n    dispatch = _useTableContext.dispatch;\n  var _useSortContext = useSortContext(),\n    sort = _useSortContext.sort,\n    setSort = _useSortContext.setSort;\n  var baseFontSize = (0,typography_dist_esm/* useUpdatedBaseFontSize */.hN)();\n  var _useDarkMode = (0,dist_esm/* useDarkMode */.vs)(),\n    theme = _useDarkMode.theme,\n    darkMode = _useDarkMode.darkMode;\n  index_js_default().useEffect(function () {\n    if (typeof index === \'number\') {\n      dispatch({\n        type: TableActionTypes.RegisterColumn,\n        payload: {\n          // Offsetting 0-index\n          index: index + 1,\n          dataType: dataType\n        }\n      });\n    }\n  }, [index, dataType, dispatch]);\n  var normalizedAccessor = sortBy && normalizeAccessor(sortBy);\n  var isSortable = !!(sortBy || compareFn || handleSort);\n  var sortDirection = sort && sort.columnId === index ? sort.direction : null;\n  var glyph = sortDirection !== null && sortDirection !== void 0 ? sortDirection : \'unsorted\';\n  var Glyph = glyphMap[glyph];\n  var sortRows = function sortRows() {\n    if (typeof index === \'number\' && isSortable) {\n      var newDirection = index === (sort === null || sort === void 0 ? void 0 : sort.columnId) ? sort.direction === \'asc\' ? \'desc\' : \'asc\' : \'desc\';\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      setSort(function (prevSort) {\n        return {\n          columnId: index,\n          direction: newDirection,\n          accessorValue: normalizedAccessor || undefined,\n          compareFn: compareFn\n        };\n      });\n      handleSort === null || handleSort === void 0 ? void 0 : handleSort(newDirection);\n    }\n  };\n  var ariaSort;\n  switch (sortDirection) {\n    case \'asc\':\n      ariaSort = \'ascending\';\n      break;\n    case \'desc\':\n      ariaSort = \'descending\';\n      break;\n    case null:\n      ariaSort = \'none\';\n      break;\n    default:\n      (0,lib_dist_esm/* enforceExhaustive */.yn)(sortDirection);\n  }\n  return /*#__PURE__*/index_js_default().createElement("th", (0,esm_extends/* default */.Z)({\n    role: "columnheader",\n    scope: "col",\n    "aria-sort": ariaSort\n  }, rest, {\n    className: (0,esm.cx)(getCommonCellStyles(baseFontSize), thStyle, TableHeader_themeStyles[theme].thStyle, className)\n  }), /*#__PURE__*/index_js_default().createElement("div", {\n    className: flexDisplay\n  }, /*#__PURE__*/index_js_default().createElement("span", {\n    className: (0,esm.cx)(labelStyle, TableHeader_themeStyles[theme].labelStyle)\n  }, label), isSortable && /*#__PURE__*/index_js_default().createElement(icon_button_dist_esm/* default */.Z, {\n    className: TableHeader_iconButtonMargin,\n    "aria-label": "sort",\n    onClick: sortRows,\n    darkMode: darkMode\n  }, /*#__PURE__*/index_js_default().createElement(Glyph, {\n    size: "small",\n    title: "".concat(glyph, "-").concat(index),\n    className: (0,esm.cx)((0,defineProperty/* default */.Z)({}, TableHeader_themeStyles[theme].glyphColor, glyph === \'asc\' || glyph === \'desc\'))\n  }))));\n}\nTableHeader.displayName = \'TableHeader\';\n/* harmony default export */ const TableV10_TableHeader = (TableHeader);\n;// CONCATENATED MODULE: ./packages/table/src/TableV10/index.ts\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/table/src/TableV10/index.ts\n')}}]);