"use strict";(self.webpackChunkleafygreen_ui=self.webpackChunkleafygreen_ui||[]).push([[5121,8526],{"./packages/popover/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Vc: () => (/* binding */ at),\n/* harmony export */   WD: () => (/* binding */ V),\n/* harmony export */   ZP: () => (/* binding */ ct),\n/* harmony export */   kW: () => (/* binding */ lt),\n/* harmony export */   xM: () => (/* binding */ R)\n/* harmony export */ });\n/* unused harmony export Popover */\n/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./node_modules/@babel/runtime/helpers/esm/typeof.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_transition_group__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./node_modules/react-transition-group/esm/Transition.js");\n/* harmony import */ var _leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/emotion/dist/esm/index.js");\n/* harmony import */ var _leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/hooks/dist/esm/index.js");\n/* harmony import */ var _leafygreen_ui_leafygreen_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/leafygreen-provider/dist/esm/index.js");\n/* harmony import */ var _leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./packages/lib/dist/esm/index.js");\n/* harmony import */ var _leafygreen_ui_portal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./packages/portal/dist/esm/index.js");\n/* harmony import */ var _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./packages/tokens/dist/esm/index.js");\n\n\n\n\n\n\n\n\n\n\nfunction E(t, e) {\n  (null == e || e > t.length) && (e = t.length);\n  for (var n = 0, r = Array(e); n < e; n++) r[n] = t[n];\n  return r;\n}\nfunction b(t, e, n) {\n  return (e = function (t) {\n    var e = function (t, e) {\n      if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(t) || !t) return t;\n      var n = t[Symbol.toPrimitive];\n      if (void 0 !== n) {\n        var r = n.call(t, e);\n        if ("object" != (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(r)) return r;\n        throw new TypeError("@@toPrimitive must return a primitive value.");\n      }\n      return String(t);\n    }(t, "string");\n    return "symbol" == (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(e) ? e : e + "";\n  }(e)) in t ? Object.defineProperty(t, e, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : t[e] = n, t;\n}\nfunction P() {\n  return P = Object.assign ? Object.assign.bind() : function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n      for (var r in n) ({}).hasOwnProperty.call(n, r) && (t[r] = n[r]);\n    }\n    return t;\n  }, P.apply(null, arguments);\n}\nfunction j(t, e) {\n  var n = Object.keys(t);\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(t);\n    e && (r = r.filter(function (e) {\n      return Object.getOwnPropertyDescriptor(t, e).enumerable;\n    })), n.push.apply(n, r);\n  }\n  return n;\n}\nfunction O(t) {\n  for (var e = 1; e < arguments.length; e++) {\n    var n = null != arguments[e] ? arguments[e] : {};\n    e % 2 ? j(Object(n), !0).forEach(function (e) {\n      b(t, e, n[e]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : j(Object(n)).forEach(function (e) {\n      Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));\n    });\n  }\n  return t;\n}\nfunction C(t, e) {\n  if (null == t) return {};\n  var n,\n    r,\n    o = function (t, e) {\n      if (null == t) return {};\n      var n = {};\n      for (var r in t) if ({}.hasOwnProperty.call(t, r)) {\n        if (e.indexOf(r) >= 0) continue;\n        n[r] = t[r];\n      }\n      return n;\n    }(t, e);\n  if (Object.getOwnPropertySymbols) {\n    var i = Object.getOwnPropertySymbols(t);\n    for (r = 0; r < i.length; r++) n = i[r], e.indexOf(n) >= 0 || {}.propertyIsEnumerable.call(t, n) && (o[n] = t[n]);\n  }\n  return o;\n}\nfunction x(t, e) {\n  return function (t) {\n    if (Array.isArray(t)) return t;\n  }(t) || function (t, e) {\n    var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];\n    if (null != n) {\n      var r,\n        o,\n        i,\n        a,\n        c = [],\n        l = !0,\n        s = !1;\n      try {\n        if (i = (n = n.call(t)).next, 0 === e) ;else for (; !(l = (r = i.call(n)).done) && (c.push(r.value), c.length !== e); l = !0);\n      } catch (t) {\n        s = !0, o = t;\n      } finally {\n        try {\n          if (!l && null != n["return"] && (a = n["return"](), Object(a) !== a)) return;\n        } finally {\n          if (s) throw o;\n        }\n      }\n      return c;\n    }\n  }(t, e) || H(t, e) || function () {\n    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction S(t, e) {\n  return e || (e = t.slice(0)), Object.freeze(Object.defineProperties(t, {\n    raw: {\n      value: Object.freeze(e)\n    }\n  }));\n}\nfunction D(t) {\n  return function (t) {\n    if (Array.isArray(t)) return E(t);\n  }(t) || function (t) {\n    if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);\n  }(t) || H(t) || function () {\n    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction H(t, e) {\n  if (t) {\n    if ("string" == typeof t) return E(t, e);\n    var n = {}.toString.call(t).slice(8, -1);\n    return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? E(t, e) : void 0;\n  }\n}\nvar R = {\n    Top: "top",\n    Bottom: "bottom",\n    Left: "left",\n    Right: "right",\n    CenterVertical: "center-vertical",\n    CenterHorizontal: "center-horizontal"\n  },\n  V = {\n    Start: "start",\n    Middle: "middle",\n    End: "end",\n    Fit: "fit"\n  };\nfunction T(t) {\n  var e = t.useRelativePositioning,\n    n = t.spacing,\n    r = t.align,\n    o = t.justify,\n    i = t.referenceElViewportPos,\n    a = void 0 === i ? F : i,\n    c = t.referenceElDocumentPos,\n    l = void 0 === c ? F : c,\n    s = t.contentElViewportPos,\n    u = void 0 === s ? F : s,\n    f = t.contentElDocumentPos,\n    d = void 0 === f ? F : f,\n    p = t.scrollContainer,\n    g = t.windowHeight,\n    h = void 0 === g ? window.innerHeight : g,\n    m = t.windowWidth,\n    v = void 0 === m ? window.innerWidth : m,\n    w = p ? p.offsetWidth : v,\n    y = p ? p.offsetHeight : h,\n    E = {\n      windowWidth: w,\n      windowHeight: y,\n      referenceElViewportPos: a,\n      contentElViewportPos: u,\n      spacing: n\n    },\n    b = function (t, e) {\n      var n = e.spacing,\n        r = e.windowWidth,\n        o = e.windowHeight,\n        i = e.contentElViewportPos,\n        a = e.referenceElViewportPos,\n        c = [t].concat(D(_[t]));\n      return c.find(function (t) {\n        return [R.Top, R.Bottom, R.CenterVertical].includes(t) ? $({\n          top: U({\n            align: t,\n            contentElPos: i,\n            referenceElPos: a,\n            spacing: n\n          }),\n          windowHeight: o,\n          contentHeight: i.height\n        }) : !![R.Left, R.Right, R.CenterHorizontal].includes(t) && Y({\n          left: X({\n            align: t,\n            contentElPos: i,\n            referenceElPos: a,\n            spacing: n\n          }),\n          windowWidth: r,\n          contentWidth: i.width\n        });\n      }) || t;\n    }(r, E),\n    P = function (t, e, n) {\n      var r,\n        o,\n        i = n.spacing,\n        a = n.windowWidth,\n        c = n.windowHeight,\n        l = n.contentElViewportPos,\n        s = n.referenceElViewportPos,\n        u = [t].concat(D(q[t]));\n      switch (e) {\n        case R.Top:\n        case R.Bottom:\n        case R.CenterVertical:\n          return null !== (r = u.find(function (t) {\n            return Y({\n              contentWidth: t === V.Fit ? s.width : l.width,\n              windowWidth: a,\n              left: X({\n                contentElPos: l,\n                referenceElPos: s,\n                spacing: i,\n                align: e,\n                justify: t\n              })\n            });\n          })) && void 0 !== r ? r : q[t][0];\n        case R.Left:\n        case R.Right:\n        case R.CenterHorizontal:\n          return null !== (o = u.find(function (t) {\n            return $({\n              contentHeight: t === V.Fit ? s.height : l.height,\n              windowHeight: c,\n              top: U({\n                contentElPos: l,\n                referenceElPos: s,\n                spacing: i,\n                align: e,\n                justify: t\n              })\n            });\n          })) && void 0 !== o ? o : q[t][0];\n      }\n    }(o, b, E),\n    j = function (t) {\n      var e,\n        n,\n        r = t.align,\n        o = t.justify,\n        i = W[r],\n        a = null !== (e = i.x) && void 0 !== e ? e : z[o],\n        c = null !== (n = i.y) && void 0 !== n ? n : L[o];\n      return "".concat(a, " ").concat(c);\n    }({\n      align: b,\n      justify: P\n    }),\n    C = function (t, e) {\n      var n = .8;\n      switch (t) {\n        case R.Top:\n          return "translate3d(0, ".concat(e, "px, 0) scale(").concat(n, ")");\n        case R.Bottom:\n          return "translate3d(0, -".concat(e, "px, 0) scale(").concat(n, ")");\n        case R.Left:\n          return "translate3d(".concat(e, "px, 0, 0) scale(").concat(n, ")");\n        case R.Right:\n          return "translate3d(-".concat(e, "px, 0, 0) scale(").concat(n, ")");\n        case R.CenterHorizontal:\n        case R.CenterVertical:\n          return "scale(".concat(n, ")");\n      }\n    }(b, n);\n  return 0 === Math.floor(u.width) && o !== V.Fit ? {\n    align: r,\n    justify: o,\n    positionCSS: {\n      left: 0,\n      top: 0,\n      transform: C,\n      transformOrigin: j\n    }\n  } : e ? {\n    align: b,\n    justify: P,\n    positionCSS: O(O({}, Z({\n      align: b,\n      justify: P,\n      referenceElDocumentPos: l,\n      contentElDocumentPos: d,\n      spacing: n\n    })), {}, {\n      transformOrigin: j,\n      transform: C\n    })\n  } : {\n    align: b,\n    justify: P,\n    positionCSS: O(O({}, J({\n      align: b,\n      justify: P,\n      referenceElDocumentPos: l,\n      contentElDocumentPos: d,\n      spacing: n,\n      windowHeight: y,\n      windowWidth: w\n    })), {}, {\n      transformOrigin: j,\n      transform: C\n    })\n  };\n}\nvar F = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    height: 0,\n    width: 0\n  },\n  M = function M(t, e) {\n    var n = t.getBoundingClientRect(),\n      r = n.top,\n      o = n.bottom,\n      i = n.left,\n      a = n.right,\n      c = n.width;\n    return {\n      top: r,\n      bottom: o,\n      left: i,\n      right: a,\n      height: t.offsetHeight,\n      width: e ? c : parseFloat(getComputedStyle(t).width)\n    };\n  };\nfunction N(t, e, n) {\n  if (!t) return F;\n  var r = M(t, n),\n    o = r.top,\n    i = r.bottom,\n    a = r.left,\n    c = r.right,\n    l = r.height,\n    s = r.width;\n  if (e) {\n    var u = e.scrollTop,\n      f = e.scrollLeft,\n      d = e.getBoundingClientRect();\n    return {\n      top: o + u - d.top,\n      bottom: i + u - d.bottom,\n      left: a + f - d.left,\n      right: c + f - d.right,\n      height: l,\n      width: s\n    };\n  }\n  var p = window,\n    g = p.scrollX,\n    h = p.scrollY;\n  return {\n    top: o + h,\n    bottom: i + h,\n    left: a + g,\n    right: c + g,\n    height: l,\n    width: s\n  };\n}\nfunction B(t, e, n) {\n  if (!t) return F;\n  var r = M(t, n),\n    o = r.top,\n    i = r.bottom,\n    a = r.left,\n    c = r.right,\n    l = r.height,\n    s = r.width;\n  if (e) {\n    var u = e.getBoundingClientRect();\n    return {\n      top: o - u.top,\n      bottom: i - u.bottom,\n      left: a - u.left,\n      right: c - u.right,\n      height: l,\n      width: s\n    };\n  }\n  return {\n    top: o,\n    bottom: i,\n    left: a,\n    right: c,\n    height: l,\n    width: s\n  };\n}\nvar L = b(b(b(b({}, V.Start, "top"), V.Middle, "center"), V.End, "bottom"), V.Fit, "center"),\n  z = b(b(b(b({}, V.Start, "left"), V.Middle, "center"), V.End, "right"), V.Fit, "center"),\n  W = b(b(b(b(b(b({}, R.Left, {\n    x: "right"\n  }), R.Right, {\n    x: "left"\n  }), R.Top, {\n    y: "bottom"\n  }), R.Bottom, {\n    y: "top"\n  }), R.CenterHorizontal, {\n    x: "center"\n  }), R.CenterVertical, {\n    y: "center"\n  });\nvar A = b(b(b(b({}, V.Start, {\n    top: 0\n  }), V.End, {\n    bottom: 0\n  }), V.Middle, function (t) {\n    var e = t.contentElDocumentPos,\n      n = t.referenceElDocumentPos;\n    return {\n      top: "".concat(n.height / 2 - e.height / 2, "px")\n    };\n  }), V.Fit, {\n    top: 0,\n    bottom: 0\n  }),\n  I = b(b(b(b({}, V.Start, {\n    left: 0\n  }), V.End, {\n    right: 0\n  }), V.Middle, function (t) {\n    var e = t.contentElDocumentPos,\n      n = t.referenceElDocumentPos;\n    return {\n      left: "".concat(n.width / 2 - e.width / 2, "px")\n    };\n  }), V.Fit, {\n    left: 0,\n    right: 0\n  }),\n  k = b(b(b(b(b(b({}, R.Top, {\n    constant: function constant(t) {\n      var e = t.spacing;\n      return {\n        bottom: "calc(100% + ".concat(e, "px)")\n      };\n    },\n    justifyPositions: I\n  }), R.Bottom, {\n    constant: function constant(t) {\n      var e = t.spacing;\n      return {\n        top: "calc(100% + ".concat(e, "px)")\n      };\n    },\n    justifyPositions: I\n  }), R.CenterVertical, {\n    constant: function constant(t) {\n      var e = t.referenceElDocumentPos;\n      return {\n        top: "calc(".concat(e.height / 2, "px - 50%)")\n      };\n    },\n    justifyPositions: I\n  }), R.Left, {\n    constant: function constant(t) {\n      var e = t.spacing;\n      return {\n        right: "calc(100% + ".concat(e, "px)")\n      };\n    },\n    justifyPositions: A\n  }), R.Right, {\n    constant: function constant(t) {\n      var e = t.spacing;\n      return {\n        left: "calc(100% + ".concat(e, "px)")\n      };\n    },\n    justifyPositions: A\n  }), R.CenterHorizontal, {\n    constant: function constant(t) {\n      var e = t.referenceElDocumentPos;\n      return {\n        left: "calc(".concat(e.width / 2, "px - 50%)")\n      };\n    },\n    justifyPositions: A\n  });\nfunction Z(t) {\n  var e,\n    n = t.align,\n    r = t.justify,\n    o = t.referenceElDocumentPos,\n    i = t.contentElDocumentPos,\n    a = t.spacing,\n    c = k[n],\n    l = c.justifyPositions[r],\n    s = {\n      contentElDocumentPos: i,\n      referenceElDocumentPos: o,\n      spacing: a\n    };\n  return O(O({}, null === (e = c.constant) || void 0 === e ? void 0 : e.call(c, s)), "function" == typeof l ? l(s) : l);\n}\nfunction J(t) {\n  var e = t.align,\n    n = t.justify,\n    r = t.referenceElDocumentPos,\n    o = t.contentElDocumentPos,\n    i = t.spacing,\n    a = t.windowWidth,\n    c = t.windowHeight,\n    l = X({\n      align: e,\n      justify: n,\n      referenceElPos: r,\n      contentElPos: o,\n      spacing: i\n    }),\n    s = "".concat(l, "px"),\n    u = "".concat(U({\n      align: e,\n      justify: n,\n      referenceElPos: r,\n      contentElPos: o,\n      spacing: i\n    }), "px");\n  return n !== V.Fit ? {\n    left: s,\n    top: u\n  } : [R.Left, R.Right, R.CenterHorizontal].includes(e) ? {\n    left: s,\n    top: u,\n    bottom: "".concat(c - r.bottom, "px")\n  } : {\n    left: s,\n    top: u,\n    right: "".concat(a - (l + r.width), "px")\n  };\n}\nfunction U(t) {\n  var e = t.align,\n    n = t.justify,\n    r = t.contentElPos,\n    o = t.referenceElPos,\n    i = t.spacing;\n  switch (e) {\n    case R.Left:\n    case R.Right:\n    case R.CenterHorizontal:\n      switch (n) {\n        case V.Start:\n        case V.Fit:\n          return o.top;\n        case V.End:\n          return o.top + o.height - r.height;\n        case V.Middle:\n        default:\n          return o.top - (r.height - o.height) / 2;\n      }\n    case R.CenterVertical:\n      return o.top - (r.height - o.height) / 2;\n    case R.Top:\n      return o.top - r.height - i;\n    case R.Bottom:\n    default:\n      return o.top + o.height + i;\n  }\n}\nfunction X(t) {\n  var e = t.align,\n    n = t.justify,\n    r = t.contentElPos,\n    o = t.referenceElPos,\n    i = t.spacing;\n  switch (e) {\n    case R.Top:\n    case R.Bottom:\n    case R.CenterVertical:\n      switch (n) {\n        case V.End:\n          return o.left + o.width - r.width;\n        case V.Middle:\n          return o.left - (r.width - o.width) / 2;\n        case V.Start:\n        case V.Fit:\n        default:\n          return o.left;\n      }\n    case R.Left:\n      return o.left - r.width - i;\n    case R.Right:\n      return o.left + o.width + i;\n    case R.CenterHorizontal:\n    default:\n      return o.left - (r.width - o.width) / 2;\n  }\n}\nfunction Y(t) {\n  var e = t.left,\n    n = t.windowWidth,\n    r = t.contentWidth;\n  return e >= 0 && !(e + r > n);\n}\nfunction $(t) {\n  var e = t.top,\n    n = t.windowHeight,\n    r = t.contentHeight;\n  return e >= 0 && !(e + r > n);\n}\nvar _ = b(b(b(b(b(b({}, R.Top, [R.Bottom]), R.Bottom, [R.Top]), R.Left, [R.Right]), R.Right, [R.Left]), R.CenterHorizontal, [R.Left, R.Right]), R.CenterVertical, [R.Top, R.Bottom]);\nvar q = b(b(b(b({}, V.Start, [V.End, V.Middle]), V.Middle, [V.End, V.Start]), V.End, [V.Start, V.Middle]), V.Fit, [V.Middle, V.Start, V.End]);\nvar G,\n  K,\n  Q,\n  tt,\n  et,\n  nt = ["active", "spacing", "align", "justify", "adjustOnMutation", "children", "className", "popoverZIndex", "refEl", "usePortal", "portalClassName", "portalContainer", "portalRef", "scrollContainer", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"],\n  rt = ["transform"],\n  ot = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(G || (G = S(["\\n  position: absolute;\\n  transition: transform ", "ms ease-in-out,\\n    opacity ", "ms ease-in-out;\\n  opacity: 0;\\n"])), _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_6__/* .transitionDuration */ .nV["default"], _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_6__/* .transitionDuration */ .nV["default"]),\n  it = {\n    attributes: !0,\n    characterData: !0,\n    childList: !0,\n    subtree: !0\n  },\n  at = (0,_leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_4__/* .createUniqueClassName */ .hy)("popover-content"),\n  ct = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (e, a) {\n    var m,\n      E = e.active,\n      j = void 0 !== E && E,\n      O = e.spacing,\n      D = void 0 === O ? 10 : O,\n      H = e.align,\n      F = void 0 === H ? R.Bottom : H,\n      M = e.justify,\n      L = void 0 === M ? V.Start : M,\n      z = e.adjustOnMutation,\n      W = void 0 !== z && z,\n      A = e.children,\n      I = e.className,\n      k = e.popoverZIndex,\n      Z = e.refEl,\n      J = e.usePortal,\n      U = void 0 === J || J,\n      X = e.portalClassName,\n      Y = e.portalContainer,\n      $ = e.portalRef,\n      _ = e.scrollContainer,\n      q = e.onEnter,\n      G = e.onEntering,\n      ct = e.onEntered,\n      lt = e.onExit,\n      st = e.onExiting,\n      ut = e.onExited,\n      ft = C(e, nt),\n      dt = x((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), 2),\n      pt = dt[0],\n      gt = dt[1],\n      ht = x((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), 2),\n      mt = ht[0],\n      vt = ht[1],\n      wt = x((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), 2),\n      yt = wt[0],\n      Et = wt[1],\n      bt = (0,_leafygreen_ui_leafygreen_provider__WEBPACK_IMPORTED_MODULE_3__/* .usePopoverContext */ .lp)().setIsPopoverOpen,\n      Pt = (0,_leafygreen_ui_leafygreen_provider__WEBPACK_IMPORTED_MODULE_3__/* .usePopoverPortalContainer */ .Wt)(),\n      jt = Pt.portalContainer,\n      Ot = Pt.scrollContainer;\n    jt = Y || jt, Ot = _ || Ot, U && Ot && (Ot.contains(jt) || _leafygreen_ui_lib__WEBPACK_IMPORTED_MODULE_4__/* .consoleOnce */ .X3.warn("To ensure correct positioning make sure that the portalContainer element is inside of the scrollContainer"));\n    var Ct = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(mt);\n    Ct.current = mt;\n    var xt = null;\n    if (Z && Z.current) xt = Z.current;else if (pt) {\n      var St = pt.parentNode;\n      St && St instanceof HTMLElement && (xt = St);\n    }\n    var Dt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useViewportSize */ .nP)(),\n      Ht = W && j,\n      Rt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useMutationObserver */ .Iy)(xt, it, Date.now, Ht),\n      Vt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useMutationObserver */ .Iy)(null == mt ? void 0 : mt.parentNode, it, Date.now, Ht),\n      Tt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useObjectDependency */ .Uv)(B(xt, Ot, !0)),\n      Ft = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useObjectDependency */ .Uv)(B(null == mt ? void 0 : mt.parentNode, Ot)),\n      Mt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useObjectDependency */ .Uv)((0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return N(xt, Ot, !0);\n      }, [xt, Ot, Dt, Rt, j, F, L, yt])),\n      Nt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useObjectDependency */ .Uv)((0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return N(mt);\n      }, [null == mt ? void 0 : mt.parentNode, Dt, Vt, j, F, L, yt])),\n      Bt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .usePrevious */ .D9)(L),\n      Lt = (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .usePrevious */ .D9)(F),\n      zt = Bt !== L && (L === V.Fit || Bt === V.Fit) || Lt !== F && L === V.Fit;\n    (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n      zt && Et(function (t) {\n        return t + 1;\n      });\n    }, [zt]);\n    var Wt = x((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), 2),\n      At = Wt[0],\n      It = Wt[1];\n    if ((0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n      return It(!0);\n    }, []), !At) return null;\n    var kt,\n      Zt = T({\n        useRelativePositioning: !U,\n        spacing: D,\n        align: F,\n        justify: L,\n        referenceElViewportPos: Tt,\n        referenceElDocumentPos: Mt,\n        contentElViewportPos: Ft,\n        contentElDocumentPos: Nt,\n        scrollContainer: Ot\n      }),\n      Jt = Zt.align,\n      Ut = Zt.justify,\n      Xt = Zt.positionCSS,\n      Yt = Xt.transform,\n      $t = C(Xt, rt),\n      _t = (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(K || (K = S(["\\n      opacity: 1;\\n      position: ", ";\\n      pointer-events: initial;\\n    "])), U ? "" : "absolute"),\n      qt = U ? _leafygreen_ui_portal__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z : react__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n      Gt = {\n        className: jt ? void 0 : X,\n        container: null !== (m = jt) && void 0 !== m ? m : void 0,\n        portalRef: $\n      },\n      Kt = U ? Gt : {};\n    return kt = null == A ? null : "function" == typeof A ? A({\n      align: Jt,\n      justify: Ut,\n      referenceElPos: Mt\n    }) : A, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_transition_group__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .ZP, {\n      nodeRef: Ct,\n      "in": j,\n      timeout: _leafygreen_ui_tokens__WEBPACK_IMPORTED_MODULE_6__/* .transitionDuration */ .nV["default"],\n      mountOnEnter: !0,\n      unmountOnExit: !0,\n      appear: !0,\n      onEntering: G,\n      onEnter: q,\n      onEntered: function onEntered() {\n        bt(!0);\n        for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];\n        null == ct || ct.apply(void 0, e);\n      },\n      onExiting: st,\n      onExit: lt,\n      onExited: function onExited() {\n        bt(!1);\n        for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];\n        null == ut || ut.apply(void 0, e);\n      }\n    }, function (e) {\n      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {\n        ref: gt,\n        className: (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(Q || (Q = S(["\\n                display: none;\\n              "])))\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(qt, Kt, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", P({}, ft, {\n        ref: a,\n        className: (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.cx)(ot, (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)($t), b(b(b({}, (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)({\n          transform: Yt\n        }), "entering" === e || "exiting" === e), _t, "entered" === e), (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(tt || (tt = S(["\\n                      z-index: ", ";\\n                    "])), k), "number" == typeof k), I, b({}, (0,_leafygreen_ui_emotion__WEBPACK_IMPORTED_MODULE_1__.css)(et || (et = S(["\\n                      transition-delay: 0ms;\\n                    "]))), "exiting" === e))\n      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n        ref: vt,\n        className: at\n      }, kt))));\n    });\n  });\nct.displayName = "Popover", ct.propTypes =  false ? 0 : {};\nvar lt = {\n  getAlign: function getAlign(t, e) {\n    switch (t) {\n      case "top":\n        return "end";\n      case "bottom":\n        return "start";\n      default:\n        switch (e) {\n          case "middle":\n          case "fit":\n            return "center";\n          default:\n            return e;\n        }\n    }\n  },\n  getJustify: function getJustify(t, e) {\n    switch (t) {\n      case "left":\n        return "end";\n      case "right":\n        return "start";\n      default:\n        switch (e) {\n          case "middle":\n          case "fit":\n            return "center";\n          default:\n            return e;\n        }\n    }\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/popover/dist/esm/index.js\n')},"./packages/portal/dist/esm/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Z: () => (/* binding */ l)\n/* harmony export */ });\n/* unused harmony export usePortalContainer */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("webpack/sharing/consume/default/react/react");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("webpack/sharing/consume/default/react-dom/react-dom");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./node_modules/prop-types/index.js");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/hooks/dist/esm/index.js");\n\n\n\n\nfunction o(r, t) {\n  t > r.length && (t = r.length);\n  for (var e = 0, n = Array(t); e < t; e++) n[e] = r[e];\n  return n;\n}\nfunction a(r, t) {\n  return function (r) {\n    if (Array.isArray(r)) return r;\n  }(r) || function (r, t) {\n    var e = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];\n    if (null != e) {\n      var n,\n        o,\n        a,\n        i,\n        l = [],\n        u = !0,\n        c = !1;\n      try {\n        if (a = (e = e.call(r)).next, 0 === t) ;else for (; !(u = (n = a.call(e)).done) && (l.push(n.value), l.length !== t); u = !0);\n      } catch (r) {\n        c = !0, o = r;\n      } finally {\n        try {\n          if (!u && null != e["return"] && (i = e["return"](), Object(i) !== i)) return;\n        } finally {\n          if (c) throw o;\n        }\n      }\n      return l;\n    }\n  }(r, t) || function (r, t) {\n    if (r) {\n      if ("string" == typeof r) return o(r, t);\n      var e = {}.toString.call(r).slice(8, -1);\n      return "Object" === e && r.constructor && (e = r.constructor.name), "Map" === e || "Set" === e ? Array.from(r) : "Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? o(r, t) : void 0;\n    }\n  }(r, t) || function () {\n    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }();\n}\nfunction i(t, e) {\n  var o = a(react__WEBPACK_IMPORTED_MODULE_0___default().useState(), 2),\n    i = o[0],\n    l = o[1];\n  return (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n    if (t) return e && (e.current = t), void l(t);\n    var r = document.createElement("div");\n    return document.body.appendChild(r), e && (e.current = r), l(r), function () {\n      r.remove();\n    };\n  }, [t, e]), i;\n}\nfunction l(r) {\n  var e = r.children,\n    o = r.className,\n    a = r.container,\n    l = r.portalRef,\n    u = i(null != a ? a : void 0, l);\n  return (0,_leafygreen_ui_hooks__WEBPACK_IMPORTED_MODULE_2__/* .useIsomorphicLayoutEffect */ .LI)(function () {\n    u && !a && (u.className = null != o ? o : "");\n  }, [a, u, o]), u ? /*#__PURE__*/(0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(e, u) : null;\n}\nl.displayName = "Portal", l.propTypes = {\n  children: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().node),\n  className: (prop_types__WEBPACK_IMPORTED_MODULE_3___default().string),\n  container: prop_types__WEBPACK_IMPORTED_MODULE_3___default().oneOfType([(prop_types__WEBPACK_IMPORTED_MODULE_3___default().node), (prop_types__WEBPACK_IMPORTED_MODULE_3___default().object)])\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wb3J0YWwvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRTyxTQUFTQSxFQUNkQyxDQUFBLEVBQ0FDLENBQUE7RUFNQSxJQUEyRUMsQ0FBQSxHQUFBQyxDQUFBLENBQXpDQyxxREFBTSxJQUFtQztJQUFwRUwsQ0FBQSxHQUFTRyxDQUFBO0lBQUVJLENBQUEsR0FBWUosQ0FBQTtFQTJCOUIsT0F2QkFLLHlGQUFBLENBQTBCO0lBQ3hCLElBQUlQLENBQUEsRUFPRixPQU5JQyxDQUFBLEtBQ0ZBLENBQUEsQ0FBVU8sT0FBQSxHQUFVUixDQUFBLFFBR3RCTSxDQUFBLENBQWFOLENBQUE7SUFLZixJQUFNSSxDQUFBLEdBQW1CSyxRQUFBLENBQVNDLGFBQUEsQ0FBYztJQVFoRCxPQVBBRCxRQUFBLENBQVNFLElBQUEsQ0FBS0MsV0FBQSxDQUFZUixDQUFBLEdBQ3RCSCxDQUFBLEtBQ0ZBLENBQUEsQ0FBVU8sT0FBQSxHQUFVSixDQUFBLEdBR3RCRSxDQUFBLENBQWFGLENBQUEsR0FFTjtNQUNMQSxDQUFBLENBQWlCUyxNQUFBO0lBQUEsQ0FFckI7RUFBQSxHQUFHLENBQUNiLENBQUEsRUFBaUJDLENBQUEsSUFDZEYsQ0FDVDtBQUFBO0FBS0EsU0FBU08sRUFBTUYsQ0FBQTtFQUsyQixJQUp4Q0gsQ0FBQSxHQUFRRyxDQUFBLENBQVJVLFFBQUE7SUFDQVosQ0FBQSxHQUFTRSxDQUFBLENBQVRXLFNBQUE7SUFDQVosQ0FBQSxHQUFTQyxDQUFBLENBQVRZLFNBQUE7SUFDQVYsQ0FBQSxHQUFTRixDQUFBLENBQVRhLFNBQUE7SUFFTUMsQ0FBQSxHQUFrQm5CLENBQUEsQ0FBbUIsUUFBQUksQ0FBQSxHQUFBQSxDQUFBLFFBQWEsR0FBV0csQ0FBQTtFQVFuRSxPQU5BQyx5RkFBQSxDQUEwQjtJQUNwQlcsQ0FBQSxLQUFvQmYsQ0FBQSxLQUN0QmUsQ0FBQSxDQUFnQkgsU0FBQSxHQUFZLFFBQUFiLENBQUEsR0FBQUEsQ0FBQSxHQUFhLEdBRTVDO0VBQUEsR0FBRSxDQUFDQyxDQUFBLEVBQVdlLENBQUEsRUFBaUJoQixDQUFBLElBRTNCZ0IsQ0FBQSxnQkFJRWxCLHVEQUFBLENBQWFDLENBQUEsRUFBVWlCLENBQUEsSUFIckIsSUFJWDtBQUFBO0FBRUFaLENBQUEsQ0FBT2EsV0FBQSxHQUFjLFVBRXJCYixDQUFBLENBQU9jLFNBQUEsR0FBWTtFQUNqQk4sUUFBQSxFQUFVYix3REFBVTtFQUNwQmMsU0FBQSxFQUFXZCwwREFBVTtFQUNyQmUsU0FBQSxFQUFXZiwyREFBVSxDQUFVLENBQUNBLHdEQUFVLEVBQU1BLDBEQUFVO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWFmeWdyZWVuLXVpLy4uLy4uL3NyYy9Qb3J0YWwvUG9ydGFsLnRzeD82OTM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBNdXRhYmxlUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUG9ydGFsIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICdAbGVhZnlncmVlbi11aS9ob29rcyc7XG5cbmltcG9ydCB7IFBvcnRhbFByb3BzIH0gZnJvbSAnLi9Qb3J0YWwudHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUG9ydGFsQ29udGFpbmVyKFxuICBjdXN0b21Db250YWluZXI/OiBIVE1MRWxlbWVudCxcbiAgcG9ydGFsUmVmPzogTXV0YWJsZVJlZk9iamVjdDxIVE1MRWxlbWVudCB8IG51bGw+LFxuKSB7XG4gIC8vIE1ha2UgY29udGFpbmVyIGluaXRpYWxseSB1bmRlZmluZWQgc28gdGhhdCB0aGUgcG9ydGFsIGlzIG5vdCBjcmVhdGVkXG4gIC8vIG9yIHJlbmRlcmVkIG9uIGluaXRpYWwgcmVuZGVyLiBUaGlzIGFsbG93cyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgc2luY2U6XG4gIC8vICAtIFJlYWN0RE9NU2VydmVyIGNhbm5vdCByZW5kZXIgcG9ydGFsc1xuICAvLyAgLSBBIGNvbXBvbmVudCdzIGluaXRpYWwgaHlkcmF0ZWQgcmVuZGVyIHNob3VsZCBtYXRjaCB0aGUgc2VydmVyIHJlbmRlclxuICBjb25zdCBbY29udGFpbmVyLCBzZXRDb250YWluZXJdID0gUmVhY3QudXNlU3RhdGU8SFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ+KCk7XG5cbiAgLy8gaWYgYSBgcG9ydGFsUmVmYCBpcyBwYXNzZWQgdG8gcG9ydGFsIGNvbXBvbmVudCwgd2FpdCB0byBzZXQgdGhlIHBvcnRhbFJlZmVyZW5jZVxuICAvLyB1bnRpbCBhZnRlciB0aGUgaW5pdGlhbCByZW5kZXJcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGN1c3RvbUNvbnRhaW5lcikge1xuICAgICAgaWYgKHBvcnRhbFJlZikge1xuICAgICAgICBwb3J0YWxSZWYuY3VycmVudCA9IGN1c3RvbUNvbnRhaW5lcjtcbiAgICAgIH1cblxuICAgICAgc2V0Q29udGFpbmVyKGN1c3RvbUNvbnRhaW5lcik7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkZWZhdWx0Q29udGFpbmVyKTtcbiAgICBpZiAocG9ydGFsUmVmKSB7XG4gICAgICBwb3J0YWxSZWYuY3VycmVudCA9IGRlZmF1bHRDb250YWluZXI7XG4gICAgfVxuXG4gICAgc2V0Q29udGFpbmVyKGRlZmF1bHRDb250YWluZXIpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlZmF1bHRDb250YWluZXIucmVtb3ZlKCk7XG4gICAgfTtcbiAgfSwgW2N1c3RvbUNvbnRhaW5lciwgcG9ydGFsUmVmXSk7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbi8qKlxuICogUG9ydGFscyB0cmFuc3BvcnQgdGhlaXIgY2hpbGRyZW4gdG8gYSBkaXYgdGhhdCBpcyBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIGBkb2N1bWVudC5ib2R5YCB0byBvciBhIG5vZGUgdGhhdCBjYW4gYmUgc3BlY2lmaWVkIHdpdGggYSBjb250YWluZXIgcHJvcC5cbiAqL1xuZnVuY3Rpb24gUG9ydGFsKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgY29udGFpbmVyLFxuICBwb3J0YWxSZWYsXG59OiBQb3J0YWxQcm9wcyk6IFJlYWN0LlJlYWN0UG9ydGFsIHwgbnVsbCB7XG4gIGNvbnN0IHBvcnRhbENvbnRhaW5lciA9IHVzZVBvcnRhbENvbnRhaW5lcihjb250YWluZXIgPz8gdW5kZWZpbmVkLCBwb3J0YWxSZWYpO1xuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwb3J0YWxDb250YWluZXIgJiYgIWNvbnRhaW5lcikge1xuICAgICAgcG9ydGFsQ29udGFpbmVyLmNsYXNzTmFtZSA9IGNsYXNzTmFtZSA/PyAnJztcbiAgICB9XG4gIH0sIFtjb250YWluZXIsIHBvcnRhbENvbnRhaW5lciwgY2xhc3NOYW1lXSk7XG5cbiAgaWYgKCFwb3J0YWxDb250YWluZXIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIHBvcnRhbENvbnRhaW5lcik7XG59XG5cblBvcnRhbC5kaXNwbGF5TmFtZSA9ICdQb3J0YWwnO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGFpbmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubm9kZSwgUHJvcFR5cGVzLm9iamVjdF0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsO1xuIl0sIm5hbWVzIjpbImkiLCJ0IiwiZSIsIm8iLCJhIiwiciIsInVzZVN0YXRlIiwibCIsIm4iLCJjdXJyZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJjb250YWluZXIiLCJwb3J0YWxSZWYiLCJ1IiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJub2RlIiwic3RyaW5nIiwib25lT2ZUeXBlIiwib2JqZWN0IiwiZGVmYXVsdCIsInVzZVBvcnRhbENvbnRhaW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/portal/dist/esm/index.js\n')}}]);