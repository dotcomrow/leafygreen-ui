(self.webpackChunkleafygreen_ui=self.webpackChunkleafygreen_ui||[]).push([[7482,8354],{"./node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js":(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildQueries: () => (/* binding */ buildQueries),\n/* harmony export */   configure: () => (/* binding */ configure),\n/* harmony export */   createEvent: () => (/* binding */ createEvent),\n/* harmony export */   findAllByAltText: () => (/* binding */ findAllByAltText),\n/* harmony export */   findAllByDisplayValue: () => (/* binding */ findAllByDisplayValue),\n/* harmony export */   findAllByLabelText: () => (/* binding */ findAllByLabelText),\n/* harmony export */   findAllByPlaceholderText: () => (/* binding */ findAllByPlaceholderText),\n/* harmony export */   findAllByRole: () => (/* binding */ findAllByRole),\n/* harmony export */   findAllByTestId: () => (/* binding */ findAllByTestId),\n/* harmony export */   findAllByText: () => (/* binding */ findAllByText),\n/* harmony export */   findAllByTitle: () => (/* binding */ findAllByTitle),\n/* harmony export */   findByAltText: () => (/* binding */ findByAltText),\n/* harmony export */   findByDisplayValue: () => (/* binding */ findByDisplayValue),\n/* harmony export */   findByLabelText: () => (/* binding */ findByLabelText),\n/* harmony export */   findByPlaceholderText: () => (/* binding */ findByPlaceholderText),\n/* harmony export */   findByRole: () => (/* binding */ findByRole),\n/* harmony export */   findByTestId: () => (/* binding */ findByTestId),\n/* harmony export */   findByText: () => (/* binding */ findByText),\n/* harmony export */   findByTitle: () => (/* binding */ findByTitle),\n/* harmony export */   fireEvent: () => (/* binding */ fireEvent),\n/* harmony export */   getAllByAltText: () => (/* binding */ getAllByAltText),\n/* harmony export */   getAllByDisplayValue: () => (/* binding */ getAllByDisplayValue),\n/* harmony export */   getAllByLabelText: () => (/* binding */ getAllByLabelTextWithSuggestions),\n/* harmony export */   getAllByPlaceholderText: () => (/* binding */ getAllByPlaceholderText),\n/* harmony export */   getAllByRole: () => (/* binding */ getAllByRole),\n/* harmony export */   getAllByTestId: () => (/* binding */ getAllByTestId),\n/* harmony export */   getAllByText: () => (/* binding */ getAllByText),\n/* harmony export */   getAllByTitle: () => (/* binding */ getAllByTitle),\n/* harmony export */   getByAltText: () => (/* binding */ getByAltText),\n/* harmony export */   getByDisplayValue: () => (/* binding */ getByDisplayValue),\n/* harmony export */   getByLabelText: () => (/* binding */ getByLabelTextWithSuggestions),\n/* harmony export */   getByPlaceholderText: () => (/* binding */ getByPlaceholderText),\n/* harmony export */   getByRole: () => (/* binding */ getByRole),\n/* harmony export */   getByTestId: () => (/* binding */ getByTestId),\n/* harmony export */   getByText: () => (/* binding */ getByText),\n/* harmony export */   getByTitle: () => (/* binding */ getByTitle),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   getDefaultNormalizer: () => (/* binding */ getDefaultNormalizer),\n/* harmony export */   getElementError: () => (/* binding */ getElementError),\n/* harmony export */   getMultipleElementsFoundError: () => (/* binding */ getMultipleElementsFoundError),\n/* harmony export */   getNodeText: () => (/* binding */ getNodeText),\n/* harmony export */   getQueriesForElement: () => (/* binding */ getQueriesForElement),\n/* harmony export */   getRoles: () => (/* binding */ getRoles),\n/* harmony export */   getSuggestedQuery: () => (/* binding */ getSuggestedQuery),\n/* harmony export */   isInaccessible: () => (/* binding */ isInaccessible),\n/* harmony export */   logDOM: () => (/* binding */ logDOM),\n/* harmony export */   logRoles: () => (/* binding */ logRoles),\n/* harmony export */   makeFindQuery: () => (/* binding */ makeFindQuery),\n/* harmony export */   makeGetAllQuery: () => (/* binding */ makeGetAllQuery),\n/* harmony export */   makeSingleQuery: () => (/* binding */ makeSingleQuery),\n/* harmony export */   prettyDOM: () => (/* binding */ prettyDOM),\n/* harmony export */   prettyFormat: () => (/* reexport module object */ pretty_format__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   queries: () => (/* binding */ queries),\n/* harmony export */   queryAllByAltText: () => (/* binding */ queryAllByAltTextWithSuggestions),\n/* harmony export */   queryAllByAttribute: () => (/* binding */ queryAllByAttribute),\n/* harmony export */   queryAllByDisplayValue: () => (/* binding */ queryAllByDisplayValueWithSuggestions),\n/* harmony export */   queryAllByLabelText: () => (/* binding */ queryAllByLabelTextWithSuggestions),\n/* harmony export */   queryAllByPlaceholderText: () => (/* binding */ queryAllByPlaceholderTextWithSuggestions),\n/* harmony export */   queryAllByRole: () => (/* binding */ queryAllByRoleWithSuggestions),\n/* harmony export */   queryAllByTestId: () => (/* binding */ queryAllByTestIdWithSuggestions),\n/* harmony export */   queryAllByText: () => (/* binding */ queryAllByTextWithSuggestions),\n/* harmony export */   queryAllByTitle: () => (/* binding */ queryAllByTitleWithSuggestions),\n/* harmony export */   queryByAltText: () => (/* binding */ queryByAltText),\n/* harmony export */   queryByAttribute: () => (/* binding */ queryByAttribute),\n/* harmony export */   queryByDisplayValue: () => (/* binding */ queryByDisplayValue),\n/* harmony export */   queryByLabelText: () => (/* binding */ queryByLabelText),\n/* harmony export */   queryByPlaceholderText: () => (/* binding */ queryByPlaceholderText),\n/* harmony export */   queryByRole: () => (/* binding */ queryByRole),\n/* harmony export */   queryByTestId: () => (/* binding */ queryByTestId),\n/* harmony export */   queryByText: () => (/* binding */ queryByText),\n/* harmony export */   queryByTitle: () => (/* binding */ queryByTitle),\n/* harmony export */   queryHelpers: () => (/* binding */ queryHelpers),\n/* harmony export */   screen: () => (/* binding */ screen),\n/* harmony export */   waitFor: () => (/* binding */ waitForWrapper),\n/* harmony export */   waitForElementToBeRemoved: () => (/* binding */ waitForElementToBeRemoved),\n/* harmony export */   within: () => (/* binding */ getQueriesForElement),\n/* harmony export */   wrapAllByQueryWithSuggestion: () => (/* binding */ wrapAllByQueryWithSuggestion),\n/* harmony export */   wrapSingleQueryWithSuggestion: () => (/* binding */ wrapSingleQueryWithSuggestion)\n/* harmony export */ });\n/* harmony import */ var pretty_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/index.js\");\n/* harmony import */ var dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/dom-accessibility-api/dist/index.mjs\");\n/* harmony import */ var aria_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@testing-library/dom/node_modules/aria-query/lib/index.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/lz-string/libs/lz-string.js\");\n/* harmony import */ var lz_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lz_string__WEBPACK_IMPORTED_MODULE_3__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n/* provided dependency */ var process = __webpack_require__(\"./node_modules/process/browser.js\");\n\n\n\n\n\n\n/**\n * Source: https://github.com/facebook/jest/blob/e7bb6a1e26ffab90611b2593912df15b69315611/packages/pretty-format/src/plugins/DOMElement.ts\n */\n/* eslint-disable -- trying to stay as close to the original as possible */\n/* istanbul ignore file */\n\nfunction escapeHTML(str) {\n  return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n// Return empty string if keys is empty.\nconst printProps = (keys, props, config, indentation, depth, refs, printer) => {\n  const indentationNext = indentation + config.indent;\n  const colors = config.colors;\n  return keys.map(key => {\n    const value = props[key];\n    let printed = printer(value, config, indentationNext, depth, refs);\n    if (typeof value !== 'string') {\n      if (printed.indexOf('\\n') !== -1) {\n        printed = config.spacingOuter + indentationNext + printed + config.spacingOuter + indentation;\n      }\n      printed = '{' + printed + '}';\n    }\n    return config.spacingInner + indentation + colors.prop.open + key + colors.prop.close + '=' + colors.value.open + printed + colors.value.close;\n  }).join('');\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants\nconst NodeTypeTextNode = 3;\n\n// Return empty string if children is empty.\nconst printChildren = (children, config, indentation, depth, refs, printer) => children.map(child => {\n  const printedChild = typeof child === 'string' ? printText(child, config) : printer(child, config, indentation, depth, refs);\n  if (printedChild === '' && typeof child === 'object' && child !== null && child.nodeType !== NodeTypeTextNode) {\n    // A plugin serialized this Node to '' meaning we should ignore it.\n    return '';\n  }\n  return config.spacingOuter + indentation + printedChild;\n}).join('');\nconst printText = (text, config) => {\n  const contentColor = config.colors.content;\n  return contentColor.open + escapeHTML(text) + contentColor.close;\n};\nconst printComment = (comment, config) => {\n  const commentColor = config.colors.comment;\n  return commentColor.open + '\x3c!--' + escapeHTML(comment) + '--\x3e' + commentColor.close;\n};\n\n// Separate the functions to format props, children, and element,\n// so a plugin could override a particular function, if needed.\n// Too bad, so sad: the traditional (but unnecessary) space\n// in a self-closing tagColor requires a second test of printedProps.\nconst printElement = (type, printedProps, printedChildren, config, indentation) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + '<' + type + (printedProps && tagColor.close + printedProps + config.spacingOuter + indentation + tagColor.open) + (printedChildren ? '>' + tagColor.close + printedChildren + config.spacingOuter + indentation + tagColor.open + '</' + type : (printedProps && !config.min ? '' : ' ') + '/') + '>' + tagColor.close;\n};\nconst printElementAsLeaf = (type, config) => {\n  const tagColor = config.colors.tag;\n  return tagColor.open + '<' + type + tagColor.close + ' …' + tagColor.open + ' />' + tagColor.close;\n};\nconst ELEMENT_NODE$1 = 1;\nconst TEXT_NODE$1 = 3;\nconst COMMENT_NODE$1 = 8;\nconst FRAGMENT_NODE = 11;\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\nconst testNode = val => {\n  const constructorName = val.constructor.name;\n  const {\n    nodeType,\n    tagName\n  } = val;\n  const isCustomElement = typeof tagName === 'string' && tagName.includes('-') || typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  return nodeType === ELEMENT_NODE$1 && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE$1 && constructorName === 'Text' || nodeType === COMMENT_NODE$1 && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n};\nfunction nodeIsText(node) {\n  return node.nodeType === TEXT_NODE$1;\n}\nfunction nodeIsComment(node) {\n  return node.nodeType === COMMENT_NODE$1;\n}\nfunction nodeIsFragment(node) {\n  return node.nodeType === FRAGMENT_NODE;\n}\nfunction createDOMElementFilter(filterNode) {\n  return {\n    test: val => {\n      var _val$constructor2;\n      return (val == null ? void 0 : (_val$constructor2 = val.constructor) == null ? void 0 : _val$constructor2.name) && testNode(val);\n    },\n    serialize: (node, config, indentation, depth, refs, printer) => {\n      if (nodeIsText(node)) {\n        return printText(node.data, config);\n      }\n      if (nodeIsComment(node)) {\n        return printComment(node.data, config);\n      }\n      const type = nodeIsFragment(node) ? \"DocumentFragment\" : node.tagName.toLowerCase();\n      if (++depth > config.maxDepth) {\n        return printElementAsLeaf(type, config);\n      }\n      return printElement(type, printProps(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(attr => attr.name).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce((props, attribute) => {\n        props[attribute.name] = attribute.value;\n        return props;\n      }, {}), config, indentation + config.indent, depth, refs, printer), printChildren(Array.prototype.slice.call(node.childNodes || node.children).filter(filterNode), config, indentation + config.indent, depth, refs, printer), config, indentation);\n    }\n  };\n}\n\n// We try to load node dependencies\nlet chalk = null;\nlet readFileSync = null;\nlet codeFrameColumns = null;\ntry {\n  const nodeRequire = module && module.require;\n  readFileSync = nodeRequire.call(module, 'fs').readFileSync;\n  codeFrameColumns = nodeRequire.call(module, '@babel/code-frame').codeFrameColumns;\n  chalk = nodeRequire.call(module, 'chalk');\n} catch {\n  // We're in a browser environment\n}\n\n// frame has the form \"at myMethod (location/to/my/file.js:10:2)\"\nfunction getCodeFrame(frame) {\n  const locationStart = frame.indexOf('(') + 1;\n  const locationEnd = frame.indexOf(')');\n  const frameLocation = frame.slice(locationStart, locationEnd);\n  const frameLocationElements = frameLocation.split(':');\n  const [filename, line, column] = [frameLocationElements[0], parseInt(frameLocationElements[1], 10), parseInt(frameLocationElements[2], 10)];\n  let rawFileContents = '';\n  try {\n    rawFileContents = readFileSync(filename, 'utf-8');\n  } catch {\n    return '';\n  }\n  const codeFrame = codeFrameColumns(rawFileContents, {\n    start: {\n      line,\n      column\n    }\n  }, {\n    highlightCode: true,\n    linesBelow: 0\n  });\n  return chalk.dim(frameLocation) + \"\\n\" + codeFrame + \"\\n\";\n}\nfunction getUserCodeFrame() {\n  // If we couldn't load dependencies, we can't generate the user trace\n  /* istanbul ignore next */\n  if (!readFileSync || !codeFrameColumns) {\n    return '';\n  }\n  const err = new Error();\n  const firstClientCodeFrame = err.stack.split('\\n').slice(1) // Remove first line which has the form \"Error: TypeError\"\n  .find(frame => !frame.includes('node_modules/')); // Ignore frames from 3rd party libraries\n\n  return getCodeFrame(firstClientCodeFrame);\n}\n\n// Constant node.nodeType for text nodes, see:\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#Node_type_constants\nconst TEXT_NODE = 3;\nfunction jestFakeTimersAreEnabled() {\n  /* istanbul ignore else */\n  // eslint-disable-next-line\n  if (typeof jest !== 'undefined' && jest !== null) {\n    return (\n      // legacy timers\n      setTimeout._isMockFunction === true ||\n      // modern timers\n      // eslint-disable-next-line prefer-object-has-own -- not supported by our support matrix\n      Object.prototype.hasOwnProperty.call(setTimeout, 'clock')\n    );\n  }\n  // istanbul ignore next\n  return false;\n}\nfunction getDocument() {\n  /* istanbul ignore if */\n  if (typeof window === 'undefined') {\n    throw new Error('Could not find default container');\n  }\n  return window.document;\n}\nfunction getWindowFromNode(node) {\n  if (node.defaultView) {\n    // node is document\n    return node.defaultView;\n  } else if (node.ownerDocument && node.ownerDocument.defaultView) {\n    // node is a DOM node\n    return node.ownerDocument.defaultView;\n  } else if (node.window) {\n    // node is window\n    return node.window;\n  } else if (node.ownerDocument && node.ownerDocument.defaultView === null) {\n    throw new Error(\"It looks like the window object is not available for the provided node.\");\n  } else if (node.then instanceof Function) {\n    throw new Error(\"It looks like you passed a Promise object instead of a DOM node. Did you do something like `fireEvent.click(screen.findBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`, or await the findBy query `fireEvent.click(await screen.findBy...`?\");\n  } else if (Array.isArray(node)) {\n    throw new Error(\"It looks like you passed an Array instead of a DOM node. Did you do something like `fireEvent.click(screen.getAllBy...` when you meant to use a `getBy` query `fireEvent.click(screen.getBy...`?\");\n  } else if (typeof node.debug === 'function' && typeof node.logTestingPlaygroundURL === 'function') {\n    throw new Error(\"It looks like you passed a `screen` object. Did you do something like `fireEvent.click(screen, ...` when you meant to use a query, e.g. `fireEvent.click(screen.getBy..., `?\");\n  } else {\n    // The user passed something unusual to a calling function\n    throw new Error(\"The given node is not an Element, the node type is: \" + typeof node + \".\");\n  }\n}\nfunction checkContainerType(container) {\n  if (!container || !(typeof container.querySelector === 'function') || !(typeof container.querySelectorAll === 'function')) {\n    throw new TypeError(\"Expected container to be an Element, a Document or a DocumentFragment but got \" + getTypeName(container) + \".\");\n  }\n  function getTypeName(object) {\n    if (typeof object === 'object') {\n      return object === null ? 'null' : object.constructor.name;\n    }\n    return typeof object;\n  }\n}\n\nconst shouldHighlight = () => {\n  let colors;\n  try {\n    var _process, _process$env;\n    colors = JSON.parse((_process = process) == null ? void 0 : (_process$env = _process.env) == null ? void 0 : _process$env.COLORS);\n  } catch (e) {\n    // If this throws, process?.env?.COLORS wasn't parsable. Since we only\n    // care about `true` or `false`, we can safely ignore the error.\n  }\n  if (typeof colors === 'boolean') {\n    // If `colors` is set explicitly (both `true` and `false`), use that value.\n    return colors;\n  } else {\n    // If `colors` is not set, colorize if we're in node.\n    return typeof process !== 'undefined' && process.versions !== undefined && process.versions.node !== undefined;\n  }\n};\nconst {\n  DOMCollection\n} = pretty_format__WEBPACK_IMPORTED_MODULE_0__.plugins;\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#node_type_constants\nconst ELEMENT_NODE = 1;\nconst COMMENT_NODE = 8;\n\n// https://github.com/facebook/jest/blob/615084195ae1ae61ddd56162c62bbdda17587569/packages/pretty-format/src/plugins/DOMElement.ts#L50\nfunction filterCommentsAndDefaultIgnoreTagsTags(value) {\n  return value.nodeType !== COMMENT_NODE && (value.nodeType !== ELEMENT_NODE || !value.matches(getConfig().defaultIgnore));\n}\nfunction prettyDOM(dom, maxLength, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (!dom) {\n    dom = getDocument().body;\n  }\n  if (typeof maxLength !== 'number') {\n    maxLength = typeof process !== 'undefined' && process.env.DEBUG_PRINT_LIMIT || 7000;\n  }\n  if (maxLength === 0) {\n    return '';\n  }\n  if (dom.documentElement) {\n    dom = dom.documentElement;\n  }\n  let domTypeName = typeof dom;\n  if (domTypeName === 'object') {\n    domTypeName = dom.constructor.name;\n  } else {\n    // To don't fall with `in` operator\n    dom = {};\n  }\n  if (!('outerHTML' in dom)) {\n    throw new TypeError(\"Expected an element or document but got \" + domTypeName);\n  }\n  const {\n    filterNode = filterCommentsAndDefaultIgnoreTagsTags,\n    ...prettyFormatOptions\n  } = options;\n  const debugContent = pretty_format__WEBPACK_IMPORTED_MODULE_0__.format(dom, {\n    plugins: [createDOMElementFilter(filterNode), DOMCollection],\n    printFunctionName: false,\n    highlight: shouldHighlight(),\n    ...prettyFormatOptions\n  });\n  return maxLength !== undefined && dom.outerHTML.length > maxLength ? debugContent.slice(0, maxLength) + \"...\" : debugContent;\n}\nconst logDOM = function () {\n  const userCodeFrame = getUserCodeFrame();\n  if (userCodeFrame) {\n    console.log(prettyDOM(...arguments) + \"\\n\\n\" + userCodeFrame);\n  } else {\n    console.log(prettyDOM(...arguments));\n  }\n};\n\n// It would be cleaner for this to live inside './queries', but\n// other parts of the code assume that all exports from\n// './queries' are query functions.\nlet config = {\n  testIdAttribute: 'data-testid',\n  asyncUtilTimeout: 1000,\n  // asyncWrapper and advanceTimersWrapper is to support React's async `act` function.\n  // forcing react-testing-library to wrap all async functions would've been\n  // a total nightmare (consider wrapping every findBy* query and then also\n  // updating `within` so those would be wrapped too. Total nightmare).\n  // so we have this config option that's really only intended for\n  // react-testing-library to use. For that reason, this feature will remain\n  // undocumented.\n  asyncWrapper: cb => cb(),\n  unstable_advanceTimersWrapper: cb => cb(),\n  eventWrapper: cb => cb(),\n  // default value for the `hidden` option in `ByRole` queries\n  defaultHidden: false,\n  // default value for the `ignore` option in `ByText` queries\n  defaultIgnore: 'script, style',\n  // showOriginalStackTrace flag to show the full error stack traces for async errors\n  showOriginalStackTrace: false,\n  // throw errors w/ suggestions for better queries. Opt in so off by default.\n  throwSuggestions: false,\n  // called when getBy* queries fail. (message, container) => Error\n  getElementError(message, container) {\n    const prettifiedDOM = prettyDOM(container);\n    const error = new Error([message, \"Ignored nodes: comments, \" + config.defaultIgnore + \"\\n\" + prettifiedDOM].filter(Boolean).join('\\n\\n'));\n    error.name = 'TestingLibraryElementError';\n    return error;\n  },\n  _disableExpensiveErrorDiagnostics: false,\n  computedStyleSupportsPseudoElements: false\n};\nfunction runWithExpensiveErrorDiagnosticsDisabled(callback) {\n  try {\n    config._disableExpensiveErrorDiagnostics = true;\n    return callback();\n  } finally {\n    config._disableExpensiveErrorDiagnostics = false;\n  }\n}\nfunction configure(newConfig) {\n  if (typeof newConfig === 'function') {\n    // Pass the existing config out to the provided function\n    // and accept a delta in return\n    newConfig = newConfig(config);\n  }\n\n  // Merge the incoming config delta\n  config = {\n    ...config,\n    ...newConfig\n  };\n}\nfunction getConfig() {\n  return config;\n}\n\nconst labelledNodeNames = ['button', 'meter', 'output', 'progress', 'select', 'textarea', 'input'];\nfunction getTextContent(node) {\n  if (labelledNodeNames.includes(node.nodeName.toLowerCase())) {\n    return '';\n  }\n  if (node.nodeType === TEXT_NODE) return node.textContent;\n  return Array.from(node.childNodes).map(childNode => getTextContent(childNode)).join('');\n}\nfunction getLabelContent(element) {\n  let textContent;\n  if (element.tagName.toLowerCase() === 'label') {\n    textContent = getTextContent(element);\n  } else {\n    textContent = element.value || element.textContent;\n  }\n  return textContent;\n}\n\n// Based on https://github.com/eps1lon/dom-accessibility-api/pull/352\nfunction getRealLabels(element) {\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- types are not aware of older browsers that don't implement `labels`\n  if (element.labels !== undefined) {\n    var _labels;\n    return (_labels = element.labels) != null ? _labels : [];\n  }\n  if (!isLabelable(element)) return [];\n  const labels = element.ownerDocument.querySelectorAll('label');\n  return Array.from(labels).filter(label => label.control === element);\n}\nfunction isLabelable(element) {\n  return /BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(element.tagName) || element.tagName === 'INPUT' && element.getAttribute('type') !== 'hidden';\n}\nfunction getLabels(container, element, _temp) {\n  let {\n    selector = '*'\n  } = _temp === void 0 ? {} : _temp;\n  const ariaLabelledBy = element.getAttribute('aria-labelledby');\n  const labelsId = ariaLabelledBy ? ariaLabelledBy.split(' ') : [];\n  return labelsId.length ? labelsId.map(labelId => {\n    const labellingElement = container.querySelector(\"[id=\\\"\" + labelId + \"\\\"]\");\n    return labellingElement ? {\n      content: getLabelContent(labellingElement),\n      formControl: null\n    } : {\n      content: '',\n      formControl: null\n    };\n  }) : Array.from(getRealLabels(element)).map(label => {\n    const textToMatch = getLabelContent(label);\n    const formControlSelector = 'button, input, meter, output, progress, select, textarea';\n    const labelledFormControl = Array.from(label.querySelectorAll(formControlSelector)).filter(formControlElement => formControlElement.matches(selector))[0];\n    return {\n      content: textToMatch,\n      formControl: labelledFormControl\n    };\n  });\n}\n\nfunction assertNotNullOrUndefined(matcher) {\n  if (matcher === null || matcher === undefined) {\n    throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- implicitly converting `T` to `string`\n    \"It looks like \" + matcher + \" was passed instead of a matcher. Did you do something like getByText(\" + matcher + \")?\");\n  }\n}\nfunction fuzzyMatches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (typeof matcher === 'string' || typeof matcher === 'number') {\n    return normalizedText.toLowerCase().includes(matcher.toString().toLowerCase());\n  } else if (typeof matcher === 'function') {\n    return matcher(normalizedText, node);\n  } else {\n    return matchRegExp(matcher, normalizedText);\n  }\n}\nfunction matches(textToMatch, node, matcher, normalizer) {\n  if (typeof textToMatch !== 'string') {\n    return false;\n  }\n  assertNotNullOrUndefined(matcher);\n  const normalizedText = normalizer(textToMatch);\n  if (matcher instanceof Function) {\n    return matcher(normalizedText, node);\n  } else if (matcher instanceof RegExp) {\n    return matchRegExp(matcher, normalizedText);\n  } else {\n    return normalizedText === String(matcher);\n  }\n}\nfunction getDefaultNormalizer(_temp) {\n  let {\n    trim = true,\n    collapseWhitespace = true\n  } = _temp === void 0 ? {} : _temp;\n  return text => {\n    let normalizedText = text;\n    normalizedText = trim ? normalizedText.trim() : normalizedText;\n    normalizedText = collapseWhitespace ? normalizedText.replace(/\\s+/g, ' ') : normalizedText;\n    return normalizedText;\n  };\n}\n\n/**\n * Constructs a normalizer to pass to functions in matches.js\n * @param {boolean|undefined} trim The user-specified value for `trim`, without\n * any defaulting having been applied\n * @param {boolean|undefined} collapseWhitespace The user-specified value for\n * `collapseWhitespace`, without any defaulting having been applied\n * @param {Function|undefined} normalizer The user-specified normalizer\n * @returns {Function} A normalizer\n */\n\nfunction makeNormalizer(_ref) {\n  let {\n    trim,\n    collapseWhitespace,\n    normalizer\n  } = _ref;\n  if (!normalizer) {\n    // No custom normalizer specified. Just use default.\n    return getDefaultNormalizer({\n      trim,\n      collapseWhitespace\n    });\n  }\n  if (typeof trim !== 'undefined' || typeof collapseWhitespace !== 'undefined') {\n    // They've also specified a value for trim or collapseWhitespace\n    throw new Error('trim and collapseWhitespace are not supported with a normalizer. ' + 'If you want to use the default trim and collapseWhitespace logic in your normalizer, ' + 'use \"getDefaultNormalizer({trim, collapseWhitespace})\" and compose that into your normalizer');\n  }\n  return normalizer;\n}\nfunction matchRegExp(matcher, text) {\n  const match = matcher.test(text);\n  if (matcher.global && matcher.lastIndex !== 0) {\n    console.warn(\"To match all elements we had to reset the lastIndex of the RegExp because the global flag is enabled. We encourage to remove the global flag from the RegExp.\");\n    matcher.lastIndex = 0;\n  }\n  return match;\n}\n\nfunction getNodeText(node) {\n  if (node.matches('input[type=submit], input[type=button], input[type=reset]')) {\n    return node.value;\n  }\n  return Array.from(node.childNodes).filter(child => child.nodeType === TEXT_NODE && Boolean(child.textContent)).map(c => c.textContent).join('');\n}\n\nconst elementRoleList = buildElementRoleList(aria_query__WEBPACK_IMPORTED_MODULE_2__/* .elementRoles */ .Qv);\n\n/**\n * @param {Element} element -\n * @returns {boolean} - `true` if `element` and its subtree are inaccessible\n */\nfunction isSubtreeInaccessible(element) {\n  if (element.hidden === true) {\n    return true;\n  }\n  if (element.getAttribute('aria-hidden') === 'true') {\n    return true;\n  }\n  const window = element.ownerDocument.defaultView;\n  if (window.getComputedStyle(element).display === 'none') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion\n * which should only be used for elements with a non-presentational role i.e.\n * `role=\"none\"` and `role=\"presentation\"` will not be excluded.\n *\n * Implements aria-hidden semantics (i.e. parent overrides child)\n * Ignores \"Child Presentational: True\" characteristics\n *\n * @param {Element} element -\n * @param {object} [options] -\n * @param {function (element: Element): boolean} options.isSubtreeInaccessible -\n * can be used to return cached results from previous isSubtreeInaccessible calls\n * @returns {boolean} true if excluded, otherwise false\n */\nfunction isInaccessible(element, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    isSubtreeInaccessible: isSubtreeInaccessibleImpl = isSubtreeInaccessible\n  } = options;\n  const window = element.ownerDocument.defaultView;\n  // since visibility is inherited we can exit early\n  if (window.getComputedStyle(element).visibility === 'hidden') {\n    return true;\n  }\n  let currentElement = element;\n  while (currentElement) {\n    if (isSubtreeInaccessibleImpl(currentElement)) {\n      return true;\n    }\n    currentElement = currentElement.parentElement;\n  }\n  return false;\n}\nfunction getImplicitAriaRoles(currentNode) {\n  // eslint bug here:\n  // eslint-disable-next-line no-unused-vars\n  for (const {\n    match,\n    roles\n  } of elementRoleList) {\n    if (match(currentNode)) {\n      return [...roles];\n    }\n  }\n  return [];\n}\nfunction buildElementRoleList(elementRolesMap) {\n  function makeElementSelector(_ref) {\n    let {\n      name,\n      attributes\n    } = _ref;\n    return \"\" + name + attributes.map(_ref2 => {\n      let {\n        name: attributeName,\n        value,\n        constraints = []\n      } = _ref2;\n      const shouldNotExist = constraints.indexOf('undefined') !== -1;\n      if (shouldNotExist) {\n        return \":not([\" + attributeName + \"])\";\n      } else if (value) {\n        return \"[\" + attributeName + \"=\\\"\" + value + \"\\\"]\";\n      } else {\n        return \"[\" + attributeName + \"]\";\n      }\n    }).join('');\n  }\n  function getSelectorSpecificity(_ref3) {\n    let {\n      attributes = []\n    } = _ref3;\n    return attributes.length;\n  }\n  function bySelectorSpecificity(_ref4, _ref5) {\n    let {\n      specificity: leftSpecificity\n    } = _ref4;\n    let {\n      specificity: rightSpecificity\n    } = _ref5;\n    return rightSpecificity - leftSpecificity;\n  }\n  function match(element) {\n    let {\n      attributes = []\n    } = element;\n\n    // https://github.com/testing-library/dom-testing-library/issues/814\n    const typeTextIndex = attributes.findIndex(attribute => attribute.value && attribute.name === 'type' && attribute.value === 'text');\n    if (typeTextIndex >= 0) {\n      // not using splice to not mutate the attributes array\n      attributes = [...attributes.slice(0, typeTextIndex), ...attributes.slice(typeTextIndex + 1)];\n    }\n    const selector = makeElementSelector({\n      ...element,\n      attributes\n    });\n    return node => {\n      if (typeTextIndex >= 0 && node.type !== 'text') {\n        return false;\n      }\n      return node.matches(selector);\n    };\n  }\n  let result = [];\n\n  // eslint bug here:\n  // eslint-disable-next-line no-unused-vars\n  for (const [element, roles] of elementRolesMap.entries()) {\n    result = [...result, {\n      match: match(element),\n      roles: Array.from(roles),\n      specificity: getSelectorSpecificity(element)\n    }];\n  }\n  return result.sort(bySelectorSpecificity);\n}\nfunction getRoles(container, _temp) {\n  let {\n    hidden = false\n  } = _temp === void 0 ? {} : _temp;\n  function flattenDOM(node) {\n    return [node, ...Array.from(node.children).reduce((acc, child) => [...acc, ...flattenDOM(child)], [])];\n  }\n  return flattenDOM(container).filter(element => {\n    return hidden === false ? isInaccessible(element) === false : true;\n  }).reduce((acc, node) => {\n    let roles = [];\n    // TODO: This violates html-aria which does not allow any role on every element\n    if (node.hasAttribute('role')) {\n      roles = node.getAttribute('role').split(' ').slice(0, 1);\n    } else {\n      roles = getImplicitAriaRoles(node);\n    }\n    return roles.reduce((rolesAcc, role) => Array.isArray(rolesAcc[role]) ? {\n      ...rolesAcc,\n      [role]: [...rolesAcc[role], node]\n    } : {\n      ...rolesAcc,\n      [role]: [node]\n    }, acc);\n  }, {});\n}\nfunction prettyRoles(dom, _ref6) {\n  let {\n    hidden,\n    includeDescription\n  } = _ref6;\n  const roles = getRoles(dom, {\n    hidden\n  });\n  // We prefer to skip generic role, we don't recommend it\n  return Object.entries(roles).filter(_ref7 => {\n    let [role] = _ref7;\n    return role !== 'generic';\n  }).map(_ref8 => {\n    let [role, elements] = _ref8;\n    const delimiterBar = '-'.repeat(50);\n    const elementsString = elements.map(el => {\n      const nameString = \"Name \\\"\" + (0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__/* .computeAccessibleName */ .AB)(el, {\n        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements\n      }) + \"\\\":\\n\";\n      const domString = prettyDOM(el.cloneNode(false));\n      if (includeDescription) {\n        const descriptionString = \"Description \\\"\" + (0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__/* .computeAccessibleDescription */ .b)(el, {\n          computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements\n        }) + \"\\\":\\n\";\n        return \"\" + nameString + descriptionString + domString;\n      }\n      return \"\" + nameString + domString;\n    }).join('\\n\\n');\n    return role + \":\\n\\n\" + elementsString + \"\\n\\n\" + delimiterBar;\n  }).join('\\n');\n}\nconst logRoles = function (dom, _temp2) {\n  let {\n    hidden = false\n  } = _temp2 === void 0 ? {} : _temp2;\n  return console.log(prettyRoles(dom, {\n    hidden\n  }));\n};\n\n/**\n * @param {Element} element -\n * @returns {boolean | undefined} - false/true if (not)selected, undefined if not selectable\n */\nfunction computeAriaSelected(element) {\n  // implicit value from html-aam mappings: https://www.w3.org/TR/html-aam-1.0/#html-attribute-state-and-property-mappings\n  // https://www.w3.org/TR/html-aam-1.0/#details-id-97\n  if (element.tagName === 'OPTION') {\n    return element.selected;\n  }\n\n  // explicit value\n  return checkBooleanAttribute(element, 'aria-selected');\n}\n\n/**\n * @param {Element} element -\n * @returns {boolean} -\n */\nfunction computeAriaBusy(element) {\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-busy\n  return element.getAttribute('aria-busy') === 'true';\n}\n\n/**\n * @param {Element} element -\n * @returns {boolean | undefined} - false/true if (not)checked, undefined if not checked-able\n */\nfunction computeAriaChecked(element) {\n  // implicit value from html-aam mappings: https://www.w3.org/TR/html-aam-1.0/#html-attribute-state-and-property-mappings\n  // https://www.w3.org/TR/html-aam-1.0/#details-id-56\n  // https://www.w3.org/TR/html-aam-1.0/#details-id-67\n  if ('indeterminate' in element && element.indeterminate) {\n    return undefined;\n  }\n  if ('checked' in element) {\n    return element.checked;\n  }\n\n  // explicit value\n  return checkBooleanAttribute(element, 'aria-checked');\n}\n\n/**\n * @param {Element} element -\n * @returns {boolean | undefined} - false/true if (not)pressed, undefined if not press-able\n */\nfunction computeAriaPressed(element) {\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-pressed\n  return checkBooleanAttribute(element, 'aria-pressed');\n}\n\n/**\n * @param {Element} element -\n * @returns {boolean | string | null} -\n */\nfunction computeAriaCurrent(element) {\n  var _ref9, _checkBooleanAttribut;\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-current\n  return (_ref9 = (_checkBooleanAttribut = checkBooleanAttribute(element, 'aria-current')) != null ? _checkBooleanAttribut : element.getAttribute('aria-current')) != null ? _ref9 : false;\n}\n\n/**\n * @param {Element} element -\n * @returns {boolean | undefined} - false/true if (not)expanded, undefined if not expand-able\n */\nfunction computeAriaExpanded(element) {\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-expanded\n  return checkBooleanAttribute(element, 'aria-expanded');\n}\nfunction checkBooleanAttribute(element, attribute) {\n  const attributeValue = element.getAttribute(attribute);\n  if (attributeValue === 'true') {\n    return true;\n  }\n  if (attributeValue === 'false') {\n    return false;\n  }\n  return undefined;\n}\n\n/**\n * @param {Element} element -\n * @returns {number | undefined} - number if implicit heading or aria-level present, otherwise undefined\n */\nfunction computeHeadingLevel(element) {\n  // https://w3c.github.io/html-aam/#el-h1-h6\n  // https://w3c.github.io/html-aam/#el-h1-h6\n  const implicitHeadingLevels = {\n    H1: 1,\n    H2: 2,\n    H3: 3,\n    H4: 4,\n    H5: 5,\n    H6: 6\n  };\n  // explicit aria-level value\n  // https://www.w3.org/TR/wai-aria-1.2/#aria-level\n  const ariaLevelAttribute = element.getAttribute('aria-level') && Number(element.getAttribute('aria-level'));\n  return ariaLevelAttribute || implicitHeadingLevels[element.tagName];\n}\n\n/**\n * @param {Element} element -\n * @returns {number | undefined} -\n */\nfunction computeAriaValueNow(element) {\n  const valueNow = element.getAttribute('aria-valuenow');\n  return valueNow === null ? undefined : +valueNow;\n}\n\n/**\n * @param {Element} element -\n * @returns {number | undefined} -\n */\nfunction computeAriaValueMax(element) {\n  const valueMax = element.getAttribute('aria-valuemax');\n  return valueMax === null ? undefined : +valueMax;\n}\n\n/**\n * @param {Element} element -\n * @returns {number | undefined} -\n */\nfunction computeAriaValueMin(element) {\n  const valueMin = element.getAttribute('aria-valuemin');\n  return valueMin === null ? undefined : +valueMin;\n}\n\n/**\n * @param {Element} element -\n * @returns {string | undefined} -\n */\nfunction computeAriaValueText(element) {\n  const valueText = element.getAttribute('aria-valuetext');\n  return valueText === null ? undefined : valueText;\n}\n\nconst normalize = getDefaultNormalizer();\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction getRegExpMatcher(string) {\n  return new RegExp(escapeRegExp(string.toLowerCase()), 'i');\n}\nfunction makeSuggestion(queryName, element, content, _ref) {\n  let {\n    variant,\n    name\n  } = _ref;\n  let warning = '';\n  const queryOptions = {};\n  const queryArgs = [['Role', 'TestId'].includes(queryName) ? content : getRegExpMatcher(content)];\n  if (name) {\n    queryOptions.name = getRegExpMatcher(name);\n  }\n  if (queryName === 'Role' && isInaccessible(element)) {\n    queryOptions.hidden = true;\n    warning = \"Element is inaccessible. This means that the element and all its children are invisible to screen readers.\\n    If you are using the aria-hidden prop, make sure this is the right choice for your case.\\n    \";\n  }\n  if (Object.keys(queryOptions).length > 0) {\n    queryArgs.push(queryOptions);\n  }\n  const queryMethod = variant + \"By\" + queryName;\n  return {\n    queryName,\n    queryMethod,\n    queryArgs,\n    variant,\n    warning,\n    toString() {\n      if (warning) {\n        console.warn(warning);\n      }\n      let [text, options] = queryArgs;\n      text = typeof text === 'string' ? \"'\" + text + \"'\" : text;\n      options = options ? \", { \" + Object.entries(options).map(_ref2 => {\n        let [k, v] = _ref2;\n        return k + \": \" + v;\n      }).join(', ') + \" }\" : '';\n      return queryMethod + \"(\" + text + options + \")\";\n    }\n  };\n}\nfunction canSuggest(currentMethod, requestedMethod, data) {\n  return data && (!requestedMethod || requestedMethod.toLowerCase() === currentMethod.toLowerCase());\n}\nfunction getSuggestedQuery(element, variant, method) {\n  var _element$getAttribute, _getImplicitAriaRoles;\n  if (variant === void 0) {\n    variant = 'get';\n  }\n  // don't create suggestions for script and style elements\n  if (element.matches(getConfig().defaultIgnore)) {\n    return undefined;\n  }\n\n  //We prefer to suggest something else if the role is generic\n  const role = (_element$getAttribute = element.getAttribute('role')) != null ? _element$getAttribute : (_getImplicitAriaRoles = getImplicitAriaRoles(element)) == null ? void 0 : _getImplicitAriaRoles[0];\n  if (role !== 'generic' && canSuggest('Role', method, role)) {\n    return makeSuggestion('Role', element, role, {\n      variant,\n      name: (0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__/* .computeAccessibleName */ .AB)(element, {\n        computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements\n      })\n    });\n  }\n  const labelText = getLabels(document, element).map(label => label.content).join(' ');\n  if (canSuggest('LabelText', method, labelText)) {\n    return makeSuggestion('LabelText', element, labelText, {\n      variant\n    });\n  }\n  const placeholderText = element.getAttribute('placeholder');\n  if (canSuggest('PlaceholderText', method, placeholderText)) {\n    return makeSuggestion('PlaceholderText', element, placeholderText, {\n      variant\n    });\n  }\n  const textContent = normalize(getNodeText(element));\n  if (canSuggest('Text', method, textContent)) {\n    return makeSuggestion('Text', element, textContent, {\n      variant\n    });\n  }\n  if (canSuggest('DisplayValue', method, element.value)) {\n    return makeSuggestion('DisplayValue', element, normalize(element.value), {\n      variant\n    });\n  }\n  const alt = element.getAttribute('alt');\n  if (canSuggest('AltText', method, alt)) {\n    return makeSuggestion('AltText', element, alt, {\n      variant\n    });\n  }\n  const title = element.getAttribute('title');\n  if (canSuggest('Title', method, title)) {\n    return makeSuggestion('Title', element, title, {\n      variant\n    });\n  }\n  const testId = element.getAttribute(getConfig().testIdAttribute);\n  if (canSuggest('TestId', method, testId)) {\n    return makeSuggestion('TestId', element, testId, {\n      variant\n    });\n  }\n  return undefined;\n}\n\n// This is so the stack trace the developer sees is one that's\n// closer to their code (because async stack traces are hard to follow).\nfunction copyStackTrace(target, source) {\n  target.stack = source.stack.replace(source.message, target.message);\n}\nfunction waitFor(callback, _ref) {\n  let {\n    container = getDocument(),\n    timeout = getConfig().asyncUtilTimeout,\n    showOriginalStackTrace = getConfig().showOriginalStackTrace,\n    stackTraceError,\n    interval = 50,\n    onTimeout = error => {\n      error.message = getConfig().getElementError(error.message, container).message;\n      return error;\n    },\n    mutationObserverOptions = {\n      subtree: true,\n      childList: true,\n      attributes: true,\n      characterData: true\n    }\n  } = _ref;\n  if (typeof callback !== 'function') {\n    throw new TypeError('Received `callback` arg must be a function');\n  }\n  return new Promise(async (resolve, reject) => {\n    let lastError, intervalId, observer;\n    let finished = false;\n    let promiseStatus = 'idle';\n    const overallTimeoutTimer = setTimeout(handleTimeout, timeout);\n    const usingJestFakeTimers = jestFakeTimersAreEnabled();\n    if (usingJestFakeTimers) {\n      const {\n        unstable_advanceTimersWrapper: advanceTimersWrapper\n      } = getConfig();\n      checkCallback();\n      // this is a dangerous rule to disable because it could lead to an\n      // infinite loop. However, eslint isn't smart enough to know that we're\n      // setting finished inside `onDone` which will be called when we're done\n      // waiting or when we've timed out.\n      // eslint-disable-next-line no-unmodified-loop-condition\n      while (!finished) {\n        if (!jestFakeTimersAreEnabled()) {\n          const error = new Error(\"Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830\");\n          if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);\n          reject(error);\n          return;\n        }\n\n        // In this rare case, we *need* to wait for in-flight promises\n        // to resolve before continuing. We don't need to take advantage\n        // of parallelization so we're fine.\n        // https://stackoverflow.com/a/59243586/971592\n        // eslint-disable-next-line no-await-in-loop\n        await advanceTimersWrapper(async () => {\n          // we *could* (maybe should?) use `advanceTimersToNextTimer` but it's\n          // possible that could make this loop go on forever if someone is using\n          // third party code that's setting up recursive timers so rapidly that\n          // the user's timer's don't get a chance to resolve. So we'll advance\n          // by an interval instead. (We have a test for this case).\n          jest.advanceTimersByTime(interval);\n        });\n\n        // It's really important that checkCallback is run *before* we flush\n        // in-flight promises. To be honest, I'm not sure why, and I can't quite\n        // think of a way to reproduce the problem in a test, but I spent\n        // an entire day banging my head against a wall on this.\n        checkCallback();\n        if (finished) {\n          break;\n        }\n      }\n    } else {\n      try {\n        checkContainerType(container);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n      intervalId = setInterval(checkRealTimersCallback, interval);\n      const {\n        MutationObserver\n      } = getWindowFromNode(container);\n      observer = new MutationObserver(checkRealTimersCallback);\n      observer.observe(container, mutationObserverOptions);\n      checkCallback();\n    }\n    function onDone(error, result) {\n      finished = true;\n      clearTimeout(overallTimeoutTimer);\n      if (!usingJestFakeTimers) {\n        clearInterval(intervalId);\n        observer.disconnect();\n      }\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    }\n    function checkRealTimersCallback() {\n      if (jestFakeTimersAreEnabled()) {\n        const error = new Error(\"Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830\");\n        if (!showOriginalStackTrace) copyStackTrace(error, stackTraceError);\n        return reject(error);\n      } else {\n        return checkCallback();\n      }\n    }\n    function checkCallback() {\n      if (promiseStatus === 'pending') return;\n      try {\n        const result = runWithExpensiveErrorDiagnosticsDisabled(callback);\n        if (typeof (result == null ? void 0 : result.then) === 'function') {\n          promiseStatus = 'pending';\n          result.then(resolvedValue => {\n            promiseStatus = 'resolved';\n            onDone(null, resolvedValue);\n          }, rejectedValue => {\n            promiseStatus = 'rejected';\n            lastError = rejectedValue;\n          });\n        } else {\n          onDone(null, result);\n        }\n        // If `callback` throws, wait for the next mutation, interval, or timeout.\n      } catch (error) {\n        // Save the most recent callback error to reject the promise with it in the event of a timeout\n        lastError = error;\n      }\n    }\n    function handleTimeout() {\n      let error;\n      if (lastError) {\n        error = lastError;\n        if (!showOriginalStackTrace && error.name === 'TestingLibraryElementError') {\n          copyStackTrace(error, stackTraceError);\n        }\n      } else {\n        error = new Error('Timed out in waitFor.');\n        if (!showOriginalStackTrace) {\n          copyStackTrace(error, stackTraceError);\n        }\n      }\n      onDone(onTimeout(error), null);\n    }\n  });\n}\nfunction waitForWrapper(callback, options) {\n  // create the error here so its stack trace is as close to the\n  // calling code as possible\n  const stackTraceError = new Error('STACK_TRACE_MESSAGE');\n  return getConfig().asyncWrapper(() => waitFor(callback, {\n    stackTraceError,\n    ...options\n  }));\n}\n\n/*\neslint\n  max-lines-per-function: [\"error\", {\"max\": 200}],\n*/\n\nfunction getElementError(message, container) {\n  return getConfig().getElementError(message, container);\n}\nfunction getMultipleElementsFoundError(message, container) {\n  return getElementError(message + \"\\n\\n(If this is intentional, then use the `*AllBy*` variant of the query (like `queryAllByText`, `getAllByText`, or `findAllByText`)).\", container);\n}\nfunction queryAllByAttribute(attribute, container, text, _temp) {\n  let {\n    exact = true,\n    collapseWhitespace,\n    trim,\n    normalizer\n  } = _temp === void 0 ? {} : _temp;\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  return Array.from(container.querySelectorAll(\"[\" + attribute + \"]\")).filter(node => matcher(node.getAttribute(attribute), node, text, matchNormalizer));\n}\nfunction queryByAttribute(attribute, container, text, options) {\n  const els = queryAllByAttribute(attribute, container, text, options);\n  if (els.length > 1) {\n    throw getMultipleElementsFoundError(\"Found multiple elements by [\" + attribute + \"=\" + text + \"]\", container);\n  }\n  return els[0] || null;\n}\n\n// this accepts a query function and returns a function which throws an error\n// if more than one elements is returned, otherwise it returns the first\n// element or null\nfunction makeSingleQuery(allQuery, getMultipleError) {\n  return function (container) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const els = allQuery(container, ...args);\n    if (els.length > 1) {\n      const elementStrings = els.map(element => getElementError(null, element).message).join('\\n\\n');\n      throw getMultipleElementsFoundError(getMultipleError(container, ...args) + \"\\n\\nHere are the matching elements:\\n\\n\" + elementStrings, container);\n    }\n    return els[0] || null;\n  };\n}\nfunction getSuggestionError(suggestion, container) {\n  return getConfig().getElementError(\"A better query is available, try this:\\n\" + suggestion.toString() + \"\\n\", container);\n}\n\n// this accepts a query function and returns a function which throws an error\n// if an empty list of elements is returned\nfunction makeGetAllQuery(allQuery, getMissingError) {\n  return function (container) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    const els = allQuery(container, ...args);\n    if (!els.length) {\n      throw getConfig().getElementError(getMissingError(container, ...args), container);\n    }\n    return els;\n  };\n}\n\n// this accepts a getter query function and returns a function which calls\n// waitFor and passing a function which invokes the getter.\nfunction makeFindQuery(getter) {\n  return (container, text, options, waitForOptions) => {\n    return waitForWrapper(() => {\n      return getter(container, text, options);\n    }, {\n      container,\n      ...waitForOptions\n    });\n  };\n}\nconst wrapSingleQueryWithSuggestion = (query, queryAllByName, variant) => function (container) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n  const element = query(container, ...args);\n  const [{\n    suggest = getConfig().throwSuggestions\n  } = {}] = args.slice(-1);\n  if (element && suggest) {\n    const suggestion = getSuggestedQuery(element, variant);\n    if (suggestion && !queryAllByName.endsWith(suggestion.queryName)) {\n      throw getSuggestionError(suggestion.toString(), container);\n    }\n  }\n  return element;\n};\nconst wrapAllByQueryWithSuggestion = (query, queryAllByName, variant) => function (container) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  const els = query(container, ...args);\n  const [{\n    suggest = getConfig().throwSuggestions\n  } = {}] = args.slice(-1);\n  if (els.length && suggest) {\n    // get a unique list of all suggestion messages.  We are only going to make a suggestion if\n    // all the suggestions are the same\n    const uniqueSuggestionMessages = [...new Set(els.map(element => {\n      var _getSuggestedQuery;\n      return (_getSuggestedQuery = getSuggestedQuery(element, variant)) == null ? void 0 : _getSuggestedQuery.toString();\n    }))];\n    if (\n    // only want to suggest if all the els have the same suggestion.\n    uniqueSuggestionMessages.length === 1 && !queryAllByName.endsWith(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO: Can this be null at runtime?\n    getSuggestedQuery(els[0], variant).queryName)) {\n      throw getSuggestionError(uniqueSuggestionMessages[0], container);\n    }\n  }\n  return els;\n};\n\n// TODO: This deviates from the published declarations\n// However, the implementation always required a dyadic (after `container`) not variadic `queryAllBy` considering the implementation of `makeFindQuery`\n// This is at least statically true and can be verified by accepting `QueryMethod<Arguments, HTMLElement[]>`\nfunction buildQueries(queryAllBy, getMultipleError, getMissingError) {\n  const queryBy = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllBy, getMultipleError), queryAllBy.name, 'query');\n  const getAllBy = makeGetAllQuery(queryAllBy, getMissingError);\n  const getBy = makeSingleQuery(getAllBy, getMultipleError);\n  const getByWithSuggestions = wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'get');\n  const getAllWithSuggestions = wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name.replace('query', 'get'), 'getAll');\n  const findAllBy = makeFindQuery(wrapAllByQueryWithSuggestion(getAllBy, queryAllBy.name, 'findAll'));\n  const findBy = makeFindQuery(wrapSingleQueryWithSuggestion(getBy, queryAllBy.name, 'find'));\n  return [queryBy, getAllWithSuggestions, getByWithSuggestions, findAllBy, findBy];\n}\n\nvar queryHelpers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getElementError: getElementError,\n  wrapAllByQueryWithSuggestion: wrapAllByQueryWithSuggestion,\n  wrapSingleQueryWithSuggestion: wrapSingleQueryWithSuggestion,\n  getMultipleElementsFoundError: getMultipleElementsFoundError,\n  queryAllByAttribute: queryAllByAttribute,\n  queryByAttribute: queryByAttribute,\n  makeSingleQuery: makeSingleQuery,\n  makeGetAllQuery: makeGetAllQuery,\n  makeFindQuery: makeFindQuery,\n  buildQueries: buildQueries\n});\n\nfunction queryAllLabels(container) {\n  return Array.from(container.querySelectorAll('label,input')).map(node => {\n    return {\n      node,\n      textToMatch: getLabelContent(node)\n    };\n  }).filter(_ref => {\n    let {\n      textToMatch\n    } = _ref;\n    return textToMatch !== null;\n  });\n}\nconst queryAllLabelsByText = function (container, text, _temp) {\n  let {\n    exact = true,\n    trim,\n    collapseWhitespace,\n    normalizer\n  } = _temp === void 0 ? {} : _temp;\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const textToMatchByLabels = queryAllLabels(container);\n  return textToMatchByLabels.filter(_ref2 => {\n    let {\n      node,\n      textToMatch\n    } = _ref2;\n    return matcher(textToMatch, node, text, matchNormalizer);\n  }).map(_ref3 => {\n    let {\n      node\n    } = _ref3;\n    return node;\n  });\n};\nconst queryAllByLabelText = function (container, text, _temp2) {\n  let {\n    selector = '*',\n    exact = true,\n    collapseWhitespace,\n    trim,\n    normalizer\n  } = _temp2 === void 0 ? {} : _temp2;\n  checkContainerType(container);\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const matchingLabelledElements = Array.from(container.querySelectorAll('*')).filter(element => {\n    return getRealLabels(element).length || element.hasAttribute('aria-labelledby');\n  }).reduce((labelledElements, labelledElement) => {\n    const labelList = getLabels(container, labelledElement, {\n      selector\n    });\n    labelList.filter(label => Boolean(label.formControl)).forEach(label => {\n      if (matcher(label.content, label.formControl, text, matchNormalizer) && label.formControl) {\n        labelledElements.push(label.formControl);\n      }\n    });\n    const labelsValue = labelList.filter(label => Boolean(label.content)).map(label => label.content);\n    if (matcher(labelsValue.join(' '), labelledElement, text, matchNormalizer)) {\n      labelledElements.push(labelledElement);\n    }\n    if (labelsValue.length > 1) {\n      labelsValue.forEach((labelValue, index) => {\n        if (matcher(labelValue, labelledElement, text, matchNormalizer)) {\n          labelledElements.push(labelledElement);\n        }\n        const labelsFiltered = [...labelsValue];\n        labelsFiltered.splice(index, 1);\n        if (labelsFiltered.length > 1) {\n          if (matcher(labelsFiltered.join(' '), labelledElement, text, matchNormalizer)) {\n            labelledElements.push(labelledElement);\n          }\n        }\n      });\n    }\n    return labelledElements;\n  }, []).concat(queryAllByAttribute('aria-label', container, text, {\n    exact,\n    normalizer: matchNormalizer\n  }));\n  return Array.from(new Set(matchingLabelledElements)).filter(element => element.matches(selector));\n};\n\n// the getAll* query would normally look like this:\n// const getAllByLabelText = makeGetAllQuery(\n//   queryAllByLabelText,\n//   (c, text) => `Unable to find a label with the text of: ${text}`,\n// )\n// however, we can give a more helpful error message than the generic one,\n// so we're writing this one out by hand.\nconst getAllByLabelText = function (container, text) {\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n  const els = queryAllByLabelText(container, text, ...rest);\n  if (!els.length) {\n    const labels = queryAllLabelsByText(container, text, ...rest);\n    if (labels.length) {\n      const tagNames = labels.map(label => getTagNameOfElementAssociatedWithLabelViaFor(container, label)).filter(tagName => !!tagName);\n      if (tagNames.length) {\n        throw getConfig().getElementError(tagNames.map(tagName => \"Found a label with the text of: \" + text + \", however the element associated with this label (<\" + tagName + \" />) is non-labellable [https://html.spec.whatwg.org/multipage/forms.html#category-label]. If you really need to label a <\" + tagName + \" />, you can use aria-label or aria-labelledby instead.\").join('\\n\\n'), container);\n      } else {\n        throw getConfig().getElementError(\"Found a label with the text of: \" + text + \", however no form control was found associated to that label. Make sure you're using the \\\"for\\\" attribute or \\\"aria-labelledby\\\" attribute correctly.\", container);\n      }\n    } else {\n      throw getConfig().getElementError(\"Unable to find a label with the text of: \" + text, container);\n    }\n  }\n  return els;\n};\nfunction getTagNameOfElementAssociatedWithLabelViaFor(container, label) {\n  const htmlFor = label.getAttribute('for');\n  if (!htmlFor) {\n    return null;\n  }\n  const element = container.querySelector(\"[id=\\\"\" + htmlFor + \"\\\"]\");\n  return element ? element.tagName.toLowerCase() : null;\n}\n\n// the reason mentioned above is the same reason we're not using buildQueries\nconst getMultipleError$7 = (c, text) => \"Found multiple elements with the text of: \" + text;\nconst queryByLabelText = wrapSingleQueryWithSuggestion(makeSingleQuery(queryAllByLabelText, getMultipleError$7), queryAllByLabelText.name, 'query');\nconst getByLabelText = makeSingleQuery(getAllByLabelText, getMultipleError$7);\nconst findAllByLabelText = makeFindQuery(wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, 'findAll'));\nconst findByLabelText = makeFindQuery(wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, 'find'));\nconst getAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(getAllByLabelText, getAllByLabelText.name, 'getAll');\nconst getByLabelTextWithSuggestions = wrapSingleQueryWithSuggestion(getByLabelText, getAllByLabelText.name, 'get');\nconst queryAllByLabelTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByLabelText, queryAllByLabelText.name, 'queryAll');\n\nconst queryAllByPlaceholderText = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  checkContainerType(args[0]);\n  return queryAllByAttribute('placeholder', ...args);\n};\nconst getMultipleError$6 = (c, text) => \"Found multiple elements with the placeholder text of: \" + text;\nconst getMissingError$6 = (c, text) => \"Unable to find an element with the placeholder text of: \" + text;\nconst queryAllByPlaceholderTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');\nconst [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = buildQueries(queryAllByPlaceholderText, getMultipleError$6, getMissingError$6);\n\nconst queryAllByText = function (container, text, _temp) {\n  let {\n    selector = '*',\n    exact = true,\n    collapseWhitespace,\n    trim,\n    ignore = getConfig().defaultIgnore,\n    normalizer\n  } = _temp === void 0 ? {} : _temp;\n  checkContainerType(container);\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher(getNodeText(node), node, text, matchNormalizer));\n};\nconst getMultipleError$5 = (c, text) => \"Found multiple elements with the text: \" + text;\nconst getMissingError$5 = function (c, text, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector != null ? selector : '*') !== '*';\n  return \"Unable to find an element with the text: \" + (isNormalizedDifferent ? normalizedText + \" (normalized from '\" + text + \"')\" : text) + (isCustomSelector ? \", which matches selector '\" + selector + \"'\" : '') + \". This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.\";\n};\nconst queryAllByTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByText, queryAllByText.name, 'queryAll');\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = buildQueries(queryAllByText, getMultipleError$5, getMissingError$5);\n\nconst queryAllByDisplayValue = function (container, value, _temp) {\n  let {\n    exact = true,\n    collapseWhitespace,\n    trim,\n    normalizer\n  } = _temp === void 0 ? {} : _temp;\n  checkContainerType(container);\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  return Array.from(container.querySelectorAll(\"input,textarea,select\")).filter(node => {\n    if (node.tagName === 'SELECT') {\n      const selectedOptions = Array.from(node.options).filter(option => option.selected);\n      return selectedOptions.some(optionNode => matcher(getNodeText(optionNode), optionNode, value, matchNormalizer));\n    } else {\n      return matcher(node.value, node, value, matchNormalizer);\n    }\n  });\n};\nconst getMultipleError$4 = (c, value) => \"Found multiple elements with the display value: \" + value + \".\";\nconst getMissingError$4 = (c, value) => \"Unable to find an element with the display value: \" + value + \".\";\nconst queryAllByDisplayValueWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');\nconst [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = buildQueries(queryAllByDisplayValue, getMultipleError$4, getMissingError$4);\n\n// Valid tags are img, input, area and custom elements\nconst VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;\nconst queryAllByAltText = function (container, alt, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  checkContainerType(container);\n  return queryAllByAttribute('alt', container, alt, options).filter(node => VALID_TAG_REGEXP.test(node.tagName));\n};\nconst getMultipleError$3 = (c, alt) => \"Found multiple elements with the alt text: \" + alt;\nconst getMissingError$3 = (c, alt) => \"Unable to find an element with the alt text: \" + alt;\nconst queryAllByAltTextWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByAltText, queryAllByAltText.name, 'queryAll');\nconst [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = buildQueries(queryAllByAltText, getMultipleError$3, getMissingError$3);\n\nconst isSvgTitle = node => {\n  var _node$parentElement;\n  return node.tagName.toLowerCase() === 'title' && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === 'svg';\n};\nconst queryAllByTitle = function (container, text, _temp) {\n  let {\n    exact = true,\n    collapseWhitespace,\n    trim,\n    normalizer\n  } = _temp === void 0 ? {} : _temp;\n  checkContainerType(container);\n  const matcher = exact ? matches : fuzzyMatches;\n  const matchNormalizer = makeNormalizer({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  return Array.from(container.querySelectorAll('[title], svg > title')).filter(node => matcher(node.getAttribute('title'), node, text, matchNormalizer) || isSvgTitle(node) && matcher(getNodeText(node), node, text, matchNormalizer));\n};\nconst getMultipleError$2 = (c, title) => \"Found multiple elements with the title: \" + title + \".\";\nconst getMissingError$2 = (c, title) => \"Unable to find an element with the title: \" + title + \".\";\nconst queryAllByTitleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTitle, queryAllByTitle.name, 'queryAll');\nconst [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = buildQueries(queryAllByTitle, getMultipleError$2, getMissingError$2);\n\n/* eslint-disable complexity */\nconst queryAllByRole = function (container, role, _temp) {\n  let {\n    hidden = getConfig().defaultHidden,\n    name,\n    description,\n    queryFallbacks = false,\n    selected,\n    busy,\n    checked,\n    pressed,\n    current,\n    level,\n    expanded,\n    value: {\n      now: valueNow,\n      min: valueMin,\n      max: valueMax,\n      text: valueText\n    } = {}\n  } = _temp === void 0 ? {} : _temp;\n  checkContainerType(container);\n  if (selected !== undefined) {\n    var _allRoles$get;\n    // guard against unknown roles\n    if (((_allRoles$get = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get.props['aria-selected']) === undefined) {\n      throw new Error(\"\\\"aria-selected\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (busy !== undefined) {\n    var _allRoles$get2;\n    // guard against unknown roles\n    if (((_allRoles$get2 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get2.props['aria-busy']) === undefined) {\n      throw new Error(\"\\\"aria-busy\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (checked !== undefined) {\n    var _allRoles$get3;\n    // guard against unknown roles\n    if (((_allRoles$get3 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get3.props['aria-checked']) === undefined) {\n      throw new Error(\"\\\"aria-checked\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (pressed !== undefined) {\n    var _allRoles$get4;\n    // guard against unknown roles\n    if (((_allRoles$get4 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get4.props['aria-pressed']) === undefined) {\n      throw new Error(\"\\\"aria-pressed\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (current !== undefined) {\n    var _allRoles$get5;\n    /* istanbul ignore next */\n    // guard against unknown roles\n    // All currently released ARIA versions support `aria-current` on all roles.\n    // Leaving this for symetry and forward compatibility\n    if (((_allRoles$get5 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get5.props['aria-current']) === undefined) {\n      throw new Error(\"\\\"aria-current\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (level !== undefined) {\n    // guard against using `level` option with any role other than `heading`\n    if (role !== 'heading') {\n      throw new Error(\"Role \\\"\" + role + \"\\\" cannot have \\\"level\\\" property.\");\n    }\n  }\n  if (valueNow !== undefined) {\n    var _allRoles$get6;\n    // guard against unknown roles\n    if (((_allRoles$get6 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get6.props['aria-valuenow']) === undefined) {\n      throw new Error(\"\\\"aria-valuenow\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (valueMax !== undefined) {\n    var _allRoles$get7;\n    // guard against unknown roles\n    if (((_allRoles$get7 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get7.props['aria-valuemax']) === undefined) {\n      throw new Error(\"\\\"aria-valuemax\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (valueMin !== undefined) {\n    var _allRoles$get8;\n    // guard against unknown roles\n    if (((_allRoles$get8 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get8.props['aria-valuemin']) === undefined) {\n      throw new Error(\"\\\"aria-valuemin\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (valueText !== undefined) {\n    var _allRoles$get9;\n    // guard against unknown roles\n    if (((_allRoles$get9 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get9.props['aria-valuetext']) === undefined) {\n      throw new Error(\"\\\"aria-valuetext\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  if (expanded !== undefined) {\n    var _allRoles$get10;\n    // guard against unknown roles\n    if (((_allRoles$get10 = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roles */ .uJ.get(role)) == null ? void 0 : _allRoles$get10.props['aria-expanded']) === undefined) {\n      throw new Error(\"\\\"aria-expanded\\\" is not supported on role \\\"\" + role + \"\\\".\");\n    }\n  }\n  const subtreeIsInaccessibleCache = new WeakMap();\n  function cachedIsSubtreeInaccessible(element) {\n    if (!subtreeIsInaccessibleCache.has(element)) {\n      subtreeIsInaccessibleCache.set(element, isSubtreeInaccessible(element));\n    }\n    return subtreeIsInaccessibleCache.get(element);\n  }\n  return Array.from(container.querySelectorAll(\n  // Only query elements that can be matched by the following filters\n  makeRoleSelector(role))).filter(node => {\n    const isRoleSpecifiedExplicitly = node.hasAttribute('role');\n    if (isRoleSpecifiedExplicitly) {\n      const roleValue = node.getAttribute('role');\n      if (queryFallbacks) {\n        return roleValue.split(' ').filter(Boolean).some(roleAttributeToken => roleAttributeToken === role);\n      }\n      // other wise only send the first token to match\n      const [firstRoleAttributeToken] = roleValue.split(' ');\n      return firstRoleAttributeToken === role;\n    }\n    const implicitRoles = getImplicitAriaRoles(node);\n    return implicitRoles.some(implicitRole => {\n      return implicitRole === role;\n    });\n  }).filter(element => {\n    if (selected !== undefined) {\n      return selected === computeAriaSelected(element);\n    }\n    if (busy !== undefined) {\n      return busy === computeAriaBusy(element);\n    }\n    if (checked !== undefined) {\n      return checked === computeAriaChecked(element);\n    }\n    if (pressed !== undefined) {\n      return pressed === computeAriaPressed(element);\n    }\n    if (current !== undefined) {\n      return current === computeAriaCurrent(element);\n    }\n    if (expanded !== undefined) {\n      return expanded === computeAriaExpanded(element);\n    }\n    if (level !== undefined) {\n      return level === computeHeadingLevel(element);\n    }\n    if (valueNow !== undefined || valueMax !== undefined || valueMin !== undefined || valueText !== undefined) {\n      let valueMatches = true;\n      if (valueNow !== undefined) {\n        valueMatches && (valueMatches = valueNow === computeAriaValueNow(element));\n      }\n      if (valueMax !== undefined) {\n        valueMatches && (valueMatches = valueMax === computeAriaValueMax(element));\n      }\n      if (valueMin !== undefined) {\n        valueMatches && (valueMatches = valueMin === computeAriaValueMin(element));\n      }\n      if (valueText !== undefined) {\n        var _computeAriaValueText;\n        valueMatches && (valueMatches = matches((_computeAriaValueText = computeAriaValueText(element)) != null ? _computeAriaValueText : null, element, valueText, text => text));\n      }\n      return valueMatches;\n    }\n    // don't care if aria attributes are unspecified\n    return true;\n  }).filter(element => {\n    if (name === undefined) {\n      // Don't care\n      return true;\n    }\n    return matches((0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__/* .computeAccessibleName */ .AB)(element, {\n      computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements\n    }), element, name, text => text);\n  }).filter(element => {\n    if (description === undefined) {\n      // Don't care\n      return true;\n    }\n    return matches((0,dom_accessibility_api__WEBPACK_IMPORTED_MODULE_1__/* .computeAccessibleDescription */ .b)(element, {\n      computedStyleSupportsPseudoElements: getConfig().computedStyleSupportsPseudoElements\n    }), element, description, text => text);\n  }).filter(element => {\n    return hidden === false ? isInaccessible(element, {\n      isSubtreeInaccessible: cachedIsSubtreeInaccessible\n    }) === false : true;\n  });\n};\nfunction makeRoleSelector(role) {\n  var _roleElements$get;\n  const explicitRoleSelector = \"*[role~=\\\"\" + role + \"\\\"]\";\n  const roleRelations = (_roleElements$get = aria_query__WEBPACK_IMPORTED_MODULE_2__/* .roleElements */ .UN.get(role)) != null ? _roleElements$get : new Set();\n  const implicitRoleSelectors = new Set(Array.from(roleRelations).map(_ref => {\n    let {\n      name\n    } = _ref;\n    return name;\n  }));\n\n  // Current transpilation config sometimes assumes `...` is always applied to arrays.\n  // `...` is equivalent to `Array.prototype.concat` for arrays.\n  // If you replace this code with `[explicitRoleSelector, ...implicitRoleSelectors]`, make sure every transpilation target retains the `...` in favor of `Array.prototype.concat`.\n  return [explicitRoleSelector].concat(Array.from(implicitRoleSelectors)).join(',');\n}\nconst getNameHint = name => {\n  let nameHint = '';\n  if (name === undefined) {\n    nameHint = '';\n  } else if (typeof name === 'string') {\n    nameHint = \" and name \\\"\" + name + \"\\\"\";\n  } else {\n    nameHint = \" and name `\" + name + \"`\";\n  }\n  return nameHint;\n};\nconst getMultipleError$1 = function (c, role, _temp2) {\n  let {\n    name\n  } = _temp2 === void 0 ? {} : _temp2;\n  return \"Found multiple elements with the role \\\"\" + role + \"\\\"\" + getNameHint(name);\n};\nconst getMissingError$1 = function (container, role, _temp3) {\n  let {\n    hidden = getConfig().defaultHidden,\n    name,\n    description\n  } = _temp3 === void 0 ? {} : _temp3;\n  if (getConfig()._disableExpensiveErrorDiagnostics) {\n    return \"Unable to find role=\\\"\" + role + \"\\\"\" + getNameHint(name);\n  }\n  let roles = '';\n  Array.from(container.children).forEach(childElement => {\n    roles += prettyRoles(childElement, {\n      hidden,\n      includeDescription: description !== undefined\n    });\n  });\n  let roleMessage;\n  if (roles.length === 0) {\n    if (hidden === false) {\n      roleMessage = 'There are no accessible roles. But there might be some inaccessible roles. ' + 'If you wish to access them, then set the `hidden` option to `true`. ' + 'Learn more about this here: https://testing-library.com/docs/dom-testing-library/api-queries#byrole';\n    } else {\n      roleMessage = 'There are no available roles.';\n    }\n  } else {\n    roleMessage = (\"\\nHere are the \" + (hidden === false ? 'accessible' : 'available') + \" roles:\\n\\n  \" + roles.replace(/\\n/g, '\\n  ').replace(/\\n\\s\\s\\n/g, '\\n\\n') + \"\\n\").trim();\n  }\n  let nameHint = '';\n  if (name === undefined) {\n    nameHint = '';\n  } else if (typeof name === 'string') {\n    nameHint = \" and name \\\"\" + name + \"\\\"\";\n  } else {\n    nameHint = \" and name `\" + name + \"`\";\n  }\n  let descriptionHint = '';\n  if (description === undefined) {\n    descriptionHint = '';\n  } else if (typeof description === 'string') {\n    descriptionHint = \" and description \\\"\" + description + \"\\\"\";\n  } else {\n    descriptionHint = \" and description `\" + description + \"`\";\n  }\n  return (\"\\nUnable to find an \" + (hidden === false ? 'accessible ' : '') + \"element with the role \\\"\" + role + \"\\\"\" + nameHint + descriptionHint + \"\\n\\n\" + roleMessage).trim();\n};\nconst queryAllByRoleWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByRole, queryAllByRole.name, 'queryAll');\nconst [queryByRole, getAllByRole, getByRole, findAllByRole, findByRole] = buildQueries(queryAllByRole, getMultipleError$1, getMissingError$1);\n\nconst getTestIdAttribute = () => getConfig().testIdAttribute;\nconst queryAllByTestId = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  checkContainerType(args[0]);\n  return queryAllByAttribute(getTestIdAttribute(), ...args);\n};\nconst getMultipleError = (c, id) => \"Found multiple elements by: [\" + getTestIdAttribute() + \"=\\\"\" + id + \"\\\"]\";\nconst getMissingError = (c, id) => \"Unable to find an element by: [\" + getTestIdAttribute() + \"=\\\"\" + id + \"\\\"]\";\nconst queryAllByTestIdWithSuggestions = wrapAllByQueryWithSuggestion(queryAllByTestId, queryAllByTestId.name, 'queryAll');\nconst [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = buildQueries(queryAllByTestId, getMultipleError, getMissingError);\n\nvar queries = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  queryAllByLabelText: queryAllByLabelTextWithSuggestions,\n  queryByLabelText: queryByLabelText,\n  getAllByLabelText: getAllByLabelTextWithSuggestions,\n  getByLabelText: getByLabelTextWithSuggestions,\n  findAllByLabelText: findAllByLabelText,\n  findByLabelText: findByLabelText,\n  queryByPlaceholderText: queryByPlaceholderText,\n  queryAllByPlaceholderText: queryAllByPlaceholderTextWithSuggestions,\n  getByPlaceholderText: getByPlaceholderText,\n  getAllByPlaceholderText: getAllByPlaceholderText,\n  findAllByPlaceholderText: findAllByPlaceholderText,\n  findByPlaceholderText: findByPlaceholderText,\n  queryByText: queryByText,\n  queryAllByText: queryAllByTextWithSuggestions,\n  getByText: getByText,\n  getAllByText: getAllByText,\n  findAllByText: findAllByText,\n  findByText: findByText,\n  queryByDisplayValue: queryByDisplayValue,\n  queryAllByDisplayValue: queryAllByDisplayValueWithSuggestions,\n  getByDisplayValue: getByDisplayValue,\n  getAllByDisplayValue: getAllByDisplayValue,\n  findAllByDisplayValue: findAllByDisplayValue,\n  findByDisplayValue: findByDisplayValue,\n  queryByAltText: queryByAltText,\n  queryAllByAltText: queryAllByAltTextWithSuggestions,\n  getByAltText: getByAltText,\n  getAllByAltText: getAllByAltText,\n  findAllByAltText: findAllByAltText,\n  findByAltText: findByAltText,\n  queryByTitle: queryByTitle,\n  queryAllByTitle: queryAllByTitleWithSuggestions,\n  getByTitle: getByTitle,\n  getAllByTitle: getAllByTitle,\n  findAllByTitle: findAllByTitle,\n  findByTitle: findByTitle,\n  queryByRole: queryByRole,\n  queryAllByRole: queryAllByRoleWithSuggestions,\n  getAllByRole: getAllByRole,\n  getByRole: getByRole,\n  findAllByRole: findAllByRole,\n  findByRole: findByRole,\n  queryByTestId: queryByTestId,\n  queryAllByTestId: queryAllByTestIdWithSuggestions,\n  getByTestId: getByTestId,\n  getAllByTestId: getAllByTestId,\n  findAllByTestId: findAllByTestId,\n  findByTestId: findByTestId\n});\n\n/**\n * @typedef {{[key: string]: Function}} FuncMap\n */\n\n/**\n * @param {HTMLElement} element container\n * @param {FuncMap} queries object of functions\n * @param {Object} initialValue for reducer\n * @returns {FuncMap} returns object of functions bound to container\n */\nfunction getQueriesForElement(element, queries$1, initialValue) {\n  if (queries$1 === void 0) {\n    queries$1 = queries;\n  }\n  if (initialValue === void 0) {\n    initialValue = {};\n  }\n  return Object.keys(queries$1).reduce((helpers, key) => {\n    const fn = queries$1[key];\n    helpers[key] = fn.bind(null, element);\n    return helpers;\n  }, initialValue);\n}\n\nconst isRemoved = result => !result || Array.isArray(result) && !result.length;\n\n// Check if the element is not present.\n// As the name implies, waitForElementToBeRemoved should check `present` --\x3e `removed`\nfunction initialCheck(elements) {\n  if (isRemoved(elements)) {\n    throw new Error('The element(s) given to waitForElementToBeRemoved are already removed. waitForElementToBeRemoved requires that the element(s) exist(s) before waiting for removal.');\n  }\n}\nasync function waitForElementToBeRemoved(callback, options) {\n  // created here so we get a nice stacktrace\n  const timeoutError = new Error('Timed out in waitForElementToBeRemoved.');\n  if (typeof callback !== 'function') {\n    initialCheck(callback);\n    const elements = Array.isArray(callback) ? callback : [callback];\n    const getRemainingElements = elements.map(element => {\n      let parent = element.parentElement;\n      if (parent === null) return () => null;\n      while (parent.parentElement) parent = parent.parentElement;\n      return () => parent.contains(element) ? element : null;\n    });\n    callback = () => getRemainingElements.map(c => c()).filter(Boolean);\n  }\n  initialCheck(callback());\n  return waitForWrapper(() => {\n    let result;\n    try {\n      result = callback();\n    } catch (error) {\n      if (error.name === 'TestingLibraryElementError') {\n        return undefined;\n      }\n      throw error;\n    }\n    if (!isRemoved(result)) {\n      throw timeoutError;\n    }\n    return undefined;\n  }, options);\n}\n\n/*\neslint\n  require-await: \"off\"\n*/\n\nconst eventMap = {\n  // Clipboard Events\n  copy: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  cut: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  paste: {\n    EventType: 'ClipboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  // Composition Events\n  compositionEnd: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  compositionStart: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  compositionUpdate: {\n    EventType: 'CompositionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  // Keyboard Events\n  keyDown: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0,\n      composed: true\n    }\n  },\n  keyPress: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0,\n      composed: true\n    }\n  },\n  keyUp: {\n    EventType: 'KeyboardEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      charCode: 0,\n      composed: true\n    }\n  },\n  // Focus Events\n  focus: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false,\n      composed: true\n    }\n  },\n  blur: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false,\n      composed: true\n    }\n  },\n  focusIn: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  focusOut: {\n    EventType: 'FocusEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  // Form Events\n  change: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  input: {\n    EventType: 'InputEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  invalid: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: true\n    }\n  },\n  submit: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  reset: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  // Mouse Events\n  click: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      button: 0,\n      composed: true\n    }\n  },\n  contextMenu: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  dblClick: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  drag: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  dragEnd: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  dragEnter: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  dragExit: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  dragLeave: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  dragOver: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  dragStart: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  drop: {\n    EventType: 'DragEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  mouseDown: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  mouseEnter: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false,\n      composed: true\n    }\n  },\n  mouseLeave: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false,\n      composed: true\n    }\n  },\n  mouseMove: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  mouseOut: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  mouseOver: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  mouseUp: {\n    EventType: 'MouseEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  // Selection Events\n  select: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Touch Events\n  touchCancel: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  touchEnd: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  touchMove: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  touchStart: {\n    EventType: 'TouchEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  // UI Events\n  resize: {\n    EventType: 'UIEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  scroll: {\n    EventType: 'UIEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Wheel Events\n  wheel: {\n    EventType: 'WheelEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  // Media Events\n  abort: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  canPlay: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  canPlayThrough: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  durationChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  emptied: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  encrypted: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  ended: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  loadedData: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  loadedMetadata: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  loadStart: {\n    EventType: 'ProgressEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  pause: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  play: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  playing: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  progress: {\n    EventType: 'ProgressEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  rateChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  seeked: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  seeking: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  stalled: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  suspend: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  timeUpdate: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  volumeChange: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  waiting: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Events\n  load: {\n    // TODO: load events can be UIEvent or Event depending on what generated them\n    // This is where this abstraction breaks down.\n    // But the common targets are <img />, <script /> and window.\n    // Neither of these targets receive a UIEvent\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  error: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  // Animation Events\n  animationStart: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  animationEnd: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  animationIteration: {\n    EventType: 'AnimationEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // Transition Events\n  transitionCancel: {\n    EventType: 'TransitionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  transitionEnd: {\n    EventType: 'TransitionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true\n    }\n  },\n  transitionRun: {\n    EventType: 'TransitionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  transitionStart: {\n    EventType: 'TransitionEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // pointer events\n  pointerOver: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  pointerEnter: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  pointerDown: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  pointerMove: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  pointerUp: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  pointerCancel: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  pointerOut: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    }\n  },\n  pointerLeave: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  gotPointerCapture: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  lostPointerCapture: {\n    EventType: 'PointerEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false,\n      composed: true\n    }\n  },\n  // history events\n  popState: {\n    EventType: 'PopStateEvent',\n    defaultInit: {\n      bubbles: true,\n      cancelable: false\n    }\n  },\n  // window events\n  offline: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  },\n  online: {\n    EventType: 'Event',\n    defaultInit: {\n      bubbles: false,\n      cancelable: false\n    }\n  }\n};\nconst eventAliasMap = {\n  doubleClick: 'dblClick'\n};\n\nfunction fireEvent(element, event) {\n  return getConfig().eventWrapper(() => {\n    if (!event) {\n      throw new Error(\"Unable to fire an event - please provide an event object.\");\n    }\n    if (!element) {\n      throw new Error(\"Unable to fire a \\\"\" + event.type + \"\\\" event - please provide a DOM element.\");\n    }\n    return element.dispatchEvent(event);\n  });\n}\nfunction createEvent(eventName, node, init, _temp) {\n  let {\n    EventType = 'Event',\n    defaultInit = {}\n  } = _temp === void 0 ? {} : _temp;\n  if (!node) {\n    throw new Error(\"Unable to fire a \\\"\" + eventName + \"\\\" event - please provide a DOM element.\");\n  }\n  const eventInit = {\n    ...defaultInit,\n    ...init\n  };\n  const {\n    target: {\n      value,\n      files,\n      ...targetProperties\n    } = {}\n  } = eventInit;\n  if (value !== undefined) {\n    setNativeValue(node, value);\n  }\n  if (files !== undefined) {\n    // input.files is a read-only property so this is not allowed:\n    // input.files = [file]\n    // so we have to use this workaround to set the property\n    Object.defineProperty(node, 'files', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: files\n    });\n  }\n  Object.assign(node, targetProperties);\n  const window = getWindowFromNode(node);\n  const EventConstructor = window[EventType] || window.Event;\n  let event;\n  /* istanbul ignore else  */\n  if (typeof EventConstructor === 'function') {\n    event = new EventConstructor(eventName, eventInit);\n  } else {\n    // IE11 polyfill from https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n    event = window.document.createEvent(EventType);\n    const {\n      bubbles,\n      cancelable,\n      detail,\n      ...otherInit\n    } = eventInit;\n    event.initEvent(eventName, bubbles, cancelable, detail);\n    Object.keys(otherInit).forEach(eventKey => {\n      event[eventKey] = otherInit[eventKey];\n    });\n  }\n\n  // DataTransfer is not supported in jsdom: https://github.com/jsdom/jsdom/issues/1568\n  const dataTransferProperties = ['dataTransfer', 'clipboardData'];\n  dataTransferProperties.forEach(dataTransferKey => {\n    const dataTransferValue = eventInit[dataTransferKey];\n    if (typeof dataTransferValue === 'object') {\n      /* istanbul ignore if  */\n      if (typeof window.DataTransfer === 'function') {\n        Object.defineProperty(event, dataTransferKey, {\n          value: Object.getOwnPropertyNames(dataTransferValue).reduce((acc, propName) => {\n            Object.defineProperty(acc, propName, {\n              value: dataTransferValue[propName]\n            });\n            return acc;\n          }, new window.DataTransfer())\n        });\n      } else {\n        Object.defineProperty(event, dataTransferKey, {\n          value: dataTransferValue\n        });\n      }\n    }\n  });\n  return event;\n}\nObject.keys(eventMap).forEach(key => {\n  const {\n    EventType,\n    defaultInit\n  } = eventMap[key];\n  const eventName = key.toLowerCase();\n  createEvent[key] = (node, init) => createEvent(eventName, node, init, {\n    EventType,\n    defaultInit\n  });\n  fireEvent[key] = (node, init) => fireEvent(node, createEvent[key](node, init));\n});\n\n// function written after some investigation here:\n// https://github.com/facebook/react/issues/10135#issuecomment-401496776\nfunction setNativeValue(element, value) {\n  const {\n    set: valueSetter\n  } = Object.getOwnPropertyDescriptor(element, 'value') || {};\n  const prototype = Object.getPrototypeOf(element);\n  const {\n    set: prototypeValueSetter\n  } = Object.getOwnPropertyDescriptor(prototype, 'value') || {};\n  if (prototypeValueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  } else {\n    /* istanbul ignore if */\n    // eslint-disable-next-line no-lonely-if -- Can't be ignored by istanbul otherwise\n    if (valueSetter) {\n      valueSetter.call(element, value);\n    } else {\n      throw new Error('The given element does not have a value setter');\n    }\n  }\n}\nObject.keys(eventAliasMap).forEach(aliasKey => {\n  const key = eventAliasMap[aliasKey];\n  fireEvent[aliasKey] = function () {\n    return fireEvent[key](...arguments);\n  };\n});\n\n/* eslint complexity:[\"error\", 9] */\n\n// WARNING: `lz-string` only has a default export but statically we assume named exports are allowd\nfunction unindent(string) {\n  // remove white spaces first, to save a few bytes.\n  // testing-playground will reformat on load any ways.\n  return string.replace(/[ \\t]*[\\n][ \\t]*/g, '\\n');\n}\nfunction encode(value) {\n  return lz_string__WEBPACK_IMPORTED_MODULE_3___default().compressToEncodedURIComponent(unindent(value));\n}\nfunction getPlaygroundUrl(markup) {\n  return \"https://testing-playground.com/#markup=\" + encode(markup);\n}\nconst debug = (element, maxLength, options) => Array.isArray(element) ? element.forEach(el => logDOM(el, maxLength, options)) : logDOM(element, maxLength, options);\nconst logTestingPlaygroundURL = function (element) {\n  if (element === void 0) {\n    element = getDocument().body;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!element || !('innerHTML' in element)) {\n    console.log(\"The element you're providing isn't a valid DOM element.\");\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (!element.innerHTML) {\n    console.log(\"The provided element doesn't have any children.\");\n    return;\n  }\n  const playgroundUrl = getPlaygroundUrl(element.innerHTML);\n  console.log(\"Open this URL in your browser\\n\\n\" + playgroundUrl);\n  return playgroundUrl;\n};\nconst initialValue = {\n  debug,\n  logTestingPlaygroundURL\n};\nconst screen = typeof document !== 'undefined' && document.body // eslint-disable-line @typescript-eslint/no-unnecessary-condition\n? getQueriesForElement(document.body, queries, initialValue) : Object.keys(queries).reduce((helpers, key) => {\n  // `key` is for all intents and purposes the type of keyof `helpers`, which itself is the type of `initialValue` plus incoming properties from `queries`\n  // if `Object.keys(something)` returned Array<keyof typeof something> this explicit type assertion would not be necessary\n  // see https://stackoverflow.com/questions/55012174/why-doesnt-object-keys-return-a-keyof-type-in-typescript\n  helpers[key] = () => {\n    throw new TypeError('For queries bound to document.body a global document has to be available... Learn more: https://testing-library.com/s/screen-global-error');\n  };\n  return helpers;\n}, initialValue);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@testing-library/dom/dist/@testing-library/dom.esm.js\n")},"./node_modules/@testing-library/dom/node_modules/pretty-format/build/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = exports.DEFAULT_OPTIONS = void 0;\nexports.format = format;\nexports.plugins = void 0;\n\nvar _ansiStyles = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/ansi-styles/index.js\"));\n\nvar _collections = __webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/collections.js\");\n\nvar _AsymmetricMatcher = _interopRequireDefault(\n  __webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/AsymmetricMatcher.js\")\n);\n\nvar _ConvertAnsi = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ConvertAnsi.js\"));\n\nvar _DOMCollection = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMCollection.js\"));\n\nvar _DOMElement = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/DOMElement.js\"));\n\nvar _Immutable = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/Immutable.js\"));\n\nvar _ReactElement = _interopRequireDefault(__webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactElement.js\"));\n\nvar _ReactTestComponent = _interopRequireDefault(\n  __webpack_require__(\"./node_modules/@testing-library/dom/node_modules/pretty-format/build/plugins/ReactTestComponent.js\")\n);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\nconst toString = Object.prototype.toString;\nconst toISOString = Date.prototype.toISOString;\nconst errorToString = Error.prototype.toString;\nconst regExpToString = RegExp.prototype.toString;\n/**\n * Explicitly comparing typeof constructor to function avoids undefined as name\n * when mock identity-obj-proxy returns the key as the value for any key.\n */\n\nconst getConstructorName = val =>\n  (typeof val.constructor === 'function' && val.constructor.name) || 'Object';\n/* global window */\n\n/** Is val is equal to global window object? Works even if it does not exist :) */\n\nconst isWindow = val => typeof window !== 'undefined' && val === window;\n\nconst SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nconst NEWLINE_REGEXP = /\\n/gi;\n\nclass PrettyFormatPluginError extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n}\n\nfunction isToStringedArrayType(toStringed) {\n  return (\n    toStringed === '[object Array]' ||\n    toStringed === '[object ArrayBuffer]' ||\n    toStringed === '[object DataView]' ||\n    toStringed === '[object Float32Array]' ||\n    toStringed === '[object Float64Array]' ||\n    toStringed === '[object Int8Array]' ||\n    toStringed === '[object Int16Array]' ||\n    toStringed === '[object Int32Array]' ||\n    toStringed === '[object Uint8Array]' ||\n    toStringed === '[object Uint8ClampedArray]' ||\n    toStringed === '[object Uint16Array]' ||\n    toStringed === '[object Uint32Array]'\n  );\n}\n\nfunction printNumber(val) {\n  return Object.is(val, -0) ? '-0' : String(val);\n}\n\nfunction printBigInt(val) {\n  return String(`${val}n`);\n}\n\nfunction printFunction(val, printFunctionName) {\n  if (!printFunctionName) {\n    return '[Function]';\n  }\n\n  return '[Function ' + (val.name || 'anonymous') + ']';\n}\n\nfunction printSymbol(val) {\n  return String(val).replace(SYMBOL_REGEXP, 'Symbol($1)');\n}\n\nfunction printError(val) {\n  return '[' + errorToString.call(val) + ']';\n}\n/**\n * The first port of call for printing an object, handles most of the\n * data-types in JS.\n */\n\nfunction printBasicValue(val, printFunctionName, escapeRegex, escapeString) {\n  if (val === true || val === false) {\n    return '' + val;\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (val === null) {\n    return 'null';\n  }\n\n  const typeOf = typeof val;\n\n  if (typeOf === 'number') {\n    return printNumber(val);\n  }\n\n  if (typeOf === 'bigint') {\n    return printBigInt(val);\n  }\n\n  if (typeOf === 'string') {\n    if (escapeString) {\n      return '\"' + val.replace(/\"|\\\\/g, '\\\\$&') + '\"';\n    }\n\n    return '\"' + val + '\"';\n  }\n\n  if (typeOf === 'function') {\n    return printFunction(val, printFunctionName);\n  }\n\n  if (typeOf === 'symbol') {\n    return printSymbol(val);\n  }\n\n  const toStringed = toString.call(val);\n\n  if (toStringed === '[object WeakMap]') {\n    return 'WeakMap {}';\n  }\n\n  if (toStringed === '[object WeakSet]') {\n    return 'WeakSet {}';\n  }\n\n  if (\n    toStringed === '[object Function]' ||\n    toStringed === '[object GeneratorFunction]'\n  ) {\n    return printFunction(val, printFunctionName);\n  }\n\n  if (toStringed === '[object Symbol]') {\n    return printSymbol(val);\n  }\n\n  if (toStringed === '[object Date]') {\n    return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);\n  }\n\n  if (toStringed === '[object Error]') {\n    return printError(val);\n  }\n\n  if (toStringed === '[object RegExp]') {\n    if (escapeRegex) {\n      // https://github.com/benjamingr/RegExp.escape/blob/main/polyfill.js\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    return regExpToString.call(val);\n  }\n\n  if (val instanceof Error) {\n    return printError(val);\n  }\n\n  return null;\n}\n/**\n * Handles more complex objects ( such as objects with circular references.\n * maps and sets etc )\n */\n\nfunction printComplexValue(\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  hasCalledToJSON\n) {\n  if (refs.indexOf(val) !== -1) {\n    return '[Circular]';\n  }\n\n  refs = refs.slice();\n  refs.push(val);\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n\n  if (\n    config.callToJSON &&\n    !hitMaxDepth &&\n    val.toJSON &&\n    typeof val.toJSON === 'function' &&\n    !hasCalledToJSON\n  ) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n\n  const toStringed = toString.call(val);\n\n  if (toStringed === '[object Arguments]') {\n    return hitMaxDepth\n      ? '[Arguments]'\n      : (min ? '' : 'Arguments ') +\n          '[' +\n          (0, _collections.printListItems)(\n            val,\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          ) +\n          ']';\n  }\n\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth\n      ? '[' + val.constructor.name + ']'\n      : (min\n          ? ''\n          : !config.printBasicPrototype && val.constructor.name === 'Array'\n          ? ''\n          : val.constructor.name + ' ') +\n          '[' +\n          (0, _collections.printListItems)(\n            val,\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          ) +\n          ']';\n  }\n\n  if (toStringed === '[object Map]') {\n    return hitMaxDepth\n      ? '[Map]'\n      : 'Map {' +\n          (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer,\n            ' => '\n          ) +\n          '}';\n  }\n\n  if (toStringed === '[object Set]') {\n    return hitMaxDepth\n      ? '[Set]'\n      : 'Set {' +\n          (0, _collections.printIteratorValues)(\n            val.values(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          ) +\n          '}';\n  } // Avoid failure to serialize global window object in jsdom test environment.\n  // For example, not even relevant if window is prop of React element.\n\n  return hitMaxDepth || isWindow(val)\n    ? '[' + getConstructorName(val) + ']'\n    : (min\n        ? ''\n        : !config.printBasicPrototype && getConstructorName(val) === 'Object'\n        ? ''\n        : getConstructorName(val) + ' ') +\n        '{' +\n        (0, _collections.printObjectProperties)(\n          val,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        ) +\n        '}';\n}\n\nfunction isNewPlugin(plugin) {\n  return plugin.serialize != null;\n}\n\nfunction printPlugin(plugin, val, config, indentation, depth, refs) {\n  let printed;\n\n  try {\n    printed = isNewPlugin(plugin)\n      ? plugin.serialize(val, config, indentation, depth, refs, printer)\n      : plugin.print(\n          val,\n          valChild => printer(valChild, config, indentation, depth, refs),\n          str => {\n            const indentationNext = indentation + config.indent;\n            return (\n              indentationNext +\n              str.replace(NEWLINE_REGEXP, '\\n' + indentationNext)\n            );\n          },\n          {\n            edgeSpacing: config.spacingOuter,\n            min: config.min,\n            spacing: config.spacingInner\n          },\n          config.colors\n        );\n  } catch (error) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n\n  if (typeof printed !== 'string') {\n    throw new Error(\n      `pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`\n    );\n  }\n\n  return printed;\n}\n\nfunction findPlugin(plugins, val) {\n  for (let p = 0; p < plugins.length; p++) {\n    try {\n      if (plugins[p].test(val)) {\n        return plugins[p];\n      }\n    } catch (error) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n\n  return null;\n}\n\nfunction printer(val, config, indentation, depth, refs, hasCalledToJSON) {\n  const plugin = findPlugin(config.plugins, val);\n\n  if (plugin !== null) {\n    return printPlugin(plugin, val, config, indentation, depth, refs);\n  }\n\n  const basicResult = printBasicValue(\n    val,\n    config.printFunctionName,\n    config.escapeRegex,\n    config.escapeString\n  );\n\n  if (basicResult !== null) {\n    return basicResult;\n  }\n\n  return printComplexValue(\n    val,\n    config,\n    indentation,\n    depth,\n    refs,\n    hasCalledToJSON\n  );\n}\n\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green'\n};\nconst DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME);\nconst DEFAULT_OPTIONS = {\n  callToJSON: true,\n  compareKeys: undefined,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  min: false,\n  plugins: [],\n  printBasicPrototype: true,\n  printFunctionName: true,\n  theme: DEFAULT_THEME\n};\nexports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n\nfunction validateOptions(options) {\n  Object.keys(options).forEach(key => {\n    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n\n  if (options.min && options.indent !== undefined && options.indent !== 0) {\n    throw new Error(\n      'pretty-format: Options \"min\" and \"indent\" cannot be used together.'\n    );\n  }\n\n  if (options.theme !== undefined) {\n    if (options.theme === null) {\n      throw new Error('pretty-format: Option \"theme\" must not be null.');\n    }\n\n    if (typeof options.theme !== 'object') {\n      throw new Error(\n        `pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`\n      );\n    }\n  }\n}\n\nconst getColorsHighlight = options =>\n  DEFAULT_THEME_KEYS.reduce((colors, key) => {\n    const value =\n      options.theme && options.theme[key] !== undefined\n        ? options.theme[key]\n        : DEFAULT_THEME[key];\n    const color = value && _ansiStyles.default[value];\n\n    if (\n      color &&\n      typeof color.close === 'string' &&\n      typeof color.open === 'string'\n    ) {\n      colors[key] = color;\n    } else {\n      throw new Error(\n        `pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`\n      );\n    }\n\n    return colors;\n  }, Object.create(null));\n\nconst getColorsEmpty = () =>\n  DEFAULT_THEME_KEYS.reduce((colors, key) => {\n    colors[key] = {\n      close: '',\n      open: ''\n    };\n    return colors;\n  }, Object.create(null));\n\nconst getPrintFunctionName = options =>\n  options && options.printFunctionName !== undefined\n    ? options.printFunctionName\n    : DEFAULT_OPTIONS.printFunctionName;\n\nconst getEscapeRegex = options =>\n  options && options.escapeRegex !== undefined\n    ? options.escapeRegex\n    : DEFAULT_OPTIONS.escapeRegex;\n\nconst getEscapeString = options =>\n  options && options.escapeString !== undefined\n    ? options.escapeString\n    : DEFAULT_OPTIONS.escapeString;\n\nconst getConfig = options => {\n  var _options$printBasicPr;\n\n  return {\n    callToJSON:\n      options && options.callToJSON !== undefined\n        ? options.callToJSON\n        : DEFAULT_OPTIONS.callToJSON,\n    colors:\n      options && options.highlight\n        ? getColorsHighlight(options)\n        : getColorsEmpty(),\n    compareKeys:\n      options && typeof options.compareKeys === 'function'\n        ? options.compareKeys\n        : DEFAULT_OPTIONS.compareKeys,\n    escapeRegex: getEscapeRegex(options),\n    escapeString: getEscapeString(options),\n    indent:\n      options && options.min\n        ? ''\n        : createIndent(\n            options && options.indent !== undefined\n              ? options.indent\n              : DEFAULT_OPTIONS.indent\n          ),\n    maxDepth:\n      options && options.maxDepth !== undefined\n        ? options.maxDepth\n        : DEFAULT_OPTIONS.maxDepth,\n    min:\n      options && options.min !== undefined ? options.min : DEFAULT_OPTIONS.min,\n    plugins:\n      options && options.plugins !== undefined\n        ? options.plugins\n        : DEFAULT_OPTIONS.plugins,\n    printBasicPrototype:\n      (_options$printBasicPr =\n        options === null || options === void 0\n          ? void 0\n          : options.printBasicPrototype) !== null &&\n      _options$printBasicPr !== void 0\n        ? _options$printBasicPr\n        : true,\n    printFunctionName: getPrintFunctionName(options),\n    spacingInner: options && options.min ? ' ' : '\\n',\n    spacingOuter: options && options.min ? '' : '\\n'\n  };\n};\n\nfunction createIndent(indent) {\n  return new Array(indent + 1).join(' ');\n}\n/**\n * Returns a presentation string of your `val` object\n * @param val any potential JavaScript object\n * @param options Custom settings\n */\n\nfunction format(val, options) {\n  if (options) {\n    validateOptions(options);\n\n    if (options.plugins) {\n      const plugin = findPlugin(options.plugins, val);\n\n      if (plugin !== null) {\n        return printPlugin(plugin, val, getConfig(options), '', 0, []);\n      }\n    }\n  }\n\n  const basicResult = printBasicValue(\n    val,\n    getPrintFunctionName(options),\n    getEscapeRegex(options),\n    getEscapeString(options)\n  );\n\n  if (basicResult !== null) {\n    return basicResult;\n  }\n\n  return printComplexValue(val, getConfig(options), '', 0, []);\n}\n\nconst plugins = {\n  AsymmetricMatcher: _AsymmetricMatcher.default,\n  ConvertAnsi: _ConvertAnsi.default,\n  DOMCollection: _DOMCollection.default,\n  DOMElement: _DOMElement.default,\n  Immutable: _Immutable.default,\n  ReactElement: _ReactElement.default,\n  ReactTestComponent: _ReactTestComponent.default\n};\nexports.plugins = plugins;\nvar _default = format;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@testing-library/dom/node_modules/pretty-format/build/index.js\n")},"./node_modules/lodash/omit.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var arrayMap = __webpack_require__(\"./node_modules/lodash/_arrayMap.js\"),\n    baseClone = __webpack_require__(\"./node_modules/lodash/_baseClone.js\"),\n    baseUnset = __webpack_require__(\"./node_modules/lodash/_baseUnset.js\"),\n    castPath = __webpack_require__(\"./node_modules/lodash/_castPath.js\"),\n    copyObject = __webpack_require__(\"./node_modules/lodash/_copyObject.js\"),\n    customOmitClone = __webpack_require__(\"./node_modules/lodash/_customOmitClone.js\"),\n    flatRest = __webpack_require__(\"./node_modules/lodash/_flatRest.js\"),\n    getAllKeysIn = __webpack_require__(\"./node_modules/lodash/_getAllKeysIn.js\");\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL29taXQuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG9DQUFhO0FBQ3BDLGdCQUFnQixtQkFBTyxDQUFDLHFDQUFjO0FBQ3RDLGdCQUFnQixtQkFBTyxDQUFDLHFDQUFjO0FBQ3RDLGVBQWUsbUJBQU8sQ0FBQyxvQ0FBYTtBQUNwQyxpQkFBaUIsbUJBQU8sQ0FBQyxzQ0FBZTtBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQywyQ0FBb0I7QUFDbEQsZUFBZSxtQkFBTyxDQUFDLG9DQUFhO0FBQ3BDLG1CQUFtQixtQkFBTyxDQUFDLHdDQUFpQjs7QUFFNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHNCQUFzQjtBQUNqQyxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYWZ5Z3JlZW4tdWkvLi9ub2RlX21vZHVsZXMvbG9kYXNoL29taXQuanM/M2VlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VDbG9uZSA9IHJlcXVpcmUoJy4vX2Jhc2VDbG9uZScpLFxuICAgIGJhc2VVbnNldCA9IHJlcXVpcmUoJy4vX2Jhc2VVbnNldCcpLFxuICAgIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGN1c3RvbU9taXRDbG9uZSA9IHJlcXVpcmUoJy4vX2N1c3RvbU9taXRDbG9uZScpLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZSgnLi9fZmxhdFJlc3QnKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gKlxuICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gKiAvLyA9PiB7ICdiJzogJzInIH1cbiAqL1xudmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0pO1xuICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9taXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/omit.js\n")},"./node_modules/lodash/pick.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var basePick = __webpack_require__(\"./node_modules/lodash/_basePick.js\"),\n    flatRest = __webpack_require__(\"./node_modules/lodash/_flatRest.js\");\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3BpY2suanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG9DQUFhO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyxvQ0FBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxzQkFBc0I7QUFDakMsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWFmeWdyZWVuLXVpLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9waWNrLmpzPzI1OTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VQaWNrID0gcmVxdWlyZSgnLi9fYmFzZVBpY2snKSxcbiAgICBmbGF0UmVzdCA9IHJlcXVpcmUoJy4vX2ZsYXRSZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gKlxuICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAqL1xudmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwaWNrO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/pick.js\n")}}]);